// **Custom imports** 
`include "modules/pixel_sensor/pixelSensorAnalog.sv"
`include "lib/gates.v"

/* Generated by Yosys 0.10.0 (git sha1 UNKNOWN, clang 13.0.0 -fPIC -Os) */

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$004a2d6c4d72b173587acaf41269bb48988ab7d5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$004a2d6c4d72b173587acaf41269bb48988ab7d5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$004a2d6c4d72b173587acaf41269bb48988ab7d5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hdc;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$00de9470db4804ad703f3a427449ccace5dc208f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$00de9470db4804ad703f3a427449ccace5dc208f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$00de9470db4804ad703f3a427449ccace5dc208f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hca;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$011b031488263cb1341bc3cbf094332c58f24d84\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$011b031488263cb1341bc3cbf094332c58f24d84\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$011b031488263cb1341bc3cbf094332c58f24d84\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _15_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[5]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_03_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h40;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0186082d9ccf9a357d938a95f952fdc83a5418c9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0186082d9ccf9a357d938a95f952fdc83a5418c9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0186082d9ccf9a357d938a95f952fdc83a5418c9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$01d0898bce902f5836d8b4eda371e193f827c7d9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$01d0898bce902f5836d8b4eda371e193f827c7d9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$01d0898bce902f5836d8b4eda371e193f827c7d9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$02c5c830732c6fbe85a807e86b7e0f98a94d1c0d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$02c5c830732c6fbe85a807e86b7e0f98a94d1c0d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$02c5c830732c6fbe85a807e86b7e0f98a94d1c0d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$03522a3dc726e1588e6715540bc6a52f06a83c64\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$03522a3dc726e1588e6715540bc6a52f06a83c64\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$03522a3dc726e1588e6715540bc6a52f06a83c64\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h93;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$03bd2ee9c4c1d91d94a2bd9fc344c1bcb1cbfca6\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$03bd2ee9c4c1d91d94a2bd9fc344c1bcb1cbfca6\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$03bd2ee9c4c1d91d94a2bd9fc344c1bcb1cbfca6\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h72;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0429319b113fe77bee47c08686cac7b6a94277d2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0429319b113fe77bee47c08686cac7b6a94277d2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0429319b113fe77bee47c08686cac7b6a94277d2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$042b93abac83f342c48ddd629ef0cfc6a6f49dc2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$042b93abac83f342c48ddd629ef0cfc6a6f49dc2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$042b93abac83f342c48ddd629ef0cfc6a6f49dc2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$04ab72452bd65d8944b75f478892773812a03d44\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$04ab72452bd65d8944b75f478892773812a03d44\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$04ab72452bd65d8944b75f478892773812a03d44\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbe;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0529418fdfc6cc423835330dc8428809232bb79b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0529418fdfc6cc423835330dc8428809232bb79b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0529418fdfc6cc423835330dc8428809232bb79b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0552184fdee99217ca88b95207071bffb74d5bf1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0552184fdee99217ca88b95207071bffb74d5bf1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0552184fdee99217ca88b95207071bffb74d5bf1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$05b001e4ee05c68e3dc48af2ee9968743d309da1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$05b001e4ee05c68e3dc48af2ee9968743d309da1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$05b001e4ee05c68e3dc48af2ee9968743d309da1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'haa;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$05b5a4cd03672a09e9ee3e345072caec6c4218eb\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$05b5a4cd03672a09e9ee3e345072caec6c4218eb\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$05b5a4cd03672a09e9ee3e345072caec6c4218eb\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hab;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$05eebc84b29e4486e5dec0e0226432d16914dc79\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$05eebc84b29e4486e5dec0e0226432d16914dc79\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$05eebc84b29e4486e5dec0e0226432d16914dc79\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$066429d09da3bb27691aae6db4f562ae1b985a5e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$066429d09da3bb27691aae6db4f562ae1b985a5e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$066429d09da3bb27691aae6db4f562ae1b985a5e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h55;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$066a3667f14d210950ded5c6238511378617f4d0\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$066a3667f14d210950ded5c6238511378617f4d0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$066a3667f14d210950ded5c6238511378617f4d0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h8f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0710a45239c5a94f9ece3faa5687b147e48a2517\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0710a45239c5a94f9ece3faa5687b147e48a2517\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0710a45239c5a94f9ece3faa5687b147e48a2517\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _19_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h46;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0745564ac814651b2ab580900c51b0d971dc3f07\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0745564ac814651b2ab580900c51b0d971dc3f07\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0745564ac814651b2ab580900c51b0d971dc3f07\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h79;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0767d9c0d399f5c684df26501482fd27789c5dac\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0767d9c0d399f5c684df26501482fd27789c5dac\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0767d9c0d399f5c684df26501482fd27789c5dac\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hac;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$07eb617f8e5d8e273cd8064aefbd02c93154c9c0\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$07eb617f8e5d8e273cd8064aefbd02c93154c9c0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$07eb617f8e5d8e273cd8064aefbd02c93154c9c0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$07efc1129fff60dd1f92c52626e607e3d00c310e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$07efc1129fff60dd1f92c52626e607e3d00c310e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$07efc1129fff60dd1f92c52626e607e3d00c310e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h97;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$07ffe951c5b10a1ac21d53aba336f35632193a6e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$07ffe951c5b10a1ac21d53aba336f35632193a6e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$07ffe951c5b10a1ac21d53aba336f35632193a6e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0882c047ea8e09c58730536425ba3e11a37bd6f5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0882c047ea8e09c58730536425ba3e11a37bd6f5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0882c047ea8e09c58730536425ba3e11a37bd6f5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$08c77e10eb1136831232bf55a28dfde95f18dde9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$08c77e10eb1136831232bf55a28dfde95f18dde9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$08c77e10eb1136831232bf55a28dfde95f18dde9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h2f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$08e94c3250063f2dd756c00cd76350fd141df26f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$08e94c3250063f2dd756c00cd76350fd141df26f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$08e94c3250063f2dd756c00cd76350fd141df26f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$08fbb61fbeee1479bbddb2440780cddb7817a39f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$08fbb61fbeee1479bbddb2440780cddb7817a39f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$08fbb61fbeee1479bbddb2440780cddb7817a39f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hdb;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0936725936d1d014d45f62ee9a3ed9c0ed0302fe\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0936725936d1d014d45f62ee9a3ed9c0ed0302fe\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0936725936d1d014d45f62ee9a3ed9c0ed0302fe\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h6e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$09edb462dda648eff1ec5ec79d4bf1a0c7a89702\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$09edb462dda648eff1ec5ec79d4bf1a0c7a89702\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$09edb462dda648eff1ec5ec79d4bf1a0c7a89702\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0abf079137ff8d553329f823c6f79ee63452d1ca\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0abf079137ff8d553329f823c6f79ee63452d1ca\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0abf079137ff8d553329f823c6f79ee63452d1ca\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0aebb6fe1ddbc44cd1b1a3257d27f991be388040\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0aebb6fe1ddbc44cd1b1a3257d27f991be388040\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0aebb6fe1ddbc44cd1b1a3257d27f991be388040\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0b541322a7f3cf1199a5b736868db1f54e39a0c8\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0b541322a7f3cf1199a5b736868db1f54e39a0c8\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0b541322a7f3cf1199a5b736868db1f54e39a0c8\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NOT _21_ (
    .A(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0b8cf5cff17dbaeeaba1d08f3766bb469583d4ea\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0b8cf5cff17dbaeeaba1d08f3766bb469583d4ea\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0b8cf5cff17dbaeeaba1d08f3766bb469583d4ea\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbc;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0b8efd2cb5f44937e4399f4125d07a6092c590e9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0b8efd2cb5f44937e4399f4125d07a6092c590e9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0b8efd2cb5f44937e4399f4125d07a6092c590e9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbf;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0bfac63476fd658463f3b98ec736ae43195bb00f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0bfac63476fd658463f3b98ec736ae43195bb00f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0bfac63476fd658463f3b98ec736ae43195bb00f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NOR _18_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _19_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_05_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h2a;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$0c59e74ae579af3c77f7a1ac34c4ec2eddcf2718\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$0c59e74ae579af3c77f7a1ac34c4ec2eddcf2718\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$0c59e74ae579af3c77f7a1ac34c4ec2eddcf2718\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbd;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$104ac5915677b2d8ee381a562c2c0e65857211d9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$104ac5915677b2d8ee381a562c2c0e65857211d9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$104ac5915677b2d8ee381a562c2c0e65857211d9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$12f15bfb697180f459005cfbf283198e7f004d87\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$12f15bfb697180f459005cfbf283198e7f004d87\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$12f15bfb697180f459005cfbf283198e7f004d87\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hae;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$13ab33b35c6472e6e9886c4b0ba4809a49d34f49\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$13ab33b35c6472e6e9886c4b0ba4809a49d34f49\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$13ab33b35c6472e6e9886c4b0ba4809a49d34f49\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$14f1b757aa87e9b162809b1823e84258d2103e27\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$14f1b757aa87e9b162809b1823e84258d2103e27\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$14f1b757aa87e9b162809b1823e84258d2103e27\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h79;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$14fc8c5d7f86599dd8e65a6e2335ba789acfba9b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$14fc8c5d7f86599dd8e65a6e2335ba789acfba9b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$14fc8c5d7f86599dd8e65a6e2335ba789acfba9b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$156d6c38e10d0341cb6f6f5104789f70faddc0b3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$156d6c38e10d0341cb6f6f5104789f70faddc0b3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$156d6c38e10d0341cb6f6f5104789f70faddc0b3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hca;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$15e28f39ea9c2b4c42d772ae34f7b601516774e5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$15e28f39ea9c2b4c42d772ae34f7b601516774e5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$15e28f39ea9c2b4c42d772ae34f7b601516774e5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$169ae0e5df54bc032eb39df1d8994a27e2b9ed44\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$169ae0e5df54bc032eb39df1d8994a27e2b9ed44\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$169ae0e5df54bc032eb39df1d8994a27e2b9ed44\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NOT _21_ (
    .A(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h60;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1769562a7087921e9d71b71b513ff260628317b9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1769562a7087921e9d71b71b513ff260628317b9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1769562a7087921e9d71b71b513ff260628317b9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h28;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$17da6427d075e120ac534510ec72f6acf028ec7a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$17da6427d075e120ac534510ec72f6acf028ec7a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$17da6427d075e120ac534510ec72f6acf028ec7a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h72;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$183358489ef7141153b8733ed376b64d93529b1c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$183358489ef7141153b8733ed376b64d93529b1c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$183358489ef7141153b8733ed376b64d93529b1c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$183c928f06b71821b44ec346947200caceaee395\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$183c928f06b71821b44ec346947200caceaee395\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$183c928f06b71821b44ec346947200caceaee395\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _11_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NAND _12_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOR _13_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _15_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_04_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$183d17f4c3ae9e75eac9485dd0e287de4153ae8e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$183d17f4c3ae9e75eac9485dd0e287de4153ae8e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$183d17f4c3ae9e75eac9485dd0e287de4153ae8e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h70;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1850f0e476e36dbff939940fa2bdad9f281d7d2a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1850f0e476e36dbff939940fa2bdad9f281d7d2a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1850f0e476e36dbff939940fa2bdad9f281d7d2a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hda;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$18561be74e740abb0ac66bd359e3ab5756fb9e64\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$18561be74e740abb0ac66bd359e3ab5756fb9e64\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$18561be74e740abb0ac66bd359e3ab5756fb9e64\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$18e5a9a2bcb7da2bfbcae665db08e109405b4cad\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$18e5a9a2bcb7da2bfbcae665db08e109405b4cad\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$18e5a9a2bcb7da2bfbcae665db08e109405b4cad\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _19_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h4a;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$192c0738b21dda32a5b25307553aecaf68ef3b9e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$192c0738b21dda32a5b25307553aecaf68ef3b9e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$192c0738b21dda32a5b25307553aecaf68ef3b9e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h95;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$19aa88bc61e7883a69064b9b75d98a02e075941a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$19aa88bc61e7883a69064b9b75d98a02e075941a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$19aa88bc61e7883a69064b9b75d98a02e075941a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1a0a1d90e4b503dbbb1944aa7a2b0510aa84529e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1a0a1d90e4b503dbbb1944aa7a2b0510aa84529e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1a0a1d90e4b503dbbb1944aa7a2b0510aa84529e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbe;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1a159c28a720cd981a031f4583cd998edadf11fb\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1a159c28a720cd981a031f4583cd998edadf11fb\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1a159c28a720cd981a031f4583cd998edadf11fb\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hab;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1a4fa145c73588ee13c328b1ba342668f5c4c937\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1a4fa145c73588ee13c328b1ba342668f5c4c937\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1a4fa145c73588ee13c328b1ba342668f5c4c937\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h8b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1af38f47beed9be5c5209662c6ed8904d28a9d1f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1af38f47beed9be5c5209662c6ed8904d28a9d1f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1af38f47beed9be5c5209662c6ed8904d28a9d1f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h76;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1b0603d042e1b786f890cb13aad071f0c8ec3be3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1b0603d042e1b786f890cb13aad071f0c8ec3be3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1b0603d042e1b786f890cb13aad071f0c8ec3be3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1b3ed518d8707baefe0b5852fdd632356d7ae823\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1b3ed518d8707baefe0b5852fdd632356d7ae823\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1b3ed518d8707baefe0b5852fdd632356d7ae823\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h4e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1b5e39758ab73b2a08cc76a9f15f131062fe634a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1b5e39758ab73b2a08cc76a9f15f131062fe634a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1b5e39758ab73b2a08cc76a9f15f131062fe634a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hba;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1b8d27631d17fa0e52e8399f7f3948c6f18592d8\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1b8d27631d17fa0e52e8399f7f3948c6f18592d8\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1b8d27631d17fa0e52e8399f7f3948c6f18592d8\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1bba084887d0284ba9f4e257f3ec9d67875bcf66\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1bba084887d0284ba9f4e257f3ec9d67875bcf66\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1bba084887d0284ba9f4e257f3ec9d67875bcf66\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1bc823116d60f0c4b9e14cf917e396684860c4a8\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1bc823116d60f0c4b9e14cf917e396684860c4a8\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1bc823116d60f0c4b9e14cf917e396684860c4a8\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcc;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1bd151eea8da07b60a533fb45a7d506009c08542\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1bd151eea8da07b60a533fb45a7d506009c08542\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1bd151eea8da07b60a533fb45a7d506009c08542\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hac;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1ddef5e65aa79c2b889612bceb1d0ae1068b110f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1ddef5e65aa79c2b889612bceb1d0ae1068b110f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1ddef5e65aa79c2b889612bceb1d0ae1068b110f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbd;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1e86cdb6d89b5e3e2f8e47b34077ed42fefe1879\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1e86cdb6d89b5e3e2f8e47b34077ed42fefe1879\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1e86cdb6d89b5e3e2f8e47b34077ed42fefe1879\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1ec7be90266b4abc10611297be06dfc6c54a5905\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1ec7be90266b4abc10611297be06dfc6c54a5905\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1ec7be90266b4abc10611297be06dfc6c54a5905\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$1fc37abd1e31fd08ea66c5d6cb86900a4fef3d6d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$1fc37abd1e31fd08ea66c5d6cb86900a4fef3d6d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$1fc37abd1e31fd08ea66c5d6cb86900a4fef3d6d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NOR _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h2e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$20014d0860a1a05ffff752466332e7a1875265a6\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$20014d0860a1a05ffff752466332e7a1875265a6\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$20014d0860a1a05ffff752466332e7a1875265a6\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$200a42bb7213f4a98363f04ac406c822dc18be57\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$200a42bb7213f4a98363f04ac406c822dc18be57\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$200a42bb7213f4a98363f04ac406c822dc18be57\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$203b7c4b259ee952572b87d3e94151b5b02bbd2b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$203b7c4b259ee952572b87d3e94151b5b02bbd2b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$203b7c4b259ee952572b87d3e94151b5b02bbd2b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hda;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2155719df4bc99dec4198a2aba048f673893fd39\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2155719df4bc99dec4198a2aba048f673893fd39\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2155719df4bc99dec4198a2aba048f673893fd39\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hce;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$216081f28242a087812456025dad0c9cb39cef71\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$216081f28242a087812456025dad0c9cb39cef71\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$216081f28242a087812456025dad0c9cb39cef71\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$21609cfbd927f4e85ecfdb11f1cd3c4543f30aa8\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$21609cfbd927f4e85ecfdb11f1cd3c4543f30aa8\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$21609cfbd927f4e85ecfdb11f1cd3c4543f30aa8\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _15_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[5]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_03_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h40;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2171d64d410cf4071f5eeea96fd21d30751b0b46\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2171d64d410cf4071f5eeea96fd21d30751b0b46\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2171d64d410cf4071f5eeea96fd21d30751b0b46\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbd;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$22946c60536505e59e99f0c4c838dc75f8db2469\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$22946c60536505e59e99f0c4c838dc75f8db2469\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$22946c60536505e59e99f0c4c838dc75f8db2469\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$22c73d5d60ec3d5e39cd56823af25caec76f68d7\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$22c73d5d60ec3d5e39cd56823af25caec76f68d7\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$22c73d5d60ec3d5e39cd56823af25caec76f68d7\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$23231014f1babeedcc9bc1d1c8729ce0b94142dd\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$23231014f1babeedcc9bc1d1c8729ce0b94142dd\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$23231014f1babeedcc9bc1d1c8729ce0b94142dd\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h37;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$23e6440b70477a3b85ec011f1a0060f73d8dad10\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$23e6440b70477a3b85ec011f1a0060f73d8dad10\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$23e6440b70477a3b85ec011f1a0060f73d8dad10\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h17;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$240108b7baff6b8a58433063119e17a5c7026f5b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$240108b7baff6b8a58433063119e17a5c7026f5b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$240108b7baff6b8a58433063119e17a5c7026f5b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h69;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2405b8db8472c17480043fe34169358d39fcffe7\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2405b8db8472c17480043fe34169358d39fcffe7\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2405b8db8472c17480043fe34169358d39fcffe7\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _15_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[5]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_03_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h80;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2474b3329afefe42151692a67d0d800a2db4c73b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2474b3329afefe42151692a67d0d800a2db4c73b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2474b3329afefe42151692a67d0d800a2db4c73b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h33;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$25875dab1e73ff0f2f16f162b0e2b330423628c5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$25875dab1e73ff0f2f16f162b0e2b330423628c5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$25875dab1e73ff0f2f16f162b0e2b330423628c5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2594b280d5c4af2377e159be29bbcf7b35ceeee7\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2594b280d5c4af2377e159be29bbcf7b35ceeee7\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2594b280d5c4af2377e159be29bbcf7b35ceeee7\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h5d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$274f4673dab2745eb0842fcb451b84ceff2e8c9c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$274f4673dab2745eb0842fcb451b84ceff2e8c9c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$274f4673dab2745eb0842fcb451b84ceff2e8c9c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$278582c282b074c9c864d7d1c2c61da3bc899956\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$278582c282b074c9c864d7d1c2c61da3bc899956\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$278582c282b074c9c864d7d1c2c61da3bc899956\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h72;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$278b40e73ad49baba1e48a430aef02dabe007352\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$278b40e73ad49baba1e48a430aef02dabe007352\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$278b40e73ad49baba1e48a430aef02dabe007352\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h87;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$27cb51d048c1cf570e9eb8429847f9961c2ce0ee\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$27cb51d048c1cf570e9eb8429847f9961c2ce0ee\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$27cb51d048c1cf570e9eb8429847f9961c2ce0ee\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h78;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$281dc75a5b1b5193b07de00c45bb923afc3849a3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$281dc75a5b1b5193b07de00c45bb923afc3849a3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$281dc75a5b1b5193b07de00c45bb923afc3849a3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hab;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$282cefeb5c30c539108aa7677acca1ba17b2d791\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$282cefeb5c30c539108aa7677acca1ba17b2d791\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$282cefeb5c30c539108aa7677acca1ba17b2d791\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _17_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h82;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$28553b310d7811c2ab2a1fc59ea0e94b13ac7eb1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$28553b310d7811c2ab2a1fc59ea0e94b13ac7eb1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$28553b310d7811c2ab2a1fc59ea0e94b13ac7eb1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _12_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hdf;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$287b7bbe2e3f9c987f4c6c03282c27d50d2c2b68\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$287b7bbe2e3f9c987f4c6c03282c27d50d2c2b68\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$287b7bbe2e3f9c987f4c6c03282c27d50d2c2b68\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h7a;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$28850f21e0c73e1dce613d558c558862ef1fb79f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$28850f21e0c73e1dce613d558c558862ef1fb79f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$28850f21e0c73e1dce613d558c558862ef1fb79f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$28857a7eb38e4485e1e79f13ea0c52f64981fa5b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$28857a7eb38e4485e1e79f13ea0c52f64981fa5b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$28857a7eb38e4485e1e79f13ea0c52f64981fa5b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9c;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$298bff7ba96057d89810fc8fbdba14b8ab6b4f75\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$298bff7ba96057d89810fc8fbdba14b8ab6b4f75\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$298bff7ba96057d89810fc8fbdba14b8ab6b4f75\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h64;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2a0983495b55ab08a0c8a79b2aa83c17eb53f1a3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2a0983495b55ab08a0c8a79b2aa83c17eb53f1a3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2a0983495b55ab08a0c8a79b2aa83c17eb53f1a3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2a21d1145ac29982f3c7e78788658369f6fa667c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2a21d1145ac29982f3c7e78788658369f6fa667c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2a21d1145ac29982f3c7e78788658369f6fa667c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _15_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[5]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_03_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h80;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2ab221219a8a23f716bd6365038e8fc77cea70d7\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2ab221219a8a23f716bd6365038e8fc77cea70d7\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2ab221219a8a23f716bd6365038e8fc77cea70d7\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h75;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2ada5844b3e99cd0d222e36357dae1d6b7f0c26a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2ada5844b3e99cd0d222e36357dae1d6b7f0c26a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2ada5844b3e99cd0d222e36357dae1d6b7f0c26a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2ade59743e807bfcd78895d45d1d1e7f93306203\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2ade59743e807bfcd78895d45d1d1e7f93306203\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2ade59743e807bfcd78895d45d1d1e7f93306203\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2af64884ef19704217c3da913716334cadda778d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2af64884ef19704217c3da913716334cadda778d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2af64884ef19704217c3da913716334cadda778d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h56;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2b09eb99c06007a879330da0efe807811e8596bd\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2b09eb99c06007a879330da0efe807811e8596bd\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2b09eb99c06007a879330da0efe807811e8596bd\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hac;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2b236d1805a3b53cacc163683c8312851678371f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2b236d1805a3b53cacc163683c8312851678371f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2b236d1805a3b53cacc163683c8312851678371f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2b42d6d690715b4240c473131bc5b5c1e5f7c003\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2b42d6d690715b4240c473131bc5b5c1e5f7c003\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2b42d6d690715b4240c473131bc5b5c1e5f7c003\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h7d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2c249a99d6a25f961052f3af95c66a80af94b76c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2c249a99d6a25f961052f3af95c66a80af94b76c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2c249a99d6a25f961052f3af95c66a80af94b76c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2ce44525c24ad80ad78d82a5cba001b877f26342\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2ce44525c24ad80ad78d82a5cba001b877f26342\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2ce44525c24ad80ad78d82a5cba001b877f26342\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h6e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2d5692b9b763899b8d8a8350befcb802f0a79c3a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2d5692b9b763899b8d8a8350befcb802f0a79c3a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2d5692b9b763899b8d8a8350befcb802f0a79c3a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hca;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2d706cd3af41ae36b925481ed0ec026875df3a49\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2d706cd3af41ae36b925481ed0ec026875df3a49\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2d706cd3af41ae36b925481ed0ec026875df3a49\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9c;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2d7398bc60324bc42c137744e6f1e701f82607bd\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2d7398bc60324bc42c137744e6f1e701f82607bd\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2d7398bc60324bc42c137744e6f1e701f82607bd\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hda;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2d88d96fd4faf8b86979f2745586af26ca9dccb1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2d88d96fd4faf8b86979f2745586af26ca9dccb1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2d88d96fd4faf8b86979f2745586af26ca9dccb1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h70;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2e2515711462623047324ff48ab86c0f2ee91b84\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2e2515711462623047324ff48ab86c0f2ee91b84\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2e2515711462623047324ff48ab86c0f2ee91b84\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2e557168e84ec413a77d36c29f5a15d3b4b58d0a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2e557168e84ec413a77d36c29f5a15d3b4b58d0a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2e557168e84ec413a77d36c29f5a15d3b4b58d0a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2f10279d2c2898975dcebe58d3f689a0ddd3e414\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2f10279d2c2898975dcebe58d3f689a0ddd3e414\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2f10279d2c2898975dcebe58d3f689a0ddd3e414\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hda;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$2fd6d3f4d59a1279088552194ee282c305ae37f6\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$2fd6d3f4d59a1279088552194ee282c305ae37f6\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$2fd6d3f4d59a1279088552194ee282c305ae37f6\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h3e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$3020e25209101b10475182cea562f9b0a3638cf9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$3020e25209101b10475182cea562f9b0a3638cf9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$3020e25209101b10475182cea562f9b0a3638cf9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hba;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$303b80749d9522b919dae0acb7a53c528b068ad0\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$303b80749d9522b919dae0acb7a53c528b068ad0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$303b80749d9522b919dae0acb7a53c528b068ad0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'he2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$3157723d492346a7befead03d9df7a61b9ef7ef2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$3157723d492346a7befead03d9df7a61b9ef7ef2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$3157723d492346a7befead03d9df7a61b9ef7ef2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$31902666f8b34e03a4852bbcee5be855921d5503\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$31902666f8b34e03a4852bbcee5be855921d5503\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$31902666f8b34e03a4852bbcee5be855921d5503\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$31d075ab7501aefa9c9874cde7bedc7b46809c6c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$31d075ab7501aefa9c9874cde7bedc7b46809c6c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$31d075ab7501aefa9c9874cde7bedc7b46809c6c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$32577fc83a068d78a52f76b29de73bc85fcfe496\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$32577fc83a068d78a52f76b29de73bc85fcfe496\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$32577fc83a068d78a52f76b29de73bc85fcfe496\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$32f0ab2cf437a2eec033b0d4a5eaa5bd489df4b5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$32f0ab2cf437a2eec033b0d4a5eaa5bd489df4b5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$32f0ab2cf437a2eec033b0d4a5eaa5bd489df4b5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$330eef13b0bce5204ba064431b0a72b67c58d101\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$330eef13b0bce5204ba064431b0a72b67c58d101\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$330eef13b0bce5204ba064431b0a72b67c58d101\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h5d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$35218b83a6c825f6c3062ba8eff0014feb443211\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$35218b83a6c825f6c3062ba8eff0014feb443211\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$35218b83a6c825f6c3062ba8eff0014feb443211\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$35ff1cf19a5ef2fbefa42dc270b884a1c4adad42\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$35ff1cf19a5ef2fbefa42dc270b884a1c4adad42\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$35ff1cf19a5ef2fbefa42dc270b884a1c4adad42\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$362c8512471a0a8e444e3ec8c7d90e4b34486891\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$362c8512471a0a8e444e3ec8c7d90e4b34486891\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$362c8512471a0a8e444e3ec8c7d90e4b34486891\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbf;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$36bb176a465719697e88c740789334de7b71bf3f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$36bb176a465719697e88c740789334de7b71bf3f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$36bb176a465719697e88c740789334de7b71bf3f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _19_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h8a;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$374565717dd92c5e213808346985793b7aa2bd6d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$374565717dd92c5e213808346985793b7aa2bd6d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$374565717dd92c5e213808346985793b7aa2bd6d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h72;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$3774e61f81482dd8756fe7fe948037aa483a64c7\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$3774e61f81482dd8756fe7fe948037aa483a64c7\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$3774e61f81482dd8756fe7fe948037aa483a64c7\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hac;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$37e7bc72f3d173522dcfadd7d83ae1c0d2aefea4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$37e7bc72f3d173522dcfadd7d83ae1c0d2aefea4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$37e7bc72f3d173522dcfadd7d83ae1c0d2aefea4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h72;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$385a6c89e6c677e286ed9cdcd2038901a36c509c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$385a6c89e6c677e286ed9cdcd2038901a36c509c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$385a6c89e6c677e286ed9cdcd2038901a36c509c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$39ad6a0c14bd0b7ea7621f6429ed5931a698c21e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$39ad6a0c14bd0b7ea7621f6429ed5931a698c21e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$39ad6a0c14bd0b7ea7621f6429ed5931a698c21e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$39b54efdc01cf5052275fdfe20ceac44dd727a73\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$39b54efdc01cf5052275fdfe20ceac44dd727a73\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$39b54efdc01cf5052275fdfe20ceac44dd727a73\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NOT _21_ (
    .A(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$39f9150f67b66ae4be5b7c624ad48732e92261aa\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$39f9150f67b66ae4be5b7c624ad48732e92261aa\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$39f9150f67b66ae4be5b7c624ad48732e92261aa\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h72;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$3ac3743f0a4bb73ef3f7f1a1d4dabf69d2a16fae\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$3ac3743f0a4bb73ef3f7f1a1d4dabf69d2a16fae\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$3ac3743f0a4bb73ef3f7f1a1d4dabf69d2a16fae\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbf;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$3ad1b0f9a1edc5a1b3e0b5fed8eb916e6eee802f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$3ad1b0f9a1edc5a1b3e0b5fed8eb916e6eee802f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$3ad1b0f9a1edc5a1b3e0b5fed8eb916e6eee802f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$3ba56fcaf12890106455b3cb027da67e2e94dff1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$3ba56fcaf12890106455b3cb027da67e2e94dff1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$3ba56fcaf12890106455b3cb027da67e2e94dff1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$3baa451be99be0e71c20c0329e2618101c0ab8c5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$3baa451be99be0e71c20c0329e2618101c0ab8c5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$3baa451be99be0e71c20c0329e2618101c0ab8c5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$3cfe9df848d559f8beea68716dc6c59c21b03e4f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$3cfe9df848d559f8beea68716dc6c59c21b03e4f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$3cfe9df848d559f8beea68716dc6c59c21b03e4f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbb;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$3d6eabeba7d6e12105ca2ca926716a8b371c2525\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$3d6eabeba7d6e12105ca2ca926716a8b371c2525\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$3d6eabeba7d6e12105ca2ca926716a8b371c2525\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$3d834ca4e44c329ec2b0c10fe8ec2bc9e1ceccea\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$3d834ca4e44c329ec2b0c10fe8ec2bc9e1ceccea\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$3d834ca4e44c329ec2b0c10fe8ec2bc9e1ceccea\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$3e49e186a594fe6eed4356a04fcd3b5c95e9e14d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$3e49e186a594fe6eed4356a04fcd3b5c95e9e14d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$3e49e186a594fe6eed4356a04fcd3b5c95e9e14d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$3e6dc0c2061895833d300200da0bb57d40ee581e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$3e6dc0c2061895833d300200da0bb57d40ee581e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$3e6dc0c2061895833d300200da0bb57d40ee581e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$3faeccecc3fb3442cc22ef26092d768b5364bf66\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$3faeccecc3fb3442cc22ef26092d768b5364bf66\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$3faeccecc3fb3442cc22ef26092d768b5364bf66\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbe;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$3ff46d8c1257929945faf597d655afc8575d481d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$3ff46d8c1257929945faf597d655afc8575d481d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$3ff46d8c1257929945faf597d655afc8575d481d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4072355c81260281be756f83994b8949aeb645d2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4072355c81260281be756f83994b8949aeb645d2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4072355c81260281be756f83994b8949aeb645d2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$411b072b1d6548a3730fe42f78c0e378d37aeed1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$411b072b1d6548a3730fe42f78c0e378d37aeed1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$411b072b1d6548a3730fe42f78c0e378d37aeed1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$414360eca1aa4c33e9f94327bc33bf17f645a30f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$414360eca1aa4c33e9f94327bc33bf17f645a30f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$414360eca1aa4c33e9f94327bc33bf17f645a30f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h64;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4203dca64e4bd77439eaa40ee103a4ea9f22c12a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4203dca64e4bd77439eaa40ee103a4ea9f22c12a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4203dca64e4bd77439eaa40ee103a4ea9f22c12a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h32;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$42e975066d98ad79fd3d6ad71b9bf8bbd696eca1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$42e975066d98ad79fd3d6ad71b9bf8bbd696eca1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$42e975066d98ad79fd3d6ad71b9bf8bbd696eca1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$43805d7668ed07d3dde47b736f95915996c6f6a5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$43805d7668ed07d3dde47b736f95915996c6f6a5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$43805d7668ed07d3dde47b736f95915996c6f6a5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$443db24e96db1116d5b8e943c7f636d8bdafe5f2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$443db24e96db1116d5b8e943c7f636d8bdafe5f2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$443db24e96db1116d5b8e943c7f636d8bdafe5f2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$450092b797e7e5573a8b8b87593088f6ec3d9bf4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$450092b797e7e5573a8b8b87593088f6ec3d9bf4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$450092b797e7e5573a8b8b87593088f6ec3d9bf4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$459224f4980ff07f4e6d8b3803d67ae1321e0a58\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$459224f4980ff07f4e6d8b3803d67ae1321e0a58\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$459224f4980ff07f4e6d8b3803d67ae1321e0a58\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$46238fb00a6e6ab46296d2c77024d17ed5539bd2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$46238fb00a6e6ab46296d2c77024d17ed5539bd2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$46238fb00a6e6ab46296d2c77024d17ed5539bd2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h3b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$471f8057041812a0a1d6dbb66437fd1ee4e8ecc1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$471f8057041812a0a1d6dbb66437fd1ee4e8ecc1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$471f8057041812a0a1d6dbb66437fd1ee4e8ecc1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h99;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$473fd670d14df5d07d633f9b5f53b0bd93106422\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$473fd670d14df5d07d633f9b5f53b0bd93106422\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$473fd670d14df5d07d633f9b5f53b0bd93106422\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$47765dbe7ea0437b162399ca93b9ff1df4cc9217\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$47765dbe7ea0437b162399ca93b9ff1df4cc9217\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$47765dbe7ea0437b162399ca93b9ff1df4cc9217\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$479bfff085236c83a41b8c4dad5a8c67592459af\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$479bfff085236c83a41b8c4dad5a8c67592459af\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$479bfff085236c83a41b8c4dad5a8c67592459af\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$482b965326f1c4fd7f8a39c6ebc2b9bade0cadf8\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$482b965326f1c4fd7f8a39c6ebc2b9bade0cadf8\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$482b965326f1c4fd7f8a39c6ebc2b9bade0cadf8\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$485b9fd2889922ea384df8ce79cb26f786391b5f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$485b9fd2889922ea384df8ce79cb26f786391b5f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$485b9fd2889922ea384df8ce79cb26f786391b5f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hac;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$492152bd64368008a685e7071db9e146dfc402d2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$492152bd64368008a685e7071db9e146dfc402d2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$492152bd64368008a685e7071db9e146dfc402d2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcd;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$49f23997283855e956073715e9c790457ca237f0\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$49f23997283855e956073715e9c790457ca237f0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$49f23997283855e956073715e9c790457ca237f0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4a8d2a3b4f1edbf6dd948bfa37ebe99a4e1057e8\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4a8d2a3b4f1edbf6dd948bfa37ebe99a4e1057e8\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4a8d2a3b4f1edbf6dd948bfa37ebe99a4e1057e8\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4b3222d112b625245bddf927690904d7d313701d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4b3222d112b625245bddf927690904d7d313701d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4b3222d112b625245bddf927690904d7d313701d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4b46cbb96b415e8870604a258bab08654909c631\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4b46cbb96b415e8870604a258bab08654909c631\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4b46cbb96b415e8870604a258bab08654909c631\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4b7befa6f0766acda836fb960ffdb1da13aad8ce\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4b7befa6f0766acda836fb960ffdb1da13aad8ce\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4b7befa6f0766acda836fb960ffdb1da13aad8ce\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4c3e58a4a62fafb3fe0902f7ea9947bf968ce4da\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4c3e58a4a62fafb3fe0902f7ea9947bf968ce4da\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4c3e58a4a62fafb3fe0902f7ea9947bf968ce4da\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9c;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4c6d710cb154dff50925d81567d3b18b9bcc69a2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4c6d710cb154dff50925d81567d3b18b9bcc69a2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4c6d710cb154dff50925d81567d3b18b9bcc69a2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _19_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h49;
endmodule

(* dynports =  1  *)
(* hdlname = "\\RegisterShifter" *)
(* src = "output/sensorTop.v:373.1-402.10" *)
module \$paramod$4e29df410bc8e16bc6e2605c65ed249684a89f75\RegisterShifter (set, set_select, reset, shift, data_in, data_out);
  (* src = "output/sensorTop.v:395.10-395.21" *)
  wire _000_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _001_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _002_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _003_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _004_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _005_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _006_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _007_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _008_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _009_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _010_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _011_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _012_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _013_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _014_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _015_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _016_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _017_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _018_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _019_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _020_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _021_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _022_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _023_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _024_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _025_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _026_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _027_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _028_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _029_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _030_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _031_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _032_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _033_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _034_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _035_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _036_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _037_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _038_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _039_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _040_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _041_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _042_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _043_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _044_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _045_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _046_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _047_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _048_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _049_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _050_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _051_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _052_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _053_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _054_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _055_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _056_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _057_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _058_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _059_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _060_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _061_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _062_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _063_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _064_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _065_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _066_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _067_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _068_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _069_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _070_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _071_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _072_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _073_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _074_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _075_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _076_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _077_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _078_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _079_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _080_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _081_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _082_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _083_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _084_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _085_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _086_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _087_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _088_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _089_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _090_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _091_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _092_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _093_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _094_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _095_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _096_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _097_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _098_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _099_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _100_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _101_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _102_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _103_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _104_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _105_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _106_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _107_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _108_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _109_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _110_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _111_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _112_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _113_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _114_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _115_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _116_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _117_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _118_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _119_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _120_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _121_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _122_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _123_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _124_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _125_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _126_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _127_;
  (* src = "output/sensorTop.v:397.15-397.128" *)
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  wire _235_;
  wire _236_;
  wire _237_;
  wire _238_;
  wire _239_;
  wire _240_;
  wire _241_;
  wire _242_;
  wire _243_;
  wire _244_;
  wire _245_;
  wire _246_;
  wire _247_;
  wire _248_;
  wire _249_;
  wire _250_;
  wire _251_;
  wire _252_;
  wire _253_;
  wire _254_;
  wire _255_;
  wire _256_;
  wire _257_;
  wire _258_;
  wire _259_;
  wire _260_;
  wire _261_;
  wire _262_;
  wire _263_;
  wire _264_;
  wire _265_;
  wire _266_;
  wire _267_;
  wire _268_;
  wire _269_;
  wire _270_;
  wire _271_;
  wire _272_;
  wire _273_;
  wire _274_;
  wire _275_;
  wire _276_;
  wire _277_;
  wire _278_;
  wire _279_;
  wire _280_;
  wire _281_;
  wire _282_;
  wire _283_;
  wire _284_;
  wire _285_;
  wire _286_;
  wire _287_;
  wire _288_;
  wire _289_;
  wire _290_;
  wire _291_;
  wire _292_;
  wire _293_;
  wire _294_;
  wire _295_;
  wire _296_;
  wire _297_;
  wire _298_;
  wire _299_;
  wire _300_;
  wire _301_;
  wire _302_;
  wire _303_;
  wire _304_;
  wire _305_;
  wire _306_;
  wire _307_;
  wire _308_;
  wire _309_;
  wire _310_;
  wire _311_;
  wire _312_;
  wire _313_;
  wire _314_;
  wire _315_;
  wire _316_;
  wire _317_;
  wire _318_;
  wire _319_;
  wire _320_;
  wire _321_;
  wire _322_;
  wire _323_;
  wire _324_;
  wire _325_;
  wire _326_;
  wire _327_;
  wire _328_;
  wire _329_;
  wire _330_;
  wire _331_;
  wire _332_;
  wire _333_;
  wire _334_;
  wire _335_;
  wire _336_;
  wire _337_;
  wire _338_;
  wire _339_;
  wire _340_;
  wire _341_;
  wire _342_;
  wire _343_;
  wire _344_;
  wire _345_;
  wire _346_;
  wire _347_;
  wire _348_;
  wire _349_;
  wire _350_;
  wire _351_;
  wire _352_;
  wire _353_;
  wire _354_;
  wire _355_;
  wire _356_;
  wire _357_;
  wire _358_;
  wire _359_;
  wire _360_;
  wire _361_;
  wire _362_;
  wire _363_;
  wire _364_;
  wire _365_;
  wire _366_;
  wire _367_;
  wire _368_;
  wire _369_;
  wire _370_;
  wire _371_;
  wire _372_;
  wire _373_;
  wire _374_;
  wire _375_;
  wire _376_;
  wire _377_;
  wire _378_;
  wire _379_;
  wire _380_;
  wire _381_;
  wire _382_;
  wire _383_;
  wire _384_;
  wire _385_;
  wire _386_;
  (* src = "output/sensorTop.v:387.32-387.39" *)
  input [191:0] data_in;
  (* src = "output/sensorTop.v:388.27-388.35" *)
  output [63:0] data_out;
  (* src = "output/sensorTop.v:389.31-389.45" *)
  wire [191:0] local_data_out;
  (* src = "output/sensorTop.v:383.8-383.13" *)
  input reset;
  (* src = "output/sensorTop.v:381.8-381.11" *)
  input set;
  (* src = "output/sensorTop.v:382.8-382.18" *)
  input set_select;
  (* src = "output/sensorTop.v:384.8-384.13" *)
  input shift;
  NOT _387_ (
    .A(set_select),
    .Y(_129_)
  );
  NAND _388_ (
    .A(data_in[64]),
    .B(set_select),
    .Y(_130_)
  );
  NAND _389_ (
    .A(local_data_out[128]),
    .B(_129_),
    .Y(_131_)
  );
  NAND _390_ (
    .A(_130_),
    .B(_131_),
    .Y(_065_)
  );
  NAND _391_ (
    .A(set_select),
    .B(data_in[65]),
    .Y(_132_)
  );
  NAND _392_ (
    .A(_129_),
    .B(local_data_out[129]),
    .Y(_133_)
  );
  NAND _393_ (
    .A(_132_),
    .B(_133_),
    .Y(_076_)
  );
  NAND _394_ (
    .A(set_select),
    .B(data_in[66]),
    .Y(_134_)
  );
  NAND _395_ (
    .A(_129_),
    .B(local_data_out[130]),
    .Y(_135_)
  );
  NAND _396_ (
    .A(_134_),
    .B(_135_),
    .Y(_087_)
  );
  NAND _397_ (
    .A(set_select),
    .B(data_in[67]),
    .Y(_136_)
  );
  NAND _398_ (
    .A(_129_),
    .B(local_data_out[131]),
    .Y(_137_)
  );
  NAND _399_ (
    .A(_136_),
    .B(_137_),
    .Y(_098_)
  );
  NAND _400_ (
    .A(set_select),
    .B(data_in[68]),
    .Y(_138_)
  );
  NAND _401_ (
    .A(_129_),
    .B(local_data_out[132]),
    .Y(_139_)
  );
  NAND _402_ (
    .A(_138_),
    .B(_139_),
    .Y(_109_)
  );
  NAND _403_ (
    .A(set_select),
    .B(data_in[69]),
    .Y(_140_)
  );
  NAND _404_ (
    .A(_129_),
    .B(local_data_out[133]),
    .Y(_141_)
  );
  NAND _405_ (
    .A(_140_),
    .B(_141_),
    .Y(_120_)
  );
  NAND _406_ (
    .A(set_select),
    .B(data_in[70]),
    .Y(_142_)
  );
  NAND _407_ (
    .A(_129_),
    .B(local_data_out[134]),
    .Y(_143_)
  );
  NAND _408_ (
    .A(_142_),
    .B(_143_),
    .Y(_125_)
  );
  NAND _409_ (
    .A(set_select),
    .B(data_in[71]),
    .Y(_144_)
  );
  NAND _410_ (
    .A(_129_),
    .B(local_data_out[135]),
    .Y(_145_)
  );
  NAND _411_ (
    .A(_144_),
    .B(_145_),
    .Y(_126_)
  );
  NAND _412_ (
    .A(set_select),
    .B(data_in[72]),
    .Y(_146_)
  );
  NAND _413_ (
    .A(_129_),
    .B(local_data_out[136]),
    .Y(_147_)
  );
  NAND _414_ (
    .A(_146_),
    .B(_147_),
    .Y(_127_)
  );
  NAND _415_ (
    .A(set_select),
    .B(data_in[73]),
    .Y(_148_)
  );
  NAND _416_ (
    .A(_129_),
    .B(local_data_out[137]),
    .Y(_149_)
  );
  NAND _417_ (
    .A(_148_),
    .B(_149_),
    .Y(_128_)
  );
  NAND _418_ (
    .A(set_select),
    .B(data_in[74]),
    .Y(_150_)
  );
  NAND _419_ (
    .A(_129_),
    .B(local_data_out[138]),
    .Y(_151_)
  );
  NAND _420_ (
    .A(_150_),
    .B(_151_),
    .Y(_066_)
  );
  NAND _421_ (
    .A(set_select),
    .B(data_in[75]),
    .Y(_152_)
  );
  NAND _422_ (
    .A(_129_),
    .B(local_data_out[139]),
    .Y(_153_)
  );
  NAND _423_ (
    .A(_152_),
    .B(_153_),
    .Y(_067_)
  );
  NAND _424_ (
    .A(set_select),
    .B(data_in[76]),
    .Y(_154_)
  );
  NAND _425_ (
    .A(_129_),
    .B(local_data_out[140]),
    .Y(_155_)
  );
  NAND _426_ (
    .A(_154_),
    .B(_155_),
    .Y(_068_)
  );
  NAND _427_ (
    .A(set_select),
    .B(data_in[77]),
    .Y(_156_)
  );
  NAND _428_ (
    .A(_129_),
    .B(local_data_out[141]),
    .Y(_157_)
  );
  NAND _429_ (
    .A(_156_),
    .B(_157_),
    .Y(_069_)
  );
  NAND _430_ (
    .A(set_select),
    .B(data_in[78]),
    .Y(_158_)
  );
  NAND _431_ (
    .A(_129_),
    .B(local_data_out[142]),
    .Y(_159_)
  );
  NAND _432_ (
    .A(_158_),
    .B(_159_),
    .Y(_070_)
  );
  NAND _433_ (
    .A(set_select),
    .B(data_in[79]),
    .Y(_160_)
  );
  NAND _434_ (
    .A(_129_),
    .B(local_data_out[143]),
    .Y(_161_)
  );
  NAND _435_ (
    .A(_160_),
    .B(_161_),
    .Y(_071_)
  );
  NAND _436_ (
    .A(set_select),
    .B(data_in[80]),
    .Y(_162_)
  );
  NAND _437_ (
    .A(_129_),
    .B(local_data_out[144]),
    .Y(_163_)
  );
  NAND _438_ (
    .A(_162_),
    .B(_163_),
    .Y(_072_)
  );
  NAND _439_ (
    .A(set_select),
    .B(data_in[81]),
    .Y(_164_)
  );
  NAND _440_ (
    .A(_129_),
    .B(local_data_out[145]),
    .Y(_165_)
  );
  NAND _441_ (
    .A(_164_),
    .B(_165_),
    .Y(_073_)
  );
  NAND _442_ (
    .A(set_select),
    .B(data_in[82]),
    .Y(_166_)
  );
  NAND _443_ (
    .A(_129_),
    .B(local_data_out[146]),
    .Y(_167_)
  );
  NAND _444_ (
    .A(_166_),
    .B(_167_),
    .Y(_074_)
  );
  NAND _445_ (
    .A(set_select),
    .B(data_in[83]),
    .Y(_168_)
  );
  NAND _446_ (
    .A(_129_),
    .B(local_data_out[147]),
    .Y(_169_)
  );
  NAND _447_ (
    .A(_168_),
    .B(_169_),
    .Y(_075_)
  );
  NAND _448_ (
    .A(set_select),
    .B(data_in[84]),
    .Y(_170_)
  );
  NAND _449_ (
    .A(_129_),
    .B(local_data_out[148]),
    .Y(_171_)
  );
  NAND _450_ (
    .A(_170_),
    .B(_171_),
    .Y(_077_)
  );
  NAND _451_ (
    .A(set_select),
    .B(data_in[85]),
    .Y(_172_)
  );
  NAND _452_ (
    .A(_129_),
    .B(local_data_out[149]),
    .Y(_173_)
  );
  NAND _453_ (
    .A(_172_),
    .B(_173_),
    .Y(_078_)
  );
  NAND _454_ (
    .A(set_select),
    .B(data_in[86]),
    .Y(_174_)
  );
  NAND _455_ (
    .A(_129_),
    .B(local_data_out[150]),
    .Y(_175_)
  );
  NAND _456_ (
    .A(_174_),
    .B(_175_),
    .Y(_079_)
  );
  NAND _457_ (
    .A(set_select),
    .B(data_in[87]),
    .Y(_176_)
  );
  NAND _458_ (
    .A(_129_),
    .B(local_data_out[151]),
    .Y(_177_)
  );
  NAND _459_ (
    .A(_176_),
    .B(_177_),
    .Y(_080_)
  );
  NAND _460_ (
    .A(set_select),
    .B(data_in[88]),
    .Y(_178_)
  );
  NAND _461_ (
    .A(_129_),
    .B(local_data_out[152]),
    .Y(_179_)
  );
  NAND _462_ (
    .A(_178_),
    .B(_179_),
    .Y(_081_)
  );
  NAND _463_ (
    .A(set_select),
    .B(data_in[89]),
    .Y(_180_)
  );
  NAND _464_ (
    .A(_129_),
    .B(local_data_out[153]),
    .Y(_181_)
  );
  NAND _465_ (
    .A(_180_),
    .B(_181_),
    .Y(_082_)
  );
  NAND _466_ (
    .A(set_select),
    .B(data_in[90]),
    .Y(_182_)
  );
  NAND _467_ (
    .A(_129_),
    .B(local_data_out[154]),
    .Y(_183_)
  );
  NAND _468_ (
    .A(_182_),
    .B(_183_),
    .Y(_083_)
  );
  NAND _469_ (
    .A(set_select),
    .B(data_in[91]),
    .Y(_184_)
  );
  NAND _470_ (
    .A(_129_),
    .B(local_data_out[155]),
    .Y(_185_)
  );
  NAND _471_ (
    .A(_184_),
    .B(_185_),
    .Y(_084_)
  );
  NAND _472_ (
    .A(set_select),
    .B(data_in[92]),
    .Y(_186_)
  );
  NAND _473_ (
    .A(_129_),
    .B(local_data_out[156]),
    .Y(_187_)
  );
  NAND _474_ (
    .A(_186_),
    .B(_187_),
    .Y(_085_)
  );
  NAND _475_ (
    .A(set_select),
    .B(data_in[93]),
    .Y(_188_)
  );
  NAND _476_ (
    .A(_129_),
    .B(local_data_out[157]),
    .Y(_189_)
  );
  NAND _477_ (
    .A(_188_),
    .B(_189_),
    .Y(_086_)
  );
  NAND _478_ (
    .A(set_select),
    .B(data_in[94]),
    .Y(_190_)
  );
  NAND _479_ (
    .A(_129_),
    .B(local_data_out[158]),
    .Y(_191_)
  );
  NAND _480_ (
    .A(_190_),
    .B(_191_),
    .Y(_088_)
  );
  NAND _481_ (
    .A(set_select),
    .B(data_in[95]),
    .Y(_192_)
  );
  NAND _482_ (
    .A(_129_),
    .B(local_data_out[159]),
    .Y(_193_)
  );
  NAND _483_ (
    .A(_192_),
    .B(_193_),
    .Y(_089_)
  );
  NAND _484_ (
    .A(set_select),
    .B(data_in[96]),
    .Y(_194_)
  );
  NAND _485_ (
    .A(_129_),
    .B(local_data_out[160]),
    .Y(_195_)
  );
  NAND _486_ (
    .A(_194_),
    .B(_195_),
    .Y(_090_)
  );
  NAND _487_ (
    .A(set_select),
    .B(data_in[97]),
    .Y(_196_)
  );
  NAND _488_ (
    .A(_129_),
    .B(local_data_out[161]),
    .Y(_197_)
  );
  NAND _489_ (
    .A(_196_),
    .B(_197_),
    .Y(_091_)
  );
  NAND _490_ (
    .A(set_select),
    .B(data_in[98]),
    .Y(_198_)
  );
  NAND _491_ (
    .A(_129_),
    .B(local_data_out[162]),
    .Y(_199_)
  );
  NAND _492_ (
    .A(_198_),
    .B(_199_),
    .Y(_092_)
  );
  NAND _493_ (
    .A(set_select),
    .B(data_in[99]),
    .Y(_200_)
  );
  NAND _494_ (
    .A(_129_),
    .B(local_data_out[163]),
    .Y(_201_)
  );
  NAND _495_ (
    .A(_200_),
    .B(_201_),
    .Y(_093_)
  );
  NAND _496_ (
    .A(set_select),
    .B(data_in[100]),
    .Y(_202_)
  );
  NAND _497_ (
    .A(_129_),
    .B(local_data_out[164]),
    .Y(_203_)
  );
  NAND _498_ (
    .A(_202_),
    .B(_203_),
    .Y(_094_)
  );
  NAND _499_ (
    .A(set_select),
    .B(data_in[101]),
    .Y(_204_)
  );
  NAND _500_ (
    .A(_129_),
    .B(local_data_out[165]),
    .Y(_205_)
  );
  NAND _501_ (
    .A(_204_),
    .B(_205_),
    .Y(_095_)
  );
  NAND _502_ (
    .A(set_select),
    .B(data_in[102]),
    .Y(_206_)
  );
  NAND _503_ (
    .A(_129_),
    .B(local_data_out[166]),
    .Y(_207_)
  );
  NAND _504_ (
    .A(_206_),
    .B(_207_),
    .Y(_096_)
  );
  NAND _505_ (
    .A(set_select),
    .B(data_in[103]),
    .Y(_208_)
  );
  NAND _506_ (
    .A(_129_),
    .B(local_data_out[167]),
    .Y(_209_)
  );
  NAND _507_ (
    .A(_208_),
    .B(_209_),
    .Y(_097_)
  );
  NAND _508_ (
    .A(set_select),
    .B(data_in[104]),
    .Y(_210_)
  );
  NAND _509_ (
    .A(_129_),
    .B(local_data_out[168]),
    .Y(_211_)
  );
  NAND _510_ (
    .A(_210_),
    .B(_211_),
    .Y(_099_)
  );
  NAND _511_ (
    .A(set_select),
    .B(data_in[105]),
    .Y(_212_)
  );
  NAND _512_ (
    .A(_129_),
    .B(local_data_out[169]),
    .Y(_213_)
  );
  NAND _513_ (
    .A(_212_),
    .B(_213_),
    .Y(_100_)
  );
  NAND _514_ (
    .A(set_select),
    .B(data_in[106]),
    .Y(_214_)
  );
  NAND _515_ (
    .A(_129_),
    .B(local_data_out[170]),
    .Y(_215_)
  );
  NAND _516_ (
    .A(_214_),
    .B(_215_),
    .Y(_101_)
  );
  NAND _517_ (
    .A(set_select),
    .B(data_in[107]),
    .Y(_216_)
  );
  NAND _518_ (
    .A(_129_),
    .B(local_data_out[171]),
    .Y(_217_)
  );
  NAND _519_ (
    .A(_216_),
    .B(_217_),
    .Y(_102_)
  );
  NAND _520_ (
    .A(set_select),
    .B(data_in[108]),
    .Y(_218_)
  );
  NAND _521_ (
    .A(_129_),
    .B(local_data_out[172]),
    .Y(_219_)
  );
  NAND _522_ (
    .A(_218_),
    .B(_219_),
    .Y(_103_)
  );
  NAND _523_ (
    .A(set_select),
    .B(data_in[109]),
    .Y(_220_)
  );
  NAND _524_ (
    .A(_129_),
    .B(local_data_out[173]),
    .Y(_221_)
  );
  NAND _525_ (
    .A(_220_),
    .B(_221_),
    .Y(_104_)
  );
  NAND _526_ (
    .A(set_select),
    .B(data_in[110]),
    .Y(_222_)
  );
  NAND _527_ (
    .A(_129_),
    .B(local_data_out[174]),
    .Y(_223_)
  );
  NAND _528_ (
    .A(_222_),
    .B(_223_),
    .Y(_105_)
  );
  NAND _529_ (
    .A(set_select),
    .B(data_in[111]),
    .Y(_224_)
  );
  NAND _530_ (
    .A(_129_),
    .B(local_data_out[175]),
    .Y(_225_)
  );
  NAND _531_ (
    .A(_224_),
    .B(_225_),
    .Y(_106_)
  );
  NAND _532_ (
    .A(set_select),
    .B(data_in[112]),
    .Y(_226_)
  );
  NAND _533_ (
    .A(_129_),
    .B(local_data_out[176]),
    .Y(_227_)
  );
  NAND _534_ (
    .A(_226_),
    .B(_227_),
    .Y(_107_)
  );
  NAND _535_ (
    .A(set_select),
    .B(data_in[113]),
    .Y(_228_)
  );
  NAND _536_ (
    .A(_129_),
    .B(local_data_out[177]),
    .Y(_229_)
  );
  NAND _537_ (
    .A(_228_),
    .B(_229_),
    .Y(_108_)
  );
  NAND _538_ (
    .A(set_select),
    .B(data_in[114]),
    .Y(_230_)
  );
  NAND _539_ (
    .A(_129_),
    .B(local_data_out[178]),
    .Y(_231_)
  );
  NAND _540_ (
    .A(_230_),
    .B(_231_),
    .Y(_110_)
  );
  NAND _541_ (
    .A(set_select),
    .B(data_in[115]),
    .Y(_232_)
  );
  NAND _542_ (
    .A(_129_),
    .B(local_data_out[179]),
    .Y(_233_)
  );
  NAND _543_ (
    .A(_232_),
    .B(_233_),
    .Y(_111_)
  );
  NAND _544_ (
    .A(set_select),
    .B(data_in[116]),
    .Y(_234_)
  );
  NAND _545_ (
    .A(_129_),
    .B(local_data_out[180]),
    .Y(_235_)
  );
  NAND _546_ (
    .A(_234_),
    .B(_235_),
    .Y(_112_)
  );
  NAND _547_ (
    .A(set_select),
    .B(data_in[117]),
    .Y(_236_)
  );
  NAND _548_ (
    .A(_129_),
    .B(local_data_out[181]),
    .Y(_237_)
  );
  NAND _549_ (
    .A(_236_),
    .B(_237_),
    .Y(_113_)
  );
  NAND _550_ (
    .A(set_select),
    .B(data_in[118]),
    .Y(_238_)
  );
  NAND _551_ (
    .A(_129_),
    .B(local_data_out[182]),
    .Y(_239_)
  );
  NAND _552_ (
    .A(_238_),
    .B(_239_),
    .Y(_114_)
  );
  NAND _553_ (
    .A(set_select),
    .B(data_in[119]),
    .Y(_240_)
  );
  NAND _554_ (
    .A(_129_),
    .B(local_data_out[183]),
    .Y(_241_)
  );
  NAND _555_ (
    .A(_240_),
    .B(_241_),
    .Y(_115_)
  );
  NAND _556_ (
    .A(set_select),
    .B(data_in[120]),
    .Y(_242_)
  );
  NAND _557_ (
    .A(_129_),
    .B(local_data_out[184]),
    .Y(_243_)
  );
  NAND _558_ (
    .A(_242_),
    .B(_243_),
    .Y(_116_)
  );
  NAND _559_ (
    .A(set_select),
    .B(data_in[121]),
    .Y(_244_)
  );
  NAND _560_ (
    .A(_129_),
    .B(local_data_out[185]),
    .Y(_245_)
  );
  NAND _561_ (
    .A(_244_),
    .B(_245_),
    .Y(_117_)
  );
  NAND _562_ (
    .A(set_select),
    .B(data_in[122]),
    .Y(_246_)
  );
  NAND _563_ (
    .A(_129_),
    .B(local_data_out[186]),
    .Y(_247_)
  );
  NAND _564_ (
    .A(_246_),
    .B(_247_),
    .Y(_118_)
  );
  NAND _565_ (
    .A(set_select),
    .B(data_in[123]),
    .Y(_248_)
  );
  NAND _566_ (
    .A(_129_),
    .B(local_data_out[187]),
    .Y(_249_)
  );
  NAND _567_ (
    .A(_248_),
    .B(_249_),
    .Y(_119_)
  );
  NAND _568_ (
    .A(set_select),
    .B(data_in[124]),
    .Y(_250_)
  );
  NAND _569_ (
    .A(_129_),
    .B(local_data_out[188]),
    .Y(_251_)
  );
  NAND _570_ (
    .A(_250_),
    .B(_251_),
    .Y(_121_)
  );
  NAND _571_ (
    .A(set_select),
    .B(data_in[125]),
    .Y(_252_)
  );
  NAND _572_ (
    .A(_129_),
    .B(local_data_out[189]),
    .Y(_253_)
  );
  NAND _573_ (
    .A(_252_),
    .B(_253_),
    .Y(_122_)
  );
  NAND _574_ (
    .A(set_select),
    .B(data_in[126]),
    .Y(_254_)
  );
  NAND _575_ (
    .A(_129_),
    .B(local_data_out[190]),
    .Y(_255_)
  );
  NAND _576_ (
    .A(_254_),
    .B(_255_),
    .Y(_123_)
  );
  NAND _577_ (
    .A(set_select),
    .B(data_in[127]),
    .Y(_256_)
  );
  NAND _578_ (
    .A(_129_),
    .B(local_data_out[191]),
    .Y(_257_)
  );
  NAND _579_ (
    .A(_256_),
    .B(_257_),
    .Y(_124_)
  );
  NAND _580_ (
    .A(set_select),
    .B(data_in[0]),
    .Y(_258_)
  );
  NAND _581_ (
    .A(_129_),
    .B(local_data_out[64]),
    .Y(_259_)
  );
  NAND _582_ (
    .A(_258_),
    .B(_259_),
    .Y(_001_)
  );
  NAND _583_ (
    .A(set_select),
    .B(data_in[1]),
    .Y(_260_)
  );
  NAND _584_ (
    .A(_129_),
    .B(local_data_out[65]),
    .Y(_261_)
  );
  NAND _585_ (
    .A(_260_),
    .B(_261_),
    .Y(_012_)
  );
  NAND _586_ (
    .A(set_select),
    .B(data_in[2]),
    .Y(_262_)
  );
  NAND _587_ (
    .A(_129_),
    .B(local_data_out[66]),
    .Y(_263_)
  );
  NAND _588_ (
    .A(_262_),
    .B(_263_),
    .Y(_023_)
  );
  NAND _589_ (
    .A(set_select),
    .B(data_in[3]),
    .Y(_264_)
  );
  NAND _590_ (
    .A(_129_),
    .B(local_data_out[67]),
    .Y(_265_)
  );
  NAND _591_ (
    .A(_264_),
    .B(_265_),
    .Y(_034_)
  );
  NAND _592_ (
    .A(set_select),
    .B(data_in[4]),
    .Y(_266_)
  );
  NAND _593_ (
    .A(_129_),
    .B(local_data_out[68]),
    .Y(_267_)
  );
  NAND _594_ (
    .A(_266_),
    .B(_267_),
    .Y(_045_)
  );
  NAND _595_ (
    .A(set_select),
    .B(data_in[5]),
    .Y(_268_)
  );
  NAND _596_ (
    .A(_129_),
    .B(local_data_out[69]),
    .Y(_269_)
  );
  NAND _597_ (
    .A(_268_),
    .B(_269_),
    .Y(_056_)
  );
  NAND _598_ (
    .A(set_select),
    .B(data_in[6]),
    .Y(_270_)
  );
  NAND _599_ (
    .A(_129_),
    .B(local_data_out[70]),
    .Y(_271_)
  );
  NAND _600_ (
    .A(_270_),
    .B(_271_),
    .Y(_061_)
  );
  NAND _601_ (
    .A(set_select),
    .B(data_in[7]),
    .Y(_272_)
  );
  NAND _602_ (
    .A(_129_),
    .B(local_data_out[71]),
    .Y(_273_)
  );
  NAND _603_ (
    .A(_272_),
    .B(_273_),
    .Y(_062_)
  );
  NAND _604_ (
    .A(set_select),
    .B(data_in[8]),
    .Y(_274_)
  );
  NAND _605_ (
    .A(_129_),
    .B(local_data_out[72]),
    .Y(_275_)
  );
  NAND _606_ (
    .A(_274_),
    .B(_275_),
    .Y(_063_)
  );
  NAND _607_ (
    .A(set_select),
    .B(data_in[9]),
    .Y(_276_)
  );
  NAND _608_ (
    .A(_129_),
    .B(local_data_out[73]),
    .Y(_277_)
  );
  NAND _609_ (
    .A(_276_),
    .B(_277_),
    .Y(_064_)
  );
  NAND _610_ (
    .A(set_select),
    .B(data_in[10]),
    .Y(_278_)
  );
  NAND _611_ (
    .A(_129_),
    .B(local_data_out[74]),
    .Y(_279_)
  );
  NAND _612_ (
    .A(_278_),
    .B(_279_),
    .Y(_002_)
  );
  NAND _613_ (
    .A(set_select),
    .B(data_in[11]),
    .Y(_280_)
  );
  NAND _614_ (
    .A(_129_),
    .B(local_data_out[75]),
    .Y(_281_)
  );
  NAND _615_ (
    .A(_280_),
    .B(_281_),
    .Y(_003_)
  );
  NAND _616_ (
    .A(set_select),
    .B(data_in[12]),
    .Y(_282_)
  );
  NAND _617_ (
    .A(_129_),
    .B(local_data_out[76]),
    .Y(_283_)
  );
  NAND _618_ (
    .A(_282_),
    .B(_283_),
    .Y(_004_)
  );
  NAND _619_ (
    .A(set_select),
    .B(data_in[13]),
    .Y(_284_)
  );
  NAND _620_ (
    .A(_129_),
    .B(local_data_out[77]),
    .Y(_285_)
  );
  NAND _621_ (
    .A(_284_),
    .B(_285_),
    .Y(_005_)
  );
  NAND _622_ (
    .A(set_select),
    .B(data_in[14]),
    .Y(_286_)
  );
  NAND _623_ (
    .A(_129_),
    .B(local_data_out[78]),
    .Y(_287_)
  );
  NAND _624_ (
    .A(_286_),
    .B(_287_),
    .Y(_006_)
  );
  NAND _625_ (
    .A(set_select),
    .B(data_in[15]),
    .Y(_288_)
  );
  NAND _626_ (
    .A(_129_),
    .B(local_data_out[79]),
    .Y(_289_)
  );
  NAND _627_ (
    .A(_288_),
    .B(_289_),
    .Y(_007_)
  );
  NAND _628_ (
    .A(set_select),
    .B(data_in[16]),
    .Y(_290_)
  );
  NAND _629_ (
    .A(_129_),
    .B(local_data_out[80]),
    .Y(_291_)
  );
  NAND _630_ (
    .A(_290_),
    .B(_291_),
    .Y(_008_)
  );
  NAND _631_ (
    .A(set_select),
    .B(data_in[17]),
    .Y(_292_)
  );
  NAND _632_ (
    .A(_129_),
    .B(local_data_out[81]),
    .Y(_293_)
  );
  NAND _633_ (
    .A(_292_),
    .B(_293_),
    .Y(_009_)
  );
  NAND _634_ (
    .A(set_select),
    .B(data_in[18]),
    .Y(_294_)
  );
  NAND _635_ (
    .A(_129_),
    .B(local_data_out[82]),
    .Y(_295_)
  );
  NAND _636_ (
    .A(_294_),
    .B(_295_),
    .Y(_010_)
  );
  NAND _637_ (
    .A(set_select),
    .B(data_in[19]),
    .Y(_296_)
  );
  NAND _638_ (
    .A(_129_),
    .B(local_data_out[83]),
    .Y(_297_)
  );
  NAND _639_ (
    .A(_296_),
    .B(_297_),
    .Y(_011_)
  );
  NAND _640_ (
    .A(set_select),
    .B(data_in[20]),
    .Y(_298_)
  );
  NAND _641_ (
    .A(_129_),
    .B(local_data_out[84]),
    .Y(_299_)
  );
  NAND _642_ (
    .A(_298_),
    .B(_299_),
    .Y(_013_)
  );
  NAND _643_ (
    .A(set_select),
    .B(data_in[21]),
    .Y(_300_)
  );
  NAND _644_ (
    .A(_129_),
    .B(local_data_out[85]),
    .Y(_301_)
  );
  NAND _645_ (
    .A(_300_),
    .B(_301_),
    .Y(_014_)
  );
  NAND _646_ (
    .A(set_select),
    .B(data_in[22]),
    .Y(_302_)
  );
  NAND _647_ (
    .A(_129_),
    .B(local_data_out[86]),
    .Y(_303_)
  );
  NAND _648_ (
    .A(_302_),
    .B(_303_),
    .Y(_015_)
  );
  NAND _649_ (
    .A(set_select),
    .B(data_in[23]),
    .Y(_304_)
  );
  NAND _650_ (
    .A(_129_),
    .B(local_data_out[87]),
    .Y(_305_)
  );
  NAND _651_ (
    .A(_304_),
    .B(_305_),
    .Y(_016_)
  );
  NAND _652_ (
    .A(set_select),
    .B(data_in[24]),
    .Y(_306_)
  );
  NAND _653_ (
    .A(_129_),
    .B(local_data_out[88]),
    .Y(_307_)
  );
  NAND _654_ (
    .A(_306_),
    .B(_307_),
    .Y(_017_)
  );
  NAND _655_ (
    .A(set_select),
    .B(data_in[25]),
    .Y(_308_)
  );
  NAND _656_ (
    .A(_129_),
    .B(local_data_out[89]),
    .Y(_309_)
  );
  NAND _657_ (
    .A(_308_),
    .B(_309_),
    .Y(_018_)
  );
  NAND _658_ (
    .A(set_select),
    .B(data_in[26]),
    .Y(_310_)
  );
  NAND _659_ (
    .A(_129_),
    .B(local_data_out[90]),
    .Y(_311_)
  );
  NAND _660_ (
    .A(_310_),
    .B(_311_),
    .Y(_019_)
  );
  NAND _661_ (
    .A(set_select),
    .B(data_in[27]),
    .Y(_312_)
  );
  NAND _662_ (
    .A(_129_),
    .B(local_data_out[91]),
    .Y(_313_)
  );
  NAND _663_ (
    .A(_312_),
    .B(_313_),
    .Y(_020_)
  );
  NAND _664_ (
    .A(set_select),
    .B(data_in[28]),
    .Y(_314_)
  );
  NAND _665_ (
    .A(_129_),
    .B(local_data_out[92]),
    .Y(_315_)
  );
  NAND _666_ (
    .A(_314_),
    .B(_315_),
    .Y(_021_)
  );
  NAND _667_ (
    .A(set_select),
    .B(data_in[29]),
    .Y(_316_)
  );
  NAND _668_ (
    .A(_129_),
    .B(local_data_out[93]),
    .Y(_317_)
  );
  NAND _669_ (
    .A(_316_),
    .B(_317_),
    .Y(_022_)
  );
  NAND _670_ (
    .A(set_select),
    .B(data_in[30]),
    .Y(_318_)
  );
  NAND _671_ (
    .A(_129_),
    .B(local_data_out[94]),
    .Y(_319_)
  );
  NAND _672_ (
    .A(_318_),
    .B(_319_),
    .Y(_024_)
  );
  NAND _673_ (
    .A(set_select),
    .B(data_in[31]),
    .Y(_320_)
  );
  NAND _674_ (
    .A(_129_),
    .B(local_data_out[95]),
    .Y(_321_)
  );
  NAND _675_ (
    .A(_320_),
    .B(_321_),
    .Y(_025_)
  );
  NAND _676_ (
    .A(set_select),
    .B(data_in[32]),
    .Y(_322_)
  );
  NAND _677_ (
    .A(_129_),
    .B(local_data_out[96]),
    .Y(_323_)
  );
  NAND _678_ (
    .A(_322_),
    .B(_323_),
    .Y(_026_)
  );
  NAND _679_ (
    .A(set_select),
    .B(data_in[33]),
    .Y(_324_)
  );
  NAND _680_ (
    .A(_129_),
    .B(local_data_out[97]),
    .Y(_325_)
  );
  NAND _681_ (
    .A(_324_),
    .B(_325_),
    .Y(_027_)
  );
  NAND _682_ (
    .A(set_select),
    .B(data_in[34]),
    .Y(_326_)
  );
  NAND _683_ (
    .A(_129_),
    .B(local_data_out[98]),
    .Y(_327_)
  );
  NAND _684_ (
    .A(_326_),
    .B(_327_),
    .Y(_028_)
  );
  NAND _685_ (
    .A(set_select),
    .B(data_in[35]),
    .Y(_328_)
  );
  NAND _686_ (
    .A(_129_),
    .B(local_data_out[99]),
    .Y(_329_)
  );
  NAND _687_ (
    .A(_328_),
    .B(_329_),
    .Y(_029_)
  );
  NAND _688_ (
    .A(set_select),
    .B(data_in[36]),
    .Y(_330_)
  );
  NAND _689_ (
    .A(_129_),
    .B(local_data_out[100]),
    .Y(_331_)
  );
  NAND _690_ (
    .A(_330_),
    .B(_331_),
    .Y(_030_)
  );
  NAND _691_ (
    .A(set_select),
    .B(data_in[37]),
    .Y(_332_)
  );
  NAND _692_ (
    .A(_129_),
    .B(local_data_out[101]),
    .Y(_333_)
  );
  NAND _693_ (
    .A(_332_),
    .B(_333_),
    .Y(_031_)
  );
  NAND _694_ (
    .A(set_select),
    .B(data_in[38]),
    .Y(_334_)
  );
  NAND _695_ (
    .A(_129_),
    .B(local_data_out[102]),
    .Y(_335_)
  );
  NAND _696_ (
    .A(_334_),
    .B(_335_),
    .Y(_032_)
  );
  NAND _697_ (
    .A(set_select),
    .B(data_in[39]),
    .Y(_336_)
  );
  NAND _698_ (
    .A(_129_),
    .B(local_data_out[103]),
    .Y(_337_)
  );
  NAND _699_ (
    .A(_336_),
    .B(_337_),
    .Y(_033_)
  );
  NAND _700_ (
    .A(set_select),
    .B(data_in[40]),
    .Y(_338_)
  );
  NAND _701_ (
    .A(_129_),
    .B(local_data_out[104]),
    .Y(_339_)
  );
  NAND _702_ (
    .A(_338_),
    .B(_339_),
    .Y(_035_)
  );
  NAND _703_ (
    .A(set_select),
    .B(data_in[41]),
    .Y(_340_)
  );
  NAND _704_ (
    .A(_129_),
    .B(local_data_out[105]),
    .Y(_341_)
  );
  NAND _705_ (
    .A(_340_),
    .B(_341_),
    .Y(_036_)
  );
  NAND _706_ (
    .A(set_select),
    .B(data_in[42]),
    .Y(_342_)
  );
  NAND _707_ (
    .A(_129_),
    .B(local_data_out[106]),
    .Y(_343_)
  );
  NAND _708_ (
    .A(_342_),
    .B(_343_),
    .Y(_037_)
  );
  NAND _709_ (
    .A(set_select),
    .B(data_in[43]),
    .Y(_344_)
  );
  NAND _710_ (
    .A(_129_),
    .B(local_data_out[107]),
    .Y(_345_)
  );
  NAND _711_ (
    .A(_344_),
    .B(_345_),
    .Y(_038_)
  );
  NAND _712_ (
    .A(set_select),
    .B(data_in[44]),
    .Y(_346_)
  );
  NAND _713_ (
    .A(_129_),
    .B(local_data_out[108]),
    .Y(_347_)
  );
  NAND _714_ (
    .A(_346_),
    .B(_347_),
    .Y(_039_)
  );
  NAND _715_ (
    .A(set_select),
    .B(data_in[45]),
    .Y(_348_)
  );
  NAND _716_ (
    .A(_129_),
    .B(local_data_out[109]),
    .Y(_349_)
  );
  NAND _717_ (
    .A(_348_),
    .B(_349_),
    .Y(_040_)
  );
  NAND _718_ (
    .A(set_select),
    .B(data_in[46]),
    .Y(_350_)
  );
  NAND _719_ (
    .A(_129_),
    .B(local_data_out[110]),
    .Y(_351_)
  );
  NAND _720_ (
    .A(_350_),
    .B(_351_),
    .Y(_041_)
  );
  NAND _721_ (
    .A(set_select),
    .B(data_in[47]),
    .Y(_352_)
  );
  NAND _722_ (
    .A(_129_),
    .B(local_data_out[111]),
    .Y(_353_)
  );
  NAND _723_ (
    .A(_352_),
    .B(_353_),
    .Y(_042_)
  );
  NAND _724_ (
    .A(set_select),
    .B(data_in[48]),
    .Y(_354_)
  );
  NAND _725_ (
    .A(_129_),
    .B(local_data_out[112]),
    .Y(_355_)
  );
  NAND _726_ (
    .A(_354_),
    .B(_355_),
    .Y(_043_)
  );
  NAND _727_ (
    .A(set_select),
    .B(data_in[49]),
    .Y(_356_)
  );
  NAND _728_ (
    .A(_129_),
    .B(local_data_out[113]),
    .Y(_357_)
  );
  NAND _729_ (
    .A(_356_),
    .B(_357_),
    .Y(_044_)
  );
  NAND _730_ (
    .A(set_select),
    .B(data_in[50]),
    .Y(_358_)
  );
  NAND _731_ (
    .A(_129_),
    .B(local_data_out[114]),
    .Y(_359_)
  );
  NAND _732_ (
    .A(_358_),
    .B(_359_),
    .Y(_046_)
  );
  NAND _733_ (
    .A(set_select),
    .B(data_in[51]),
    .Y(_360_)
  );
  NAND _734_ (
    .A(_129_),
    .B(local_data_out[115]),
    .Y(_361_)
  );
  NAND _735_ (
    .A(_360_),
    .B(_361_),
    .Y(_047_)
  );
  NAND _736_ (
    .A(set_select),
    .B(data_in[52]),
    .Y(_362_)
  );
  NAND _737_ (
    .A(_129_),
    .B(local_data_out[116]),
    .Y(_363_)
  );
  NAND _738_ (
    .A(_362_),
    .B(_363_),
    .Y(_048_)
  );
  NAND _739_ (
    .A(set_select),
    .B(data_in[53]),
    .Y(_364_)
  );
  NAND _740_ (
    .A(_129_),
    .B(local_data_out[117]),
    .Y(_365_)
  );
  NAND _741_ (
    .A(_364_),
    .B(_365_),
    .Y(_049_)
  );
  NAND _742_ (
    .A(set_select),
    .B(data_in[54]),
    .Y(_366_)
  );
  NAND _743_ (
    .A(_129_),
    .B(local_data_out[118]),
    .Y(_367_)
  );
  NAND _744_ (
    .A(_366_),
    .B(_367_),
    .Y(_050_)
  );
  NAND _745_ (
    .A(set_select),
    .B(data_in[55]),
    .Y(_368_)
  );
  NAND _746_ (
    .A(_129_),
    .B(local_data_out[119]),
    .Y(_369_)
  );
  NAND _747_ (
    .A(_368_),
    .B(_369_),
    .Y(_051_)
  );
  NAND _748_ (
    .A(set_select),
    .B(data_in[56]),
    .Y(_370_)
  );
  NAND _749_ (
    .A(_129_),
    .B(local_data_out[120]),
    .Y(_371_)
  );
  NAND _750_ (
    .A(_370_),
    .B(_371_),
    .Y(_052_)
  );
  NAND _751_ (
    .A(set_select),
    .B(data_in[57]),
    .Y(_372_)
  );
  NAND _752_ (
    .A(_129_),
    .B(local_data_out[121]),
    .Y(_373_)
  );
  NAND _753_ (
    .A(_372_),
    .B(_373_),
    .Y(_053_)
  );
  NAND _754_ (
    .A(set_select),
    .B(data_in[58]),
    .Y(_374_)
  );
  NAND _755_ (
    .A(_129_),
    .B(local_data_out[122]),
    .Y(_375_)
  );
  NAND _756_ (
    .A(_374_),
    .B(_375_),
    .Y(_054_)
  );
  NAND _757_ (
    .A(set_select),
    .B(data_in[59]),
    .Y(_376_)
  );
  NAND _758_ (
    .A(_129_),
    .B(local_data_out[123]),
    .Y(_377_)
  );
  NAND _759_ (
    .A(_376_),
    .B(_377_),
    .Y(_055_)
  );
  NAND _760_ (
    .A(set_select),
    .B(data_in[60]),
    .Y(_378_)
  );
  NAND _761_ (
    .A(_129_),
    .B(local_data_out[124]),
    .Y(_379_)
  );
  NAND _762_ (
    .A(_378_),
    .B(_379_),
    .Y(_057_)
  );
  NAND _763_ (
    .A(set_select),
    .B(data_in[61]),
    .Y(_380_)
  );
  NAND _764_ (
    .A(_129_),
    .B(local_data_out[125]),
    .Y(_381_)
  );
  NAND _765_ (
    .A(_380_),
    .B(_381_),
    .Y(_058_)
  );
  NAND _766_ (
    .A(set_select),
    .B(data_in[62]),
    .Y(_382_)
  );
  NAND _767_ (
    .A(_129_),
    .B(local_data_out[126]),
    .Y(_383_)
  );
  NAND _768_ (
    .A(_382_),
    .B(_383_),
    .Y(_059_)
  );
  NAND _769_ (
    .A(set_select),
    .B(data_in[63]),
    .Y(_384_)
  );
  NAND _770_ (
    .A(_129_),
    .B(local_data_out[127]),
    .Y(_385_)
  );
  NAND _771_ (
    .A(_384_),
    .B(_385_),
    .Y(_060_)
  );
  NOR _772_ (
    .A(shift),
    .B(set),
    .Y(_386_)
  );
  NOT _773_ (
    .A(_386_),
    .Y(_000_)
  );
  (* src = "output/sensorTop.v:394.28-399.5" *)
  \$paramod\Register\bits=s32'00000000000000000000000001000000  \genblk1[0].Register  (
    .data_in({ _060_, _059_, _058_, _057_, _055_, _054_, _053_, _052_, _051_, _050_, _049_, _048_, _047_, _046_, _044_, _043_, _042_, _041_, _040_, _039_, _038_, _037_, _036_, _035_, _033_, _032_, _031_, _030_, _029_, _028_, _027_, _026_, _025_, _024_, _022_, _021_, _020_, _019_, _018_, _017_, _016_, _015_, _014_, _013_, _011_, _010_, _009_, _008_, _007_, _006_, _005_, _004_, _003_, _002_, _064_, _063_, _062_, _061_, _056_, _045_, _034_, _023_, _012_, _001_ }),
    .data_out(data_out),
    .reset(reset),
    .set(_000_)
  );
  (* src = "output/sensorTop.v:394.28-399.5" *)
  \$paramod\Register\bits=s32'00000000000000000000000001000000  \genblk1[1].Register  (
    .data_in({ _124_, _123_, _122_, _121_, _119_, _118_, _117_, _116_, _115_, _114_, _113_, _112_, _111_, _110_, _108_, _107_, _106_, _105_, _104_, _103_, _102_, _101_, _100_, _099_, _097_, _096_, _095_, _094_, _093_, _092_, _091_, _090_, _089_, _088_, _086_, _085_, _084_, _083_, _082_, _081_, _080_, _079_, _078_, _077_, _075_, _074_, _073_, _072_, _071_, _070_, _069_, _068_, _067_, _066_, _128_, _127_, _126_, _125_, _120_, _109_, _098_, _087_, _076_, _065_ }),
    .data_out(local_data_out[127:64]),
    .reset(reset),
    .set(_000_)
  );
  (* src = "output/sensorTop.v:394.28-399.5" *)
  \$paramod\Register\bits=s32'00000000000000000000000001000000  \genblk1[2].Register  (
    .data_in(data_in[191:128]),
    .data_out(local_data_out[191:128]),
    .reset(reset),
    .set(_000_)
  );
  assign local_data_out[63:0] = data_out;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4ebe76dcda7653dc25888a241dea19cea78f575a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4ebe76dcda7653dc25888a241dea19cea78f575a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4ebe76dcda7653dc25888a241dea19cea78f575a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbd;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4eca0d5ca04c17f5bb495d2c40ccd5b7ad624703\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4eca0d5ca04c17f5bb495d2c40ccd5b7ad624703\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4eca0d5ca04c17f5bb495d2c40ccd5b7ad624703\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hac;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4f00f84b334c42001c496266408306b4fcdaa3c2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4f00f84b334c42001c496266408306b4fcdaa3c2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4f00f84b334c42001c496266408306b4fcdaa3c2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4f1c5e1aefe70a40c5fb0bff3e70689e3c591577\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4f1c5e1aefe70a40c5fb0bff3e70689e3c591577\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4f1c5e1aefe70a40c5fb0bff3e70689e3c591577\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h98;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4f80dc607669a0c946bf464070c299b5d0e60eb4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4f80dc607669a0c946bf464070c299b5d0e60eb4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4f80dc607669a0c946bf464070c299b5d0e60eb4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h51;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4f9e30da1a117467385030ebed541d411f170329\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4f9e30da1a117467385030ebed541d411f170329\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4f9e30da1a117467385030ebed541d411f170329\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$4fe3bbe6b7aa1bbdd55674c9ae0642063d54c485\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$4fe3bbe6b7aa1bbdd55674c9ae0642063d54c485\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$4fe3bbe6b7aa1bbdd55674c9ae0642063d54c485\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$50f04b8c6638c223cdd71885d3fd71a73e8e1e11\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$50f04b8c6638c223cdd71885d3fd71a73e8e1e11\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$50f04b8c6638c223cdd71885d3fd71a73e8e1e11\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _11_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _12_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _13_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcf;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$512a01de5c19a54c389c116c5f71abfe0699e2f8\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$512a01de5c19a54c389c116c5f71abfe0699e2f8\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$512a01de5c19a54c389c116c5f71abfe0699e2f8\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[5]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOR _18_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _19_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_05_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h19;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$516b8c2f130b862847e1bfc916bf07837fc15139\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$516b8c2f130b862847e1bfc916bf07837fc15139\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$516b8c2f130b862847e1bfc916bf07837fc15139\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$51b34220a329433b176be5a45f17bf52adb5b036\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$51b34220a329433b176be5a45f17bf52adb5b036\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$51b34220a329433b176be5a45f17bf52adb5b036\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5292acca2b3d402aed9fae57958b8db0f88e8309\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5292acca2b3d402aed9fae57958b8db0f88e8309\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5292acca2b3d402aed9fae57958b8db0f88e8309\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$532c4bd215dbf1c77e88f970dd0783c868884cfa\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$532c4bd215dbf1c77e88f970dd0783c868884cfa\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$532c4bd215dbf1c77e88f970dd0783c868884cfa\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h62;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$53475543ececb669a499a23168dc608f548b8ff2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$53475543ececb669a499a23168dc608f548b8ff2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$53475543ececb669a499a23168dc608f548b8ff2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$54125cdfefc3c260f0d83474fe2ba707dd33ae0f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$54125cdfefc3c260f0d83474fe2ba707dd33ae0f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$54125cdfefc3c260f0d83474fe2ba707dd33ae0f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h8c;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$541911b511dad51a80ae92123d691435a03d2b00\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$541911b511dad51a80ae92123d691435a03d2b00\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$541911b511dad51a80ae92123d691435a03d2b00\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$54e169f8aef181206c6af7dc03b388f10ed775b9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$54e169f8aef181206c6af7dc03b388f10ed775b9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$54e169f8aef181206c6af7dc03b388f10ed775b9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'haa;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5552b7278abca136a22cd6806dec963632153e3c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5552b7278abca136a22cd6806dec963632153e3c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5552b7278abca136a22cd6806dec963632153e3c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h7f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5595649abe9bd637536bffdf23b61e6505037422\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5595649abe9bd637536bffdf23b61e6505037422\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5595649abe9bd637536bffdf23b61e6505037422\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$574c67ae9e6f7a97c07c4e0a797ef4437ea8051b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$574c67ae9e6f7a97c07c4e0a797ef4437ea8051b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$574c67ae9e6f7a97c07c4e0a797ef4437ea8051b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hca;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$57bf64d414b95aaf625f459db62a195a8ab45d67\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$57bf64d414b95aaf625f459db62a195a8ab45d67\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$57bf64d414b95aaf625f459db62a195a8ab45d67\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$57ec8426134f1ab4e49696e5887eac06e36c20d9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$57ec8426134f1ab4e49696e5887eac06e36c20d9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$57ec8426134f1ab4e49696e5887eac06e36c20d9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$580151470af21a5fd5a90f77f2e7a4aed32ef119\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$580151470af21a5fd5a90f77f2e7a4aed32ef119\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$580151470af21a5fd5a90f77f2e7a4aed32ef119\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'he3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5819e01802525a0550eeb114015576a387d42a09\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5819e01802525a0550eeb114015576a387d42a09\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5819e01802525a0550eeb114015576a387d42a09\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$58b1d7e2f9f91a9cde57044b584271bf01cb7c75\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$58b1d7e2f9f91a9cde57044b584271bf01cb7c75\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$58b1d7e2f9f91a9cde57044b584271bf01cb7c75\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _17_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h44;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$58da5b24159caa5819c9e7e0d6429f5f15f6d97e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$58da5b24159caa5819c9e7e0d6429f5f15f6d97e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$58da5b24159caa5819c9e7e0d6429f5f15f6d97e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$59decee455616f114c58249abb7dba084482e85d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$59decee455616f114c58249abb7dba084482e85d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$59decee455616f114c58249abb7dba084482e85d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h8f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5a0cdaa238cf4ca5a0af7d58b65321df757cb62a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5a0cdaa238cf4ca5a0af7d58b65321df757cb62a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5a0cdaa238cf4ca5a0af7d58b65321df757cb62a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5b52aa0cb5a4c5f30a5a1b6f5b238e56f1f51ec3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5b52aa0cb5a4c5f30a5a1b6f5b238e56f1f51ec3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5b52aa0cb5a4c5f30a5a1b6f5b238e56f1f51ec3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h99;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5b58aca1af6f8bdce6a5de2e8dbc1bee7aea5df7\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5b58aca1af6f8bdce6a5de2e8dbc1bee7aea5df7\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5b58aca1af6f8bdce6a5de2e8dbc1bee7aea5df7\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5c6d763c55b71db60595c3cb9758c29120d11a61\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5c6d763c55b71db60595c3cb9758c29120d11a61\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5c6d763c55b71db60595c3cb9758c29120d11a61\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcb;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5cde24da9f1f2f981b2473e468228c8a4fc32045\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5cde24da9f1f2f981b2473e468228c8a4fc32045\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5cde24da9f1f2f981b2473e468228c8a4fc32045\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h6d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5d1aae2d039b54a5c891ecb052d64d2ddee8df3e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5d1aae2d039b54a5c891ecb052d64d2ddee8df3e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5d1aae2d039b54a5c891ecb052d64d2ddee8df3e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5d4e41bd22c41e378b92e40cfd38f4ad90d8b5ac\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5d4e41bd22c41e378b92e40cfd38f4ad90d8b5ac\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5d4e41bd22c41e378b92e40cfd38f4ad90d8b5ac\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9a;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5d88ca457151c50e3f0d5ba97d45e2795ed06427\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5d88ca457151c50e3f0d5ba97d45e2795ed06427\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5d88ca457151c50e3f0d5ba97d45e2795ed06427\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h39;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5dc1371902b47a80e952927a340706654f556f3f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5dc1371902b47a80e952927a340706654f556f3f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5dc1371902b47a80e952927a340706654f556f3f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NOT _21_ (
    .A(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5dcf9147c18d1128926ce71dda70b841348e9bda\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5dcf9147c18d1128926ce71dda70b841348e9bda\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5dcf9147c18d1128926ce71dda70b841348e9bda\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5e1c92a9a6bd3ed5d4e2ba8fc1b20a590cbcd1df\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5e1c92a9a6bd3ed5d4e2ba8fc1b20a590cbcd1df\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5e1c92a9a6bd3ed5d4e2ba8fc1b20a590cbcd1df\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h3e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5ea64fdc5d946bb721402956363d5840d80bcc8f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5ea64fdc5d946bb721402956363d5840d80bcc8f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5ea64fdc5d946bb721402956363d5840d80bcc8f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5f0394247c4e57ba9305aa88354c66fcb2ffe0b9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5f0394247c4e57ba9305aa88354c66fcb2ffe0b9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5f0394247c4e57ba9305aa88354c66fcb2ffe0b9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$5f03ca86e7e8aaecb0a0c10ada5bcda080148edb\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$5f03ca86e7e8aaecb0a0c10ada5bcda080148edb\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$5f03ca86e7e8aaecb0a0c10ada5bcda080148edb\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbe;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$601ac6bb73c2b47257d45dd9a0e39e90eae092dc\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$601ac6bb73c2b47257d45dd9a0e39e90eae092dc\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$601ac6bb73c2b47257d45dd9a0e39e90eae092dc\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NOT _21_ (
    .A(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h50;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$60a8b1ce29019d832df609e2fe03079687ea5927\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$60a8b1ce29019d832df609e2fe03079687ea5927\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$60a8b1ce29019d832df609e2fe03079687ea5927\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$60eea0ef90d508652e296c935d9328146bee24e0\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$60eea0ef90d508652e296c935d9328146bee24e0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$60eea0ef90d508652e296c935d9328146bee24e0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$612ab8d3c383fef8d4a805323cc68bfc62398e18\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$612ab8d3c383fef8d4a805323cc68bfc62398e18\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$612ab8d3c383fef8d4a805323cc68bfc62398e18\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _19_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h46;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6131f8dc11b2ad060e5b268e7cdbb47b6cff8134\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6131f8dc11b2ad060e5b268e7cdbb47b6cff8134\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6131f8dc11b2ad060e5b268e7cdbb47b6cff8134\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h91;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$623268c450b40d3966680a3e657e391f2625ff40\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$623268c450b40d3966680a3e657e391f2625ff40\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$623268c450b40d3966680a3e657e391f2625ff40\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$62f5f9c72b5880a69eb65a9c8b3abcac6753b928\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$62f5f9c72b5880a69eb65a9c8b3abcac6753b928\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$62f5f9c72b5880a69eb65a9c8b3abcac6753b928\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$63ddf84fcb6ecf301820e90994088d39a5d4c6c2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$63ddf84fcb6ecf301820e90994088d39a5d4c6c2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$63ddf84fcb6ecf301820e90994088d39a5d4c6c2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h7f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$646acfeb934fd86a0180a7fb443b37419d8ba174\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$646acfeb934fd86a0180a7fb443b37419d8ba174\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$646acfeb934fd86a0180a7fb443b37419d8ba174\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h97;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6492ad3b01cb674fd5b06a5159ffcf5679215d59\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6492ad3b01cb674fd5b06a5159ffcf5679215d59\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6492ad3b01cb674fd5b06a5159ffcf5679215d59\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$65533c22f6bdf34c06938898fb36245cf3601cb9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$65533c22f6bdf34c06938898fb36245cf3601cb9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$65533c22f6bdf34c06938898fb36245cf3601cb9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$658863566b96af184339e835ac488dfe9bd95d9c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$658863566b96af184339e835ac488dfe9bd95d9c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$658863566b96af184339e835ac488dfe9bd95d9c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hca;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$65c9d05a9df9458c323097b1e9cc04af416ecf87\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$65c9d05a9df9458c323097b1e9cc04af416ecf87\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$65c9d05a9df9458c323097b1e9cc04af416ecf87\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h31;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$671aa9668f73ba6724832a787a2abe6c55f26adf\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$671aa9668f73ba6724832a787a2abe6c55f26adf\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$671aa9668f73ba6724832a787a2abe6c55f26adf\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6791cc404dc1320cfccb58aa273066c04a519c15\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6791cc404dc1320cfccb58aa273066c04a519c15\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6791cc404dc1320cfccb58aa273066c04a519c15\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$685719d1b1e3c88a2bd6debec8f0729fed95a79f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$685719d1b1e3c88a2bd6debec8f0729fed95a79f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$685719d1b1e3c88a2bd6debec8f0729fed95a79f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _19_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h8a;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$68604947a8b3ce988497df6ae586b79a2891c07b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$68604947a8b3ce988497df6ae586b79a2891c07b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$68604947a8b3ce988497df6ae586b79a2891c07b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h8c;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$68b672c38169dd34d1b75e59e71ceb240fe94ef9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$68b672c38169dd34d1b75e59e71ceb240fe94ef9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$68b672c38169dd34d1b75e59e71ceb240fe94ef9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h92;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$68c932cc45db9186d0f4d937290c8067e8103297\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$68c932cc45db9186d0f4d937290c8067e8103297\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$68c932cc45db9186d0f4d937290c8067e8103297\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hce;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$68dd97a6cbf11acfec5c2f7e86aa3de555ca3434\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$68dd97a6cbf11acfec5c2f7e86aa3de555ca3434\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$68dd97a6cbf11acfec5c2f7e86aa3de555ca3434\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'haa;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6922336d3480b11f9baa2ea28ce54de536fc1478\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6922336d3480b11f9baa2ea28ce54de536fc1478\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6922336d3480b11f9baa2ea28ce54de536fc1478\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h56;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6966e69d8bfff00542877c7674c83892ae6834c3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6966e69d8bfff00542877c7674c83892ae6834c3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6966e69d8bfff00542877c7674c83892ae6834c3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcc;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$699c7fb89a0df2a7ea7df30e56a9bc64d4d9cce2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$699c7fb89a0df2a7ea7df30e56a9bc64d4d9cce2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$699c7fb89a0df2a7ea7df30e56a9bc64d4d9cce2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$69a6a705a68ff08e5444ef236ba804d5a674af69\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$69a6a705a68ff08e5444ef236ba804d5a674af69\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$69a6a705a68ff08e5444ef236ba804d5a674af69\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$69d4c2ae37db348cb51c68da200f27606a457ed5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$69d4c2ae37db348cb51c68da200f27606a457ed5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$69d4c2ae37db348cb51c68da200f27606a457ed5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hdc;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6a0de5cd5c55fa9f1f7a8cd3fb3ab53c3dc41b34\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6a0de5cd5c55fa9f1f7a8cd3fb3ab53c3dc41b34\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6a0de5cd5c55fa9f1f7a8cd3fb3ab53c3dc41b34\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h5a;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6a2b4b07519c5fbae99e4fa83421bba477ab8151\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6a2b4b07519c5fbae99e4fa83421bba477ab8151\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6a2b4b07519c5fbae99e4fa83421bba477ab8151\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _19_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h46;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6a6ed02c7d06a1d17eaf27a66db26f6348af460a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6a6ed02c7d06a1d17eaf27a66db26f6348af460a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6a6ed02c7d06a1d17eaf27a66db26f6348af460a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hca;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6aa2e4a00e3d7826bc9050abc73c8dd134cebafe\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6aa2e4a00e3d7826bc9050abc73c8dd134cebafe\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6aa2e4a00e3d7826bc9050abc73c8dd134cebafe\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h6b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6ac15b97db53cd5b58e8e3c7f6f07fb4b326b89d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6ac15b97db53cd5b58e8e3c7f6f07fb4b326b89d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6ac15b97db53cd5b58e8e3c7f6f07fb4b326b89d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6ad86d00c5b7f1d9f221e341c414a9f68b2f5b54\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6ad86d00c5b7f1d9f221e341c414a9f68b2f5b54\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6ad86d00c5b7f1d9f221e341c414a9f68b2f5b54\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6ad9244f3b995c1568b4fd87b010ea3213ec51cd\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6ad9244f3b995c1568b4fd87b010ea3213ec51cd\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6ad9244f3b995c1568b4fd87b010ea3213ec51cd\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h62;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6af79d7d41e9584cdede1beba68487a342161f9f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6af79d7d41e9584cdede1beba68487a342161f9f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6af79d7d41e9584cdede1beba68487a342161f9f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6b654c3306cca70bce345b07a67a0bfc062f966d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6b654c3306cca70bce345b07a67a0bfc062f966d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6b654c3306cca70bce345b07a67a0bfc062f966d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6c156d1a4e7d12ac3b252dbebb34546f43520d88\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6c156d1a4e7d12ac3b252dbebb34546f43520d88\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6c156d1a4e7d12ac3b252dbebb34546f43520d88\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h8b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6c90b428a3ec911f50f99bd86abb032aee741cf9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6c90b428a3ec911f50f99bd86abb032aee741cf9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6c90b428a3ec911f50f99bd86abb032aee741cf9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h67;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6dc1e301adb67aa00b849be49144886bf5eda86c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6dc1e301adb67aa00b849be49144886bf5eda86c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6dc1e301adb67aa00b849be49144886bf5eda86c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h73;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6e6e68851c32b1690c00bc3aa8c2a3ad464c4c77\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6e6e68851c32b1690c00bc3aa8c2a3ad464c4c77\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6e6e68851c32b1690c00bc3aa8c2a3ad464c4c77\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6e8bc6debd26f4358885d12fa135f9a81913b1eb\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6e8bc6debd26f4358885d12fa135f9a81913b1eb\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6e8bc6debd26f4358885d12fa135f9a81913b1eb\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbc;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$6fb630cb74158f0725105873bc0e5ef1e362462f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$6fb630cb74158f0725105873bc0e5ef1e362462f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$6fb630cb74158f0725105873bc0e5ef1e362462f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hca;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7125f60791f9b5fde74ad960c95abc248ba256b4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7125f60791f9b5fde74ad960c95abc248ba256b4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7125f60791f9b5fde74ad960c95abc248ba256b4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _19_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h85;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$719014f96fe37b6b97dfb448ac221c42e8bfa74a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$719014f96fe37b6b97dfb448ac221c42e8bfa74a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$719014f96fe37b6b97dfb448ac221c42e8bfa74a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NOT _21_ (
    .A(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h90;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$71fa7864c083b795ad82be17c3edfd71c52728b1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$71fa7864c083b795ad82be17c3edfd71c52728b1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$71fa7864c083b795ad82be17c3edfd71c52728b1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _17_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h41;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$728ee956cb4251c471934c69edf5435f957c8b9b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$728ee956cb4251c471934c69edf5435f957c8b9b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$728ee956cb4251c471934c69edf5435f957c8b9b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcb;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$72f95a6131f4b4c2829c7f2573f97ff57629e86d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$72f95a6131f4b4c2829c7f2573f97ff57629e86d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$72f95a6131f4b4c2829c7f2573f97ff57629e86d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcb;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7376bfa2138eae64cdaba68054b9e5f01f3ce18c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7376bfa2138eae64cdaba68054b9e5f01f3ce18c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7376bfa2138eae64cdaba68054b9e5f01f3ce18c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$73d7f99b4fa4122695845d230e6727a72ccea07f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$73d7f99b4fa4122695845d230e6727a72ccea07f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$73d7f99b4fa4122695845d230e6727a72ccea07f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hba;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$747a30e361bd31162cdc71082c7f15c9d4d9cd2d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$747a30e361bd31162cdc71082c7f15c9d4d9cd2d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$747a30e361bd31162cdc71082c7f15c9d4d9cd2d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hca;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$759a0ccccf3e35b19d614f837a2f2850e5c20ffc\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$759a0ccccf3e35b19d614f837a2f2850e5c20ffc\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$759a0ccccf3e35b19d614f837a2f2850e5c20ffc\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h68;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$75c28c02f53c5c721be0ea88baeef3a97cf79d85\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$75c28c02f53c5c721be0ea88baeef3a97cf79d85\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$75c28c02f53c5c721be0ea88baeef3a97cf79d85\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$75d30da077000266456acd0c4661955951e0d1b5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$75d30da077000266456acd0c4661955951e0d1b5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$75d30da077000266456acd0c4661955951e0d1b5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$75dfbd973b4f008cd0dad00b9ce89a9cd4b9934d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$75dfbd973b4f008cd0dad00b9ce89a9cd4b9934d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$75dfbd973b4f008cd0dad00b9ce89a9cd4b9934d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9a;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$75fdfb6b4a985a701871384f9c4b9757cfd083c1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$75fdfb6b4a985a701871384f9c4b9757cfd083c1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$75fdfb6b4a985a701871384f9c4b9757cfd083c1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NOT _21_ (
    .A(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h90;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$761ab2c2277819e5d0c987b38150aa84f381e898\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$761ab2c2277819e5d0c987b38150aa84f381e898\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$761ab2c2277819e5d0c987b38150aa84f381e898\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'had;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$769b67257615219695aa42f4eb0a4f9cafa8b168\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$769b67257615219695aa42f4eb0a4f9cafa8b168\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$769b67257615219695aa42f4eb0a4f9cafa8b168\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$769ed76ab24430d36dc35b8063347a93a66b4911\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$769ed76ab24430d36dc35b8063347a93a66b4911\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$769ed76ab24430d36dc35b8063347a93a66b4911\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h30;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$76ad8aefe1f009e5a9d9a894a2d0a84e5956aa77\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$76ad8aefe1f009e5a9d9a894a2d0a84e5956aa77\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$76ad8aefe1f009e5a9d9a894a2d0a84e5956aa77\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h37;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7702132de7367888bdeb7adfc44be6b74adda134\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7702132de7367888bdeb7adfc44be6b74adda134\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7702132de7367888bdeb7adfc44be6b74adda134\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$782a20ded8d17483691aa5bd85e9ae168365e0eb\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$782a20ded8d17483691aa5bd85e9ae168365e0eb\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$782a20ded8d17483691aa5bd85e9ae168365e0eb\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7854b7742fbf4ffea5a0dd89509ab527dc60b792\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7854b7742fbf4ffea5a0dd89509ab527dc60b792\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7854b7742fbf4ffea5a0dd89509ab527dc60b792\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$786de980a520a3324b7f3d627406eb0c3d47ff29\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$786de980a520a3324b7f3d627406eb0c3d47ff29\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$786de980a520a3324b7f3d627406eb0c3d47ff29\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _11_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _12_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _13_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcf;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$787ff53171db8794ff9c350ad71a1afdc510d0f7\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$787ff53171db8794ff9c350ad71a1afdc510d0f7\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$787ff53171db8794ff9c350ad71a1afdc510d0f7\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$78e84128ee89c10ee51703c8cb100ebca7970d96\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$78e84128ee89c10ee51703c8cb100ebca7970d96\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$78e84128ee89c10ee51703c8cb100ebca7970d96\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9c;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7917e5045397a86be5e7192cd484771eafd2e2ae\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7917e5045397a86be5e7192cd484771eafd2e2ae\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7917e5045397a86be5e7192cd484771eafd2e2ae\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'he3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7a00d946c882ac5961529327fccb625c985ccb8f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7a00d946c882ac5961529327fccb625c985ccb8f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7a00d946c882ac5961529327fccb625c985ccb8f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h92;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7a13046ec0dd89aca57dd004896f8f67fbc21056\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7a13046ec0dd89aca57dd004896f8f67fbc21056\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7a13046ec0dd89aca57dd004896f8f67fbc21056\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7a4512c9b0b803d043ab23eedb61e77f36943ffe\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7a4512c9b0b803d043ab23eedb61e77f36943ffe\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7a4512c9b0b803d043ab23eedb61e77f36943ffe\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7adb51540c14b10130100ac800eac133d7b260ba\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7adb51540c14b10130100ac800eac133d7b260ba\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7adb51540c14b10130100ac800eac133d7b260ba\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7b2c05b3c4b1533edfc1d17967fb7d246affc38d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7b2c05b3c4b1533edfc1d17967fb7d246affc38d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7b2c05b3c4b1533edfc1d17967fb7d246affc38d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h77;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7ba3e790d3f34f689bcb9267414e1f00e0317891\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7ba3e790d3f34f689bcb9267414e1f00e0317891\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7ba3e790d3f34f689bcb9267414e1f00e0317891\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOT _16_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h0e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7bc79231d9c3b0f27592092ce1010ab374bb6601\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7bc79231d9c3b0f27592092ce1010ab374bb6601\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7bc79231d9c3b0f27592092ce1010ab374bb6601\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h93;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7bdc048022d384229733d29443660851647b61ba\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7bdc048022d384229733d29443660851647b61ba\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7bdc048022d384229733d29443660851647b61ba\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _19_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h89;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7cf6d74025f35bdcc590a3c21bed7ef13fa1c1c2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7cf6d74025f35bdcc590a3c21bed7ef13fa1c1c2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7cf6d74025f35bdcc590a3c21bed7ef13fa1c1c2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _11_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _13_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h3f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7d6a52382489975dd76a4a90be00a2b30556ef42\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7d6a52382489975dd76a4a90be00a2b30556ef42\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7d6a52382489975dd76a4a90be00a2b30556ef42\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7f15feb87ba1d481fb51bdd05012866e93b95b8a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7f15feb87ba1d481fb51bdd05012866e93b95b8a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7f15feb87ba1d481fb51bdd05012866e93b95b8a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7f61c8548552b05496992abf1858611b8e25c268\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7f61c8548552b05496992abf1858611b8e25c268\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7f61c8548552b05496992abf1858611b8e25c268\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7fcdbd1eb90c373f7fd0b30f8dd509101ac197d9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7fcdbd1eb90c373f7fd0b30f8dd509101ac197d9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7fcdbd1eb90c373f7fd0b30f8dd509101ac197d9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$7ff95f4a7c192bf699e2051771111b1e1db918b7\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$7ff95f4a7c192bf699e2051771111b1e1db918b7\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$7ff95f4a7c192bf699e2051771111b1e1db918b7\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$806724c50cf57211755daa3d86e8f75180ce2732\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$806724c50cf57211755daa3d86e8f75180ce2732\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$806724c50cf57211755daa3d86e8f75180ce2732\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$806ef7cc717a19ecafc9b286c8440c49829369ff\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$806ef7cc717a19ecafc9b286c8440c49829369ff\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$806ef7cc717a19ecafc9b286c8440c49829369ff\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$8166d2265140c3672407afbe5c40249f189e2db0\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$8166d2265140c3672407afbe5c40249f189e2db0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$8166d2265140c3672407afbe5c40249f189e2db0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$816d5886d5df981a8f7821c45c8de844cfa67004\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$816d5886d5df981a8f7821c45c8de844cfa67004\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$816d5886d5df981a8f7821c45c8de844cfa67004\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _17_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h42;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$826e8a5484a7d52952358425b82b864704982f54\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$826e8a5484a7d52952358425b82b864704982f54\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$826e8a5484a7d52952358425b82b864704982f54\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h74;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$82bdabc0d95990f27fe3b8f5375d935ccf8e7181\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$82bdabc0d95990f27fe3b8f5375d935ccf8e7181\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$82bdabc0d95990f27fe3b8f5375d935ccf8e7181\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$83ac1e023285c9a71a53f259e83b7bcc6c23a86d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$83ac1e023285c9a71a53f259e83b7bcc6c23a86d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$83ac1e023285c9a71a53f259e83b7bcc6c23a86d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$845266e2c6e6de5a1f0123eb44f450e8ff121ffa\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$845266e2c6e6de5a1f0123eb44f450e8ff121ffa\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$845266e2c6e6de5a1f0123eb44f450e8ff121ffa\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$8465155fea8720618a749236af53eaa272e657ff\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$8465155fea8720618a749236af53eaa272e657ff\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$8465155fea8720618a749236af53eaa272e657ff\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'had;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$84955cb5c164c604cb4fac42e9cca61297237956\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$84955cb5c164c604cb4fac42e9cca61297237956\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$84955cb5c164c604cb4fac42e9cca61297237956\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$85a8516862fd031a90dc289bc53232d574114a74\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$85a8516862fd031a90dc289bc53232d574114a74\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$85a8516862fd031a90dc289bc53232d574114a74\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbc;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$86160990a3a8a6678e48d94808db3d0495d5c0c9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$86160990a3a8a6678e48d94808db3d0495d5c0c9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$86160990a3a8a6678e48d94808db3d0495d5c0c9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbc;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$86d4e28fc644059d7e2145d362b958d51d4d617c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$86d4e28fc644059d7e2145d362b958d51d4d617c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$86d4e28fc644059d7e2145d362b958d51d4d617c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$872ac97569b52a7f532b94bab47af17880af2428\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$872ac97569b52a7f532b94bab47af17880af2428\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$872ac97569b52a7f532b94bab47af17880af2428\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _11_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NAND _12_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOR _13_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _15_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_04_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'haf;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$875a257914cb69b2f82ab43db28212ee02759b2f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$875a257914cb69b2f82ab43db28212ee02759b2f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$875a257914cb69b2f82ab43db28212ee02759b2f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'haa;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$880b0cd54d7ce17e394dd7fb05ef5eb4d7b0a03a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$880b0cd54d7ce17e394dd7fb05ef5eb4d7b0a03a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$880b0cd54d7ce17e394dd7fb05ef5eb4d7b0a03a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h59;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$894eccba0ae9a395a1685452dbc199aa368af769\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$894eccba0ae9a395a1685452dbc199aa368af769\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$894eccba0ae9a395a1685452dbc199aa368af769\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$894edf1fc91cd4ca5e43ed653f09015230b9be67\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$894edf1fc91cd4ca5e43ed653f09015230b9be67\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$894edf1fc91cd4ca5e43ed653f09015230b9be67\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$8977596e095a4b67c07a9d647f0367b47ec55936\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$8977596e095a4b67c07a9d647f0367b47ec55936\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$8977596e095a4b67c07a9d647f0367b47ec55936\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$89a288c4f59380eadefce6133ec26372fdcfab8b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$89a288c4f59380eadefce6133ec26372fdcfab8b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$89a288c4f59380eadefce6133ec26372fdcfab8b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h6e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$89a36bbc87fcc34fe961d52306fac0e2e9209f50\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$89a36bbc87fcc34fe961d52306fac0e2e9209f50\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$89a36bbc87fcc34fe961d52306fac0e2e9209f50\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _15_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_03_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h10;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$8a9ba0b52767132e9f4a0f7660ddb2a9ef52adca\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$8a9ba0b52767132e9f4a0f7660ddb2a9ef52adca\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$8a9ba0b52767132e9f4a0f7660ddb2a9ef52adca\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _11_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NAND _12_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOR _13_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOT _15_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_04_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h5f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$8aab70368ef664533eac676a7a3df4c58d0187b8\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$8aab70368ef664533eac676a7a3df4c58d0187b8\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$8aab70368ef664533eac676a7a3df4c58d0187b8\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$8ab2e34da4daa495af7ab73f48dba38384b33e2d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$8ab2e34da4daa495af7ab73f48dba38384b33e2d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$8ab2e34da4daa495af7ab73f48dba38384b33e2d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NOT _21_ (
    .A(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$8b1b2c3b3479dce4ab8cc243adf5734a985778a3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$8b1b2c3b3479dce4ab8cc243adf5734a985778a3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$8b1b2c3b3479dce4ab8cc243adf5734a985778a3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h7f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$8b6fe0a805c5ba6d7d55ad543eda5b0a3ffd8657\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$8b6fe0a805c5ba6d7d55ad543eda5b0a3ffd8657\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$8b6fe0a805c5ba6d7d55ad543eda5b0a3ffd8657\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'he5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$8ba45614c113454fbbc2570f3e9a74fc943bbdd4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$8ba45614c113454fbbc2570f3e9a74fc943bbdd4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$8ba45614c113454fbbc2570f3e9a74fc943bbdd4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$8c8dac8383658ee29535e3423dceb31fbb98d235\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$8c8dac8383658ee29535e3423dceb31fbb98d235\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$8c8dac8383658ee29535e3423dceb31fbb98d235\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$8d73bb48c2401420f60b5c2fbe41921b795f11a9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$8d73bb48c2401420f60b5c2fbe41921b795f11a9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$8d73bb48c2401420f60b5c2fbe41921b795f11a9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hab;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$8db81d61c14d4420da3bd851f7fe7cf4b2a48d7e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$8db81d61c14d4420da3bd851f7fe7cf4b2a48d7e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$8db81d61c14d4420da3bd851f7fe7cf4b2a48d7e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$8dd4e7b0a63b851cf09d40c3e6a73373c6f3369e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$8dd4e7b0a63b851cf09d40c3e6a73373c6f3369e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$8dd4e7b0a63b851cf09d40c3e6a73373c6f3369e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hac;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$903ed16f8302d2ab23463f2d88b6c3a3c3e6d30e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$903ed16f8302d2ab23463f2d88b6c3a3c3e6d30e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$903ed16f8302d2ab23463f2d88b6c3a3c3e6d30e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbe;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$90bdf0303b6b41a4bdc95d1288c76a7b83e30f80\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$90bdf0303b6b41a4bdc95d1288c76a7b83e30f80\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$90bdf0303b6b41a4bdc95d1288c76a7b83e30f80\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h3e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$90c4acb691e4224d4ca634035e74cd494e4d67af\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$90c4acb691e4224d4ca634035e74cd494e4d67af\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$90c4acb691e4224d4ca634035e74cd494e4d67af\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$915c11b0b0aa391ab76825257b4886a6eb1ebade\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$915c11b0b0aa391ab76825257b4886a6eb1ebade\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$915c11b0b0aa391ab76825257b4886a6eb1ebade\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$93791fde9f41cf1aa7b46feee3a52f5ff93d0cbd\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$93791fde9f41cf1aa7b46feee3a52f5ff93d0cbd\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$93791fde9f41cf1aa7b46feee3a52f5ff93d0cbd\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h95;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$93a12072cfe69c0c40f9a6fdb95addcd3790875f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$93a12072cfe69c0c40f9a6fdb95addcd3790875f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$93a12072cfe69c0c40f9a6fdb95addcd3790875f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$94d1449a854e9855e9dea9372cbe13c1e3564ed0\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$94d1449a854e9855e9dea9372cbe13c1e3564ed0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$94d1449a854e9855e9dea9372cbe13c1e3564ed0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$94edd4cffc766afc3687cd3f328da2563bf298a6\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$94edd4cffc766afc3687cd3f328da2563bf298a6\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$94edd4cffc766afc3687cd3f328da2563bf298a6\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbb;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$95814a6245ab1e64360f3d3c69d3594fbf32b0f9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$95814a6245ab1e64360f3d3c69d3594fbf32b0f9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$95814a6245ab1e64360f3d3c69d3594fbf32b0f9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h4e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$95b3ee2ce7a2091eb2fdbf6e37e34943e52f5ec6\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$95b3ee2ce7a2091eb2fdbf6e37e34943e52f5ec6\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$95b3ee2ce7a2091eb2fdbf6e37e34943e52f5ec6\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _19_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h8a;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$96a2cd7c029cd74103d73e2f46de90f20b6b9c62\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$96a2cd7c029cd74103d73e2f46de90f20b6b9c62\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$96a2cd7c029cd74103d73e2f46de90f20b6b9c62\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h32;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$96dab45397d2e2bee0fe71c439e0497b3e66f282\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$96dab45397d2e2bee0fe71c439e0497b3e66f282\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$96dab45397d2e2bee0fe71c439e0497b3e66f282\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h83;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9879e2169e7c78a8461e6faf2e9b5f4e6f8babeb\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9879e2169e7c78a8461e6faf2e9b5f4e6f8babeb\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9879e2169e7c78a8461e6faf2e9b5f4e6f8babeb\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$987ffe4d03086103069b38b920d5bee0ba509af6\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$987ffe4d03086103069b38b920d5bee0ba509af6\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$987ffe4d03086103069b38b920d5bee0ba509af6\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NOT _21_ (
    .A(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$98a512533e9a8b7f26d6adbfc899aa608b73f255\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$98a512533e9a8b7f26d6adbfc899aa608b73f255\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$98a512533e9a8b7f26d6adbfc899aa608b73f255\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$98c70ef13780fcfcfd3ac5fc3a75d017e0be2549\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$98c70ef13780fcfcfd3ac5fc3a75d017e0be2549\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$98c70ef13780fcfcfd3ac5fc3a75d017e0be2549\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$98ca0ba6ab19da98097e8e415fb0621f5a269418\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$98ca0ba6ab19da98097e8e415fb0621f5a269418\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$98ca0ba6ab19da98097e8e415fb0621f5a269418\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hca;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$98ce4e463bef7c8c1b3787a5869907db069b055d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$98ce4e463bef7c8c1b3787a5869907db069b055d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$98ce4e463bef7c8c1b3787a5869907db069b055d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$990557b98fb90d47b70888df04aab20d71fca6a1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$990557b98fb90d47b70888df04aab20d71fca6a1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$990557b98fb90d47b70888df04aab20d71fca6a1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$991b24601eb2cb7a06790fc12344887c6bc4b3c4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$991b24601eb2cb7a06790fc12344887c6bc4b3c4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$991b24601eb2cb7a06790fc12344887c6bc4b3c4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9976f246db3695bf1bfaf9e8308bda0ddf7625a6\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9976f246db3695bf1bfaf9e8308bda0ddf7625a6\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9976f246db3695bf1bfaf9e8308bda0ddf7625a6\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9a65e6cd71005d53c6beaf4494a9013fbf5637f5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9a65e6cd71005d53c6beaf4494a9013fbf5637f5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9a65e6cd71005d53c6beaf4494a9013fbf5637f5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9b3c2ef8bb02de3280c01c1a176e5cabe02731d0\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9b3c2ef8bb02de3280c01c1a176e5cabe02731d0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9b3c2ef8bb02de3280c01c1a176e5cabe02731d0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbb;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9c08ae960c9df41c58f2011eb6027d148d2509f0\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9c08ae960c9df41c58f2011eb6027d148d2509f0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9c08ae960c9df41c58f2011eb6027d148d2509f0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h47;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9c22d5fe56e186eacdaca86c27ce88ec1022fb96\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9c22d5fe56e186eacdaca86c27ce88ec1022fb96\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9c22d5fe56e186eacdaca86c27ce88ec1022fb96\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9c5e874b0aeab1cb0ba520193ea2c7e1deb02a0c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9c5e874b0aeab1cb0ba520193ea2c7e1deb02a0c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9c5e874b0aeab1cb0ba520193ea2c7e1deb02a0c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbd;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9cbaef721063646883312b38cb60375897ad3dfb\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9cbaef721063646883312b38cb60375897ad3dfb\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9cbaef721063646883312b38cb60375897ad3dfb\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _11_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NAND _12_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOR _13_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOT _15_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_04_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h5f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9cc04212dc298f6f48d2153aeca74f0542e3da77\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9cc04212dc298f6f48d2153aeca74f0542e3da77\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9cc04212dc298f6f48d2153aeca74f0542e3da77\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9d36b3247f0f30d337173068d81b64348d187534\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9d36b3247f0f30d337173068d81b64348d187534\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9d36b3247f0f30d337173068d81b64348d187534\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hdb;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9e3c00a59c3001ecf29019428c302ac5c56fa741\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9e3c00a59c3001ecf29019428c302ac5c56fa741\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9e3c00a59c3001ecf29019428c302ac5c56fa741\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hac;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9e43757e6f3a8f295f3e1cb35d7b2a126392168a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9e43757e6f3a8f295f3e1cb35d7b2a126392168a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9e43757e6f3a8f295f3e1cb35d7b2a126392168a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9e9c058bd4bcb0e87fc47b62e339c53bc2d75296\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9e9c058bd4bcb0e87fc47b62e339c53bc2d75296\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9e9c058bd4bcb0e87fc47b62e339c53bc2d75296\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h4e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9ea7dd303675f22f652bab8a4ae0ad90cb15d001\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9ea7dd303675f22f652bab8a4ae0ad90cb15d001\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9ea7dd303675f22f652bab8a4ae0ad90cb15d001\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hda;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9eb6a2fe2dc71aca764c3c86687594f0c63d49a4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9eb6a2fe2dc71aca764c3c86687594f0c63d49a4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9eb6a2fe2dc71aca764c3c86687594f0c63d49a4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NOT _21_ (
    .A(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9ed7a7672f0fff90ffb81a27e9dc5d1e86219a81\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9ed7a7672f0fff90ffb81a27e9dc5d1e86219a81\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9ed7a7672f0fff90ffb81a27e9dc5d1e86219a81\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h7d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9ee418f4fcd861b63d0d87545e56bedf7734e9a7\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9ee418f4fcd861b63d0d87545e56bedf7734e9a7\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9ee418f4fcd861b63d0d87545e56bedf7734e9a7\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9f728b3e7240a3805f6109e4d85387a2d9841c40\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9f728b3e7240a3805f6109e4d85387a2d9841c40\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9f728b3e7240a3805f6109e4d85387a2d9841c40\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9f93e04e53b4f1a76ddc6637bf168bc2666f71c7\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9f93e04e53b4f1a76ddc6637bf168bc2666f71c7\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9f93e04e53b4f1a76ddc6637bf168bc2666f71c7\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hab;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$9fb77f33e4ad07853da2ee3caf4b88921e7cf15c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$9fb77f33e4ad07853da2ee3caf4b88921e7cf15c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$9fb77f33e4ad07853da2ee3caf4b88921e7cf15c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a04d8fcfe9d086fa04c813b38e05cacb222ef41a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a04d8fcfe9d086fa04c813b38e05cacb222ef41a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a04d8fcfe9d086fa04c813b38e05cacb222ef41a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hac;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a0a8c696b6c3a69a94219a3a619bb19c7d3da342\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a0a8c696b6c3a69a94219a3a619bb19c7d3da342\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a0a8c696b6c3a69a94219a3a619bb19c7d3da342\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a0cfcf512e05105fd6f8e22414539e88d916dd09\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a0cfcf512e05105fd6f8e22414539e88d916dd09\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a0cfcf512e05105fd6f8e22414539e88d916dd09\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _15_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_03_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h10;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a112240b50fbf4e1608de4e77a3f5e2badb44421\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a112240b50fbf4e1608de4e77a3f5e2badb44421\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a112240b50fbf4e1608de4e77a3f5e2badb44421\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a15dfefd6f749424162403f0d7e1ce32a65965a4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a15dfefd6f749424162403f0d7e1ce32a65965a4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a15dfefd6f749424162403f0d7e1ce32a65965a4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcb;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a181a2d1b02b177af48e9f0363ee54d23db9a96e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a181a2d1b02b177af48e9f0363ee54d23db9a96e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a181a2d1b02b177af48e9f0363ee54d23db9a96e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a1be3d6063c3628b82a59541ac3b5e4b50391420\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a1be3d6063c3628b82a59541ac3b5e4b50391420\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a1be3d6063c3628b82a59541ac3b5e4b50391420\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h8d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a1f75b5e328a3fe83dc7d010c7ba2d71272962ac\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a1f75b5e328a3fe83dc7d010c7ba2d71272962ac\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a1f75b5e328a3fe83dc7d010c7ba2d71272962ac\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hca;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a3719e026ed03f7f29f66f07184ca0848dcfff40\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a3719e026ed03f7f29f66f07184ca0848dcfff40\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a3719e026ed03f7f29f66f07184ca0848dcfff40\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h4d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a3886899a86275511fe39330c63e7ddf94233187\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a3886899a86275511fe39330c63e7ddf94233187\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a3886899a86275511fe39330c63e7ddf94233187\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a5657ecc8ffaac561a5531973e69108c2e5f3246\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a5657ecc8ffaac561a5531973e69108c2e5f3246\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a5657ecc8ffaac561a5531973e69108c2e5f3246\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NOR _18_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _19_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_05_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h26;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a57b110087df268e920ecc31da055648bc7cf2fe\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a57b110087df268e920ecc31da055648bc7cf2fe\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a57b110087df268e920ecc31da055648bc7cf2fe\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _17_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h48;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a59dfbd6d626a3eaf8a3384d96da77225eff6708\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a59dfbd6d626a3eaf8a3384d96da77225eff6708\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a59dfbd6d626a3eaf8a3384d96da77225eff6708\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h57;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a636337907abb75935e64853f9dc1a791ed47be2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a636337907abb75935e64853f9dc1a791ed47be2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a636337907abb75935e64853f9dc1a791ed47be2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a666fd068f4dcfb5970f63964bc1e0e445262039\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a666fd068f4dcfb5970f63964bc1e0e445262039\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a666fd068f4dcfb5970f63964bc1e0e445262039\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcd;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a6afd538ed6497962188786d3b849ad16565ea7c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a6afd538ed6497962188786d3b849ad16565ea7c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a6afd538ed6497962188786d3b849ad16565ea7c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a6f6eab2b5d68ad593cba28e3ee170807120e60e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a6f6eab2b5d68ad593cba28e3ee170807120e60e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a6f6eab2b5d68ad593cba28e3ee170807120e60e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a81b56de96048b6a7479a5cd2f039217b571e4d5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a81b56de96048b6a7479a5cd2f039217b571e4d5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a81b56de96048b6a7479a5cd2f039217b571e4d5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a958394e60ebd1813ee730019a223f275f354cb5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a958394e60ebd1813ee730019a223f275f354cb5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a958394e60ebd1813ee730019a223f275f354cb5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h64;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$a95d3d794a6f28fc0657e50db38eb15c1c2b5c91\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$a95d3d794a6f28fc0657e50db38eb15c1c2b5c91\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$a95d3d794a6f28fc0657e50db38eb15c1c2b5c91\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbc;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$aa126e917012c8e81a58249907205dcbc18cf4d6\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$aa126e917012c8e81a58249907205dcbc18cf4d6\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$aa126e917012c8e81a58249907205dcbc18cf4d6\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$aa1b1259447d6e397fd5ec9d1756b5c45df93000\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$aa1b1259447d6e397fd5ec9d1756b5c45df93000\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$aa1b1259447d6e397fd5ec9d1756b5c45df93000\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$aab511458015338fc8ebd6f8eb9d16141c760ef8\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$aab511458015338fc8ebd6f8eb9d16141c760ef8\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$aab511458015338fc8ebd6f8eb9d16141c760ef8\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$aade62649c3faaa245e79346ff137eaf656af767\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$aade62649c3faaa245e79346ff137eaf656af767\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$aade62649c3faaa245e79346ff137eaf656af767\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ab9d0659e9083d722d5aee56384e1d24454ae7b6\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ab9d0659e9083d722d5aee56384e1d24454ae7b6\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ab9d0659e9083d722d5aee56384e1d24454ae7b6\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$abd23cb75771b062809d12d8cad8eddf81f8461d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$abd23cb75771b062809d12d8cad8eddf81f8461d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$abd23cb75771b062809d12d8cad8eddf81f8461d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hca;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$abffe09db575ec4699340db91886ce5cb035cba3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$abffe09db575ec4699340db91886ce5cb035cba3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$abffe09db575ec4699340db91886ce5cb035cba3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'haa;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$accc71bd07de4766ba0b35bda813f92ce962918d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$accc71bd07de4766ba0b35bda813f92ce962918d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$accc71bd07de4766ba0b35bda813f92ce962918d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcd;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ad26d0315e9fed44e43ef69a73f54d05bfee96c4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ad26d0315e9fed44e43ef69a73f54d05bfee96c4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ad26d0315e9fed44e43ef69a73f54d05bfee96c4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ad9089b2f411af59dc6c6309db95a6a21357d4ee\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ad9089b2f411af59dc6c6309db95a6a21357d4ee\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ad9089b2f411af59dc6c6309db95a6a21357d4ee\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h3d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$addfa1996fa92fb61bc70059ad0eb33ab5862860\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$addfa1996fa92fb61bc70059ad0eb33ab5862860\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$addfa1996fa92fb61bc70059ad0eb33ab5862860\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hae;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ae88ba31ae59c44c844c8bd3244c30c13a343f56\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ae88ba31ae59c44c844c8bd3244c30c13a343f56\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ae88ba31ae59c44c844c8bd3244c30c13a343f56\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h8c;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ae8ceb7733ad1ed253b07fd8c5f0f0db814e1218\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ae8ceb7733ad1ed253b07fd8c5f0f0db814e1218\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ae8ceb7733ad1ed253b07fd8c5f0f0db814e1218\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$af55fbf5db5c51bf4af670d9e4f1ef2770443144\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$af55fbf5db5c51bf4af670d9e4f1ef2770443144\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$af55fbf5db5c51bf4af670d9e4f1ef2770443144\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$af9def19f8d68a8e7a73d03521cf11b0e1538974\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$af9def19f8d68a8e7a73d03521cf11b0e1538974\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$af9def19f8d68a8e7a73d03521cf11b0e1538974\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbe;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$afe591ff3282780b012fd10640d2f3a11b58060b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$afe591ff3282780b012fd10640d2f3a11b58060b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$afe591ff3282780b012fd10640d2f3a11b58060b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b068226648ad4180cd3a09fa5fc49727badabf56\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b068226648ad4180cd3a09fa5fc49727badabf56\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b068226648ad4180cd3a09fa5fc49727badabf56\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h7d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b0e14ec4dea04bc16f005479c9546d4d769601db\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b0e14ec4dea04bc16f005479c9546d4d769601db\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b0e14ec4dea04bc16f005479c9546d4d769601db\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h96;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b172de0c0c075a7080c4518f1a02f349c63c9e90\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b172de0c0c075a7080c4518f1a02f349c63c9e90\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b172de0c0c075a7080c4518f1a02f349c63c9e90\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b1b10fef70ab096fefc931bda0911f0acaeb3c05\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b1b10fef70ab096fefc931bda0911f0acaeb3c05\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b1b10fef70ab096fefc931bda0911f0acaeb3c05\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b297f29b43b76639e225db04db810c9a87521077\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b297f29b43b76639e225db04db810c9a87521077\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b297f29b43b76639e225db04db810c9a87521077\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b3c8f333ffbc57681ac35ef03023fb21f978d1ad\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b3c8f333ffbc57681ac35ef03023fb21f978d1ad\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b3c8f333ffbc57681ac35ef03023fb21f978d1ad\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b3ee86fb83b1107f6c0d519a51f50d7941f158e5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b3ee86fb83b1107f6c0d519a51f50d7941f158e5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b3ee86fb83b1107f6c0d519a51f50d7941f158e5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'he8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b42ca84015f058d8880ce137bc685ffd163b0b53\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b42ca84015f058d8880ce137bc685ffd163b0b53\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b42ca84015f058d8880ce137bc685ffd163b0b53\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'he5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b4a14fb225bed939e89c09d07b11a9fda50a01dc\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b4a14fb225bed939e89c09d07b11a9fda50a01dc\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b4a14fb225bed939e89c09d07b11a9fda50a01dc\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h78;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b571b63b381646af67828e5e7b3e6e33782a29b9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b571b63b381646af67828e5e7b3e6e33782a29b9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b571b63b381646af67828e5e7b3e6e33782a29b9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b5a35b425e41af6e9c4efdfdafbbbc358060e4c4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b5a35b425e41af6e9c4efdfdafbbbc358060e4c4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b5a35b425e41af6e9c4efdfdafbbbc358060e4c4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b5fd56671d9b25de084b4c824c5b5fad2fb2f1fa\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b5fd56671d9b25de084b4c824c5b5fad2fb2f1fa\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b5fd56671d9b25de084b4c824c5b5fad2fb2f1fa\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h4f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b5fdaec732bd24647632c2e732b3a543b97353a8\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b5fdaec732bd24647632c2e732b3a543b97353a8\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b5fdaec732bd24647632c2e732b3a543b97353a8\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _17_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h44;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b615a4d0007e8336dd625193205ef7f6b979de41\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b615a4d0007e8336dd625193205ef7f6b979de41\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b615a4d0007e8336dd625193205ef7f6b979de41\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b62434d027b11f2a6e11bcecc54a9df30aebfc4a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b62434d027b11f2a6e11bcecc54a9df30aebfc4a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b62434d027b11f2a6e11bcecc54a9df30aebfc4a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b68c567c081626a0679ad020fb6be62b124689b0\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b68c567c081626a0679ad020fb6be62b124689b0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b68c567c081626a0679ad020fb6be62b124689b0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _11_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _13_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h3f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b68dc0de83a7b58904580404709f90fe46d84c1f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b68dc0de83a7b58904580404709f90fe46d84c1f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b68dc0de83a7b58904580404709f90fe46d84c1f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h4b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b6dd31de21759bd493c3c560a9d01b22be744b63\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b6dd31de21759bd493c3c560a9d01b22be744b63\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b6dd31de21759bd493c3c560a9d01b22be744b63\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b8d6ebd3161679c41141593534211a92e8b0854d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b8d6ebd3161679c41141593534211a92e8b0854d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b8d6ebd3161679c41141593534211a92e8b0854d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h76;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b8ed5a690bfe1744bcbf9da1ab2f8a1936839fcc\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b8ed5a690bfe1744bcbf9da1ab2f8a1936839fcc\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b8ed5a690bfe1744bcbf9da1ab2f8a1936839fcc\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b8ee8211e38721142ae35f285d577676c300b949\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b8ee8211e38721142ae35f285d577676c300b949\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b8ee8211e38721142ae35f285d577676c300b949\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b9043acf1dff3ee203106a51e38cf6c67b51adbd\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b9043acf1dff3ee203106a51e38cf6c67b51adbd\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b9043acf1dff3ee203106a51e38cf6c67b51adbd\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbe;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b942356e51f4457d972cfbb3e5c77cff66d6fe9a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b942356e51f4457d972cfbb3e5c77cff66d6fe9a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b942356e51f4457d972cfbb3e5c77cff66d6fe9a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$b9c6b59dd7bf33c8e57984532c1a501f8d9dfa76\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$b9c6b59dd7bf33c8e57984532c1a501f8d9dfa76\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$b9c6b59dd7bf33c8e57984532c1a501f8d9dfa76\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ba56c638388ac97d2de2dafe8f1e51cdbe8651e7\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ba56c638388ac97d2de2dafe8f1e51cdbe8651e7\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ba56c638388ac97d2de2dafe8f1e51cdbe8651e7\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h73;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$bafbc86a8e5023bdc101c04a7dab38177ad4f082\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$bafbc86a8e5023bdc101c04a7dab38177ad4f082\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$bafbc86a8e5023bdc101c04a7dab38177ad4f082\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h64;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$bb63b1086ba82eaec5fd2454e2a551abfed19a15\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$bb63b1086ba82eaec5fd2454e2a551abfed19a15\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$bb63b1086ba82eaec5fd2454e2a551abfed19a15\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$bb8adab44655490560c3d052a5f7e92b8f1ec706\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$bb8adab44655490560c3d052a5f7e92b8f1ec706\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$bb8adab44655490560c3d052a5f7e92b8f1ec706\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcd;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$bb93d8a1ac5c740350229fe8c41d440e592dec5f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$bb93d8a1ac5c740350229fe8c41d440e592dec5f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$bb93d8a1ac5c740350229fe8c41d440e592dec5f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9a;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$bbe3e986a96861ede5ff1d3481cfbca3c05f0a64\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$bbe3e986a96861ede5ff1d3481cfbca3c05f0a64\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$bbe3e986a96861ede5ff1d3481cfbca3c05f0a64\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcb;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$bc10a5db545b25ccd64fce678797945669b37316\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$bc10a5db545b25ccd64fce678797945669b37316\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$bc10a5db545b25ccd64fce678797945669b37316\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _11_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _12_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _13_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcf;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$bcae00f807b11a3bcc683a8c07896d71b2b77d67\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$bcae00f807b11a3bcc683a8c07896d71b2b77d67\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$bcae00f807b11a3bcc683a8c07896d71b2b77d67\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hba;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$bcc338d44eb39c0cfba27173beae6b1cdde04dd7\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$bcc338d44eb39c0cfba27173beae6b1cdde04dd7\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$bcc338d44eb39c0cfba27173beae6b1cdde04dd7\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _15_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[5]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_03_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h40;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$bd30f06ef95947b58bc8de26ac2f8ff8b3c823f5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$bd30f06ef95947b58bc8de26ac2f8ff8b3c823f5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$bd30f06ef95947b58bc8de26ac2f8ff8b3c823f5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h96;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$bd66b340a5d61a1bf95cf2c387c0468cf4a5d2da\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$bd66b340a5d61a1bf95cf2c387c0468cf4a5d2da\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$bd66b340a5d61a1bf95cf2c387c0468cf4a5d2da\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h71;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$be64a32d4d06f235af4266fabe0dae6681c69e70\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$be64a32d4d06f235af4266fabe0dae6681c69e70\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$be64a32d4d06f235af4266fabe0dae6681c69e70\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h11;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$bf078a989932f320eafca400f39d625f5a72dde7\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$bf078a989932f320eafca400f39d625f5a72dde7\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$bf078a989932f320eafca400f39d625f5a72dde7\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c01dd9d52ce6455b40b124caf78b14122e5a373e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c01dd9d52ce6455b40b124caf78b14122e5a373e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c01dd9d52ce6455b40b124caf78b14122e5a373e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h93;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c06eadba4c42ec1bdbc932c9614da9b45dd2f15b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c06eadba4c42ec1bdbc932c9614da9b45dd2f15b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c06eadba4c42ec1bdbc932c9614da9b45dd2f15b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NOT _21_ (
    .A(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c0f43a799ad175791d1828eff10d197ab1de3699\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c0f43a799ad175791d1828eff10d197ab1de3699\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c0f43a799ad175791d1828eff10d197ab1de3699\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h52;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c13a9cf0e2c7082c9fb7d07b490994be5b345893\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c13a9cf0e2c7082c9fb7d07b490994be5b345893\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c13a9cf0e2c7082c9fb7d07b490994be5b345893\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c1504d2114709359e4bdac5143d9ebe4e6839c60\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c1504d2114709359e4bdac5143d9ebe4e6839c60\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c1504d2114709359e4bdac5143d9ebe4e6839c60\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hca;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c1779105b47a492e95a170d797783cce44f65393\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c1779105b47a492e95a170d797783cce44f65393\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c1779105b47a492e95a170d797783cce44f65393\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c2788eca168c655a24b734e5036f3502a38304c9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c2788eca168c655a24b734e5036f3502a38304c9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c2788eca168c655a24b734e5036f3502a38304c9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h37;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c29af8eda6fda912791a4e2be222356e30b6bf5a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c29af8eda6fda912791a4e2be222356e30b6bf5a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c29af8eda6fda912791a4e2be222356e30b6bf5a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h91;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c39bd35203e465785b5ec774e45abe7a1e5eb44c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c39bd35203e465785b5ec774e45abe7a1e5eb44c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c39bd35203e465785b5ec774e45abe7a1e5eb44c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c3edc7f830b6e61ddb64ea3d4a2ece77b3015467\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c3edc7f830b6e61ddb64ea3d4a2ece77b3015467\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c3edc7f830b6e61ddb64ea3d4a2ece77b3015467\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h96;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c40b535c9d7aff7f76a9034e7d58fde4874408bc\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c40b535c9d7aff7f76a9034e7d58fde4874408bc\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c40b535c9d7aff7f76a9034e7d58fde4874408bc\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hae;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c434be61c26c6d2c841ab93a1e2aa68b2ee5f295\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c434be61c26c6d2c841ab93a1e2aa68b2ee5f295\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c434be61c26c6d2c841ab93a1e2aa68b2ee5f295\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c4982934b75fc8d0f8d589efe393c319e1a9273a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c4982934b75fc8d0f8d589efe393c319e1a9273a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c4982934b75fc8d0f8d589efe393c319e1a9273a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h6d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c5496029f9b407e866af7913d95ef175468286ec\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c5496029f9b407e866af7913d95ef175468286ec\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c5496029f9b407e866af7913d95ef175468286ec\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbe;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c571936b24f4299d9dff3a090133bc68a563b3ed\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c571936b24f4299d9dff3a090133bc68a563b3ed\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c571936b24f4299d9dff3a090133bc68a563b3ed\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _19_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h85;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c5846d6df07f59ecea4f79fd2059e8546b0fb44c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c5846d6df07f59ecea4f79fd2059e8546b0fb44c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c5846d6df07f59ecea4f79fd2059e8546b0fb44c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'haa;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c5b235c97fc02afb084a0081e651b51cfed85874\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c5b235c97fc02afb084a0081e651b51cfed85874\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c5b235c97fc02afb084a0081e651b51cfed85874\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h6d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c6343318907fc8d75b3ec018dd717946cad31b56\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c6343318907fc8d75b3ec018dd717946cad31b56\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c6343318907fc8d75b3ec018dd717946cad31b56\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h70;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c6b7fb43685e4d5bfd835c2cd369519219e1c232\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c6b7fb43685e4d5bfd835c2cd369519219e1c232\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c6b7fb43685e4d5bfd835c2cd369519219e1c232\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c761949f603c48ff2a1dfa14700aa938e8c6d21e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c761949f603c48ff2a1dfa14700aa938e8c6d21e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c761949f603c48ff2a1dfa14700aa938e8c6d21e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h94;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c797236d4e2a8b42a5249860d4f21943fcf16249\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c797236d4e2a8b42a5249860d4f21943fcf16249\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c797236d4e2a8b42a5249860d4f21943fcf16249\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c88ec414be48c59962e4728c8ec0f338ac1a2b89\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c88ec414be48c59962e4728c8ec0f338ac1a2b89\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c88ec414be48c59962e4728c8ec0f338ac1a2b89\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h3e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c8aabe4ef2d430bcef0d6fbc18b7f24300960c44\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c8aabe4ef2d430bcef0d6fbc18b7f24300960c44\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c8aabe4ef2d430bcef0d6fbc18b7f24300960c44\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c8bcb9911d0dc7251a3083e4c38588ff3e1542bd\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c8bcb9911d0dc7251a3083e4c38588ff3e1542bd\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c8bcb9911d0dc7251a3083e4c38588ff3e1542bd\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h8f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c8fbffdebabd1fbc693cfddcf803428294762758\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c8fbffdebabd1fbc693cfddcf803428294762758\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c8fbffdebabd1fbc693cfddcf803428294762758\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _19_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h8a;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c9018b949d96b1de24b4aef289707b57eb508935\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c9018b949d96b1de24b4aef289707b57eb508935\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c9018b949d96b1de24b4aef289707b57eb508935\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcd;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$c9dc15220708e94ee3dad49d9786d51361d58144\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$c9dc15220708e94ee3dad49d9786d51361d58144\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$c9dc15220708e94ee3dad49d9786d51361d58144\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h99;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ca00c45f854a3f97c607b1a7e14972fa9c82b951\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ca00c45f854a3f97c607b1a7e14972fa9c82b951\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ca00c45f854a3f97c607b1a7e14972fa9c82b951\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$cad1cfa451422739406e6a02ffe4eb960e97d39f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$cad1cfa451422739406e6a02ffe4eb960e97d39f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$cad1cfa451422739406e6a02ffe4eb960e97d39f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$cb3a276fc3aa7effcaf00414815bb8949ac6550c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$cb3a276fc3aa7effcaf00414815bb8949ac6550c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$cb3a276fc3aa7effcaf00414815bb8949ac6550c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ccfa8863ebfd75be6aa229b89632625d1bf8c68e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ccfa8863ebfd75be6aa229b89632625d1bf8c68e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ccfa8863ebfd75be6aa229b89632625d1bf8c68e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'haa;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$cd1248072192a5316db956dcf04c8f4af81e7222\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$cd1248072192a5316db956dcf04c8f4af81e7222\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$cd1248072192a5316db956dcf04c8f4af81e7222\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h5c;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$cd4f7a0c4e78c644bd392d28a57b4d91ba3a37c3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$cd4f7a0c4e78c644bd392d28a57b4d91ba3a37c3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$cd4f7a0c4e78c644bd392d28a57b4d91ba3a37c3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[5]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOR _18_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _19_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_05_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h16;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ce996f439f7cad5de0034d58feb9023695f27fa6\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ce996f439f7cad5de0034d58feb9023695f27fa6\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ce996f439f7cad5de0034d58feb9023695f27fa6\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h91;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$cede1a3eabea0f5c3e1c118123cdae81ea115cad\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$cede1a3eabea0f5c3e1c118123cdae81ea115cad\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$cede1a3eabea0f5c3e1c118123cdae81ea115cad\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h43;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ceeb6bb76c8a1ae66df9df7c4ff59fc95608cddc\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ceeb6bb76c8a1ae66df9df7c4ff59fc95608cddc\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ceeb6bb76c8a1ae66df9df7c4ff59fc95608cddc\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'haa;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d00e7fc8542e7541b7ae80f8c70695378575a0d6\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d00e7fc8542e7541b7ae80f8c70695378575a0d6\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d00e7fc8542e7541b7ae80f8c70695378575a0d6\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h6c;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d02cb906c86cd7507fd02562af19ceeec171f683\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d02cb906c86cd7507fd02562af19ceeec171f683\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d02cb906c86cd7507fd02562af19ceeec171f683\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d04a7016f52fd93350ca11d0d1280ac72fafd732\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d04a7016f52fd93350ca11d0d1280ac72fafd732\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d04a7016f52fd93350ca11d0d1280ac72fafd732\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d0f3a1d120aa71cdcc5b6e37e25df6fc96d1f4b4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d0f3a1d120aa71cdcc5b6e37e25df6fc96d1f4b4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d0f3a1d120aa71cdcc5b6e37e25df6fc96d1f4b4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h8e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d15b7c38cb3a0179a5680aa000e0d256fc9bdbc9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d15b7c38cb3a0179a5680aa000e0d256fc9bdbc9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d15b7c38cb3a0179a5680aa000e0d256fc9bdbc9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d17ad904f2502c44732becd1206fbb914513b7bf\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d17ad904f2502c44732becd1206fbb914513b7bf\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d17ad904f2502c44732becd1206fbb914513b7bf\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d1b40c4f306f3ed6d23d9320fdc8608b4d7ef824\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d1b40c4f306f3ed6d23d9320fdc8608b4d7ef824\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d1b40c4f306f3ed6d23d9320fdc8608b4d7ef824\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h6a;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d24dcb2f1565e44486e005f0baa5f59f1d09a502\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d24dcb2f1565e44486e005f0baa5f59f1d09a502\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d24dcb2f1565e44486e005f0baa5f59f1d09a502\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hba;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d26742b91880fed701d9a2b8f2dcbfef8b412a82\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d26742b91880fed701d9a2b8f2dcbfef8b412a82\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d26742b91880fed701d9a2b8f2dcbfef8b412a82\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d28066824b79646e07e287fa06ec10795d370b60\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d28066824b79646e07e287fa06ec10795d370b60\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d28066824b79646e07e287fa06ec10795d370b60\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h78;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d288cc2034cc4ea5c88a110d44b880b7c13110cd\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d288cc2034cc4ea5c88a110d44b880b7c13110cd\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d288cc2034cc4ea5c88a110d44b880b7c13110cd\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d4124f325554042c7a7e07b30f48865fd3145f17\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d4124f325554042c7a7e07b30f48865fd3145f17\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d4124f325554042c7a7e07b30f48865fd3145f17\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d42944f3625ac8d49f06255526e8167fa9013188\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d42944f3625ac8d49f06255526e8167fa9013188\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d42944f3625ac8d49f06255526e8167fa9013188\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hab;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d45cb8ae5ca7bbf4e4e58fd8bca00f7891dad09f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d45cb8ae5ca7bbf4e4e58fd8bca00f7891dad09f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d45cb8ae5ca7bbf4e4e58fd8bca00f7891dad09f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h5e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d4d2c93c043e00b64b947be47a2db1662b3bb81e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d4d2c93c043e00b64b947be47a2db1662b3bb81e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d4d2c93c043e00b64b947be47a2db1662b3bb81e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d59d8d2b961beee020a41f294ec21b0c6b1b05cf\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d59d8d2b961beee020a41f294ec21b0c6b1b05cf\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d59d8d2b961beee020a41f294ec21b0c6b1b05cf\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d5ed91290bf2d89f0835cc1a3418fb985a8e3321\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d5ed91290bf2d89f0835cc1a3418fb985a8e3321\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d5ed91290bf2d89f0835cc1a3418fb985a8e3321\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h7b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d615b911623032cc9e8f688c98eff0e2a4ad7d70\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d615b911623032cc9e8f688c98eff0e2a4ad7d70\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d615b911623032cc9e8f688c98eff0e2a4ad7d70\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hd7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d6e6c19cc2fa7a9783f31ea463a516b3bc483b50\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d6e6c19cc2fa7a9783f31ea463a516b3bc483b50\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d6e6c19cc2fa7a9783f31ea463a516b3bc483b50\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h4d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d76421d0285cfe6be3bcfc2373e32e7979a47021\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d76421d0285cfe6be3bcfc2373e32e7979a47021\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d76421d0285cfe6be3bcfc2373e32e7979a47021\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbc;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d7b5c24555231e500da55b2fe9d3d35c8849b05c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d7b5c24555231e500da55b2fe9d3d35c8849b05c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d7b5c24555231e500da55b2fe9d3d35c8849b05c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcb;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d7c2e36528dc34e994ad125eb20a46f49be76f0f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d7c2e36528dc34e994ad125eb20a46f49be76f0f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d7c2e36528dc34e994ad125eb20a46f49be76f0f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcd;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d7c757cbca288f0822cbb86e954eafcf144180e5\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d7c757cbca288f0822cbb86e954eafcf144180e5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d7c757cbca288f0822cbb86e954eafcf144180e5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h5b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$d892981ea2d67e783c6845ef51cfbee74130c0a0\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$d892981ea2d67e783c6845ef51cfbee74130c0a0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$d892981ea2d67e783c6845ef51cfbee74130c0a0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'had;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$dab6723c7fae696eba5c8a8af7f22f40dfbf9a15\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$dab6723c7fae696eba5c8a8af7f22f40dfbf9a15\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$dab6723c7fae696eba5c8a8af7f22f40dfbf9a15\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$dadc1bbf152bdf2386cdfb382273edb8193987d8\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$dadc1bbf152bdf2386cdfb382273edb8193987d8\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$dadc1bbf152bdf2386cdfb382273edb8193987d8\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$db05bfc6e54f54b4868618d0cfe80cb06c35df3e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$db05bfc6e54f54b4868618d0cfe80cb06c35df3e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$db05bfc6e54f54b4868618d0cfe80cb06c35df3e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h96;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$dc339be7d61369b137b2db7e495c45d6c26b7027\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$dc339be7d61369b137b2db7e495c45d6c26b7027\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$dc339be7d61369b137b2db7e495c45d6c26b7027\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$dc4fd506391b694fd21c70157c44ba393cfdedfa\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$dc4fd506391b694fd21c70157c44ba393cfdedfa\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$dc4fd506391b694fd21c70157c44ba393cfdedfa\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h6a;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$de3fb4bdd957550580b0c26ed9332b1c52ac31b4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$de3fb4bdd957550580b0c26ed9332b1c52ac31b4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$de3fb4bdd957550580b0c26ed9332b1c52ac31b4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h91;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$de5dec91ed5dce14ced1c7e2d37fd89028c5f91e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$de5dec91ed5dce14ced1c7e2d37fd89028c5f91e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$de5dec91ed5dce14ced1c7e2d37fd89028c5f91e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h64;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$deac8ed67309b26b859e38264c2f65022d372f35\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$deac8ed67309b26b859e38264c2f65022d372f35\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$deac8ed67309b26b859e38264c2f65022d372f35\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h93;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$df294364e939b167061c42b37b4e14d7866692c9\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$df294364e939b167061c42b37b4e14d7866692c9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$df294364e939b167061c42b37b4e14d7866692c9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h7d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$df5e1dd0d3b00c29fde3c123feab25e00b87cc72\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$df5e1dd0d3b00c29fde3c123feab25e00b87cc72\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$df5e1dd0d3b00c29fde3c123feab25e00b87cc72\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h3b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$df880b787a233e8fbd4601d8d1ff8d76667ff6b4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$df880b787a233e8fbd4601d8d1ff8d76667ff6b4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$df880b787a233e8fbd4601d8d1ff8d76667ff6b4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h3e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e049fc7f127a23ecf428261fba027895119aa44d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e049fc7f127a23ecf428261fba027895119aa44d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e049fc7f127a23ecf428261fba027895119aa44d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h30;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e06d99429d9a96ff132a033f791774e046ac1644\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e06d99429d9a96ff132a033f791774e046ac1644\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e06d99429d9a96ff132a033f791774e046ac1644\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e18f246c33ab633ffe13326277061c2a4bea4859\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e18f246c33ab633ffe13326277061c2a4bea4859\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e18f246c33ab633ffe13326277061c2a4bea4859\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e2a5c7053e3d3d0c8cf600fca96ac12918d14f6a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e2a5c7053e3d3d0c8cf600fca96ac12918d14f6a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e2a5c7053e3d3d0c8cf600fca96ac12918d14f6a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hdd;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e2b222674603e37c8c1fc16a1d5f83311d5f25ce\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e2b222674603e37c8c1fc16a1d5f83311d5f25ce\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e2b222674603e37c8c1fc16a1d5f83311d5f25ce\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e3b935a9ce8c505c97c165a481f25cc46e374d84\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e3b935a9ce8c505c97c165a481f25cc46e374d84\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e3b935a9ce8c505c97c165a481f25cc46e374d84\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hae;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e42db783e084744c199e7c35df1c8a1a87a03600\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e42db783e084744c199e7c35df1c8a1a87a03600\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e42db783e084744c199e7c35df1c8a1a87a03600\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e4833d05ada4ccc233de1f3eac40a901872efba3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e4833d05ada4ccc233de1f3eac40a901872efba3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e4833d05ada4ccc233de1f3eac40a901872efba3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9c;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e4ec3ba47583f2d3d66c3ffd4c20b21683d81845\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e4ec3ba47583f2d3d66c3ffd4c20b21683d81845\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e4ec3ba47583f2d3d66c3ffd4c20b21683d81845\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'had;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e5618b7180f915e3eae7909276632212eadd227a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e5618b7180f915e3eae7909276632212eadd227a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e5618b7180f915e3eae7909276632212eadd227a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h55;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e5a3769f2ddfb3166ea69f43cf6d8cfb0c5fef7e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e5a3769f2ddfb3166ea69f43cf6d8cfb0c5fef7e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e5a3769f2ddfb3166ea69f43cf6d8cfb0c5fef7e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h72;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e609ead62b3e93d5e37450b5c42a28daa3a32e8e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e609ead62b3e93d5e37450b5c42a28daa3a32e8e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e609ead62b3e93d5e37450b5c42a28daa3a32e8e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e6523a4aa23cf8712912f61e812d8e91289eedca\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e6523a4aa23cf8712912f61e812d8e91289eedca\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e6523a4aa23cf8712912f61e812d8e91289eedca\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h76;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e672fa6112a95e755c8a233c497cd42a7e9c59bd\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e672fa6112a95e755c8a233c497cd42a7e9c59bd\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e672fa6112a95e755c8a233c497cd42a7e9c59bd\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcb;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e77e43b1fe6f444ecdcf8fc76f12625401c49b65\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e77e43b1fe6f444ecdcf8fc76f12625401c49b65\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e77e43b1fe6f444ecdcf8fc76f12625401c49b65\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h3b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e783ba2f1d16542c829fe6e6dbf584d3d6a9d22f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e783ba2f1d16542c829fe6e6dbf584d3d6a9d22f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e783ba2f1d16542c829fe6e6dbf584d3d6a9d22f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hac;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e81cd9cba1e7d05fa180f5b7571cfbbd9538e0d3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e81cd9cba1e7d05fa180f5b7571cfbbd9538e0d3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e81cd9cba1e7d05fa180f5b7571cfbbd9538e0d3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _11_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _12_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _13_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcf;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e8c4b9ff39a8188230ad9442c8bfd8a7c3f17bfa\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e8c4b9ff39a8188230ad9442c8bfd8a7c3f17bfa\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e8c4b9ff39a8188230ad9442c8bfd8a7c3f17bfa\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e8c52717fd8d2a43b268edbf8eed2412ee014761\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e8c52717fd8d2a43b268edbf8eed2412ee014761\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e8c52717fd8d2a43b268edbf8eed2412ee014761\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h58;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e9167e42782c781365c8b9baf8313fdfc45ca6a2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e9167e42782c781365c8b9baf8313fdfc45ca6a2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e9167e42782c781365c8b9baf8313fdfc45ca6a2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha3;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e91711ffe2b4b5d2a7735758012b6881faa856e3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e91711ffe2b4b5d2a7735758012b6881faa856e3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e91711ffe2b4b5d2a7735758012b6881faa856e3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _11_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NAND _12_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOR _13_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _15_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_04_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'haf;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e9643b38fafa271a80ab3658b08225eff300559b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e9643b38fafa271a80ab3658b08225eff300559b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e9643b38fafa271a80ab3658b08225eff300559b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha2;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$e9e334c5da504c06314d2d04e106aabceb82f34f\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$e9e334c5da504c06314d2d04e106aabceb82f34f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$e9e334c5da504c06314d2d04e106aabceb82f34f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ea5d2cd4234897f6258187d87175a86776dc64c4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ea5d2cd4234897f6258187d87175a86776dc64c4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ea5d2cd4234897f6258187d87175a86776dc64c4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NOR _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h2e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$eac9d8343578467df8c431b8ee3e3b39b670b29b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$eac9d8343578467df8c431b8ee3e3b39b670b29b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$eac9d8343578467df8c431b8ee3e3b39b670b29b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h76;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$eb0dae7215462a466f0952b0a04e24a93a025d42\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$eb0dae7215462a466f0952b0a04e24a93a025d42\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$eb0dae7215462a466f0952b0a04e24a93a025d42\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h77;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$eb36bc382b696e47d16bb33a1015afba0edd039e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$eb36bc382b696e47d16bb33a1015afba0edd039e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$eb36bc382b696e47d16bb33a1015afba0edd039e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h4c;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ec1f385f52c462370e3b9759e14e76cb838f7809\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ec1f385f52c462370e3b9759e14e76cb838f7809\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ec1f385f52c462370e3b9759e14e76cb838f7809\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ed7324ed9e810fb7bf79c0df8f7ff81f76fc7014\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ed7324ed9e810fb7bf79c0df8f7ff81f76fc7014\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ed7324ed9e810fb7bf79c0df8f7ff81f76fc7014\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ee1b443ce0ebc20492044f1d93c6941bc93888e4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ee1b443ce0ebc20492044f1d93c6941bc93888e4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ee1b443ce0ebc20492044f1d93c6941bc93888e4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ee484e122f443aa76955655f716bf4b20328f231\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ee484e122f443aa76955655f716bf4b20328f231\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ee484e122f443aa76955655f716bf4b20328f231\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[5]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOR _18_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _19_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_05_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h16;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ee96214573de2a43a910a136401fa5e4001a3d6e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ee96214573de2a43a910a136401fa5e4001a3d6e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ee96214573de2a43a910a136401fa5e4001a3d6e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ef1ad7cf108bf7c37e3aa0dfb2bf361be26388e4\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ef1ad7cf108bf7c37e3aa0dfb2bf361be26388e4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ef1ad7cf108bf7c37e3aa0dfb2bf361be26388e4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h6c;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f007c2cf40f0b7c566b6a163799fab2da1bf3bd0\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f007c2cf40f0b7c566b6a163799fab2da1bf3bd0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f007c2cf40f0b7c566b6a163799fab2da1bf3bd0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _17_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h41;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f0457637f63a51089f5a4c05ab56a6bc2dd5d6cb\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f0457637f63a51089f5a4c05ab56a6bc2dd5d6cb\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f0457637f63a51089f5a4c05ab56a6bc2dd5d6cb\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc9;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f0507748634f68272f5984e4233327563d31b4d3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f0507748634f68272f5984e4233327563d31b4d3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f0507748634f68272f5984e4233327563d31b4d3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h5b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f0f955d17dc64803ca2bf81b3c2e1cbf0549a6f1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f0f955d17dc64803ca2bf81b3c2e1cbf0549a6f1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f0f955d17dc64803ca2bf81b3c2e1cbf0549a6f1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h75;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f103065ee8925165b7992d69947df79d489a6607\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f103065ee8925165b7992d69947df79d489a6607\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f103065ee8925165b7992d69947df79d489a6607\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _11_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _12_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _13_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcf;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f122ff66e049f8e54ef9495eb082475a9a89b1cd\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f122ff66e049f8e54ef9495eb082475a9a89b1cd\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f122ff66e049f8e54ef9495eb082475a9a89b1cd\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hae;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f148d8cc208b9a50ac99080c8b077339877da8b3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f148d8cc208b9a50ac99080c8b077339877da8b3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f148d8cc208b9a50ac99080c8b077339877da8b3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha6;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f170633d05c7d88d9b519702452ff0d8454806b1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f170633d05c7d88d9b519702452ff0d8454806b1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f170633d05c7d88d9b519702452ff0d8454806b1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha5;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f1f10318080f5e4d2f8e0a346e7d2ecafbb784f1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f1f10318080f5e4d2f8e0a346e7d2ecafbb784f1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f1f10318080f5e4d2f8e0a346e7d2ecafbb784f1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _11_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NAND _12_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOR _13_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOT _15_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_04_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h5f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f3cf39573cdaa23f6f2e0f0ab90c2ba86643d19e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f3cf39573cdaa23f6f2e0f0ab90c2ba86643d19e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f3cf39573cdaa23f6f2e0f0ab90c2ba86643d19e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h54;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f3dfb7571ecba4be5d889badee4f21d008392557\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f3dfb7571ecba4be5d889badee4f21d008392557\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f3dfb7571ecba4be5d889badee4f21d008392557\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h5e;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f42d53c7a935d0d42b0d45e992a1af46e16251f1\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f42d53c7a935d0d42b0d45e992a1af46e16251f1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f42d53c7a935d0d42b0d45e992a1af46e16251f1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hb1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f4b35423f2852033aabc4d3368b767ffbc6ca7f7\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f4b35423f2852033aabc4d3368b767ffbc6ca7f7\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f4b35423f2852033aabc4d3368b767ffbc6ca7f7\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_01_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h43;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f54988d4ac9c4d537a74ef0a364c7d6161b4b6f6\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f54988d4ac9c4d537a74ef0a364c7d6161b4b6f6\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f54988d4ac9c4d537a74ef0a364c7d6161b4b6f6\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h91;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f5baa1aa203079bb611892a4e4767b1306f6406a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f5baa1aa203079bb611892a4e4767b1306f6406a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f5baa1aa203079bb611892a4e4767b1306f6406a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h37;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f660b88ddc7eda599d21ae1431ecabea364c2bfe\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f660b88ddc7eda599d21ae1431ecabea364c2bfe\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f660b88ddc7eda599d21ae1431ecabea364c2bfe\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _11_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NAND _12_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NOR _13_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _15_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_04_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9f;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f673828dac151f2524aa9c43126140681c76ca01\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f673828dac151f2524aa9c43126140681c76ca01\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f673828dac151f2524aa9c43126140681c76ca01\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc0;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f709bd80e27668b456f6ffee2fb32a13f61b3288\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f709bd80e27668b456f6ffee2fb32a13f61b3288\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f709bd80e27668b456f6ffee2fb32a13f61b3288\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h4b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f70ef0a43a151711af91d132b1064bfaaf4ea905\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f70ef0a43a151711af91d132b1064bfaaf4ea905\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f70ef0a43a151711af91d132b1064bfaaf4ea905\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hba;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f7e6cb86a172f2a899082acc92db3be4357ebdf3\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f7e6cb86a172f2a899082acc92db3be4357ebdf3\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f7e6cb86a172f2a899082acc92db3be4357ebdf3\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'had;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f7fb0a8e216de8c1f5e13b2b5a274156bf042794\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f7fb0a8e216de8c1f5e13b2b5a274156bf042794\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f7fb0a8e216de8c1f5e13b2b5a274156bf042794\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f8951e4f4fbda94600fd94006676d75cfee5e7c2\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f8951e4f4fbda94600fd94006676d75cfee5e7c2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f8951e4f4fbda94600fd94006676d75cfee5e7c2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h72;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$f8c441848b68409f7c045c98cb67a05799ffce1c\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$f8c441848b68409f7c045c98cb67a05799ffce1c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$f8c441848b68409f7c045c98cb67a05799ffce1c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_01_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h83;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$fa2c84847c2d551ae77918dd919cbc9f49598a9a\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$fa2c84847c2d551ae77918dd919cbc9f49598a9a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$fa2c84847c2d551ae77918dd919cbc9f49598a9a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha7;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$fa507ea0456ed45406b5af56ddbf535d89d86a5e\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$fa507ea0456ed45406b5af56ddbf535d89d86a5e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$fa507ea0456ed45406b5af56ddbf535d89d86a5e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_03_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hbb;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$fa5b472c97ed78a710ee6f9e63f7854c892c3713\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$fa5b472c97ed78a710ee6f9e63f7854c892c3713\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$fa5b472c97ed78a710ee6f9e63f7854c892c3713\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _17_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h88;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$fa66f0f2d344d8a673e091f0af8bd5e88067d509\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$fa66f0f2d344d8a673e091f0af8bd5e88067d509\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$fa66f0f2d344d8a673e091f0af8bd5e88067d509\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h9b;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$fa9bbbe09a80bb0d7b34560f0ce4232ec7060040\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$fa9bbbe09a80bb0d7b34560f0ce4232ec7060040\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$fa9bbbe09a80bb0d7b34560f0ce4232ec7060040\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hab;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$fb330974e0200a238f326d305df544918ee4a1f6\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$fb330974e0200a238f326d305df544918ee4a1f6\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$fb330974e0200a238f326d305df544918ee4a1f6\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcc;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$fb8c9a34bf03a251ffaef2a1f4680a6f5cb43c71\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$fb8c9a34bf03a251ffaef2a1f4680a6f5cb43c71\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$fb8c9a34bf03a251ffaef2a1f4680a6f5cb43c71\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _11_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[7]),
    .Y(_02_)
  );
  NAND _12_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NOR _13_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _15_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_04_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'haf;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$fbe97f953b682892a8edc651c41e784fea7fd909\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$fbe97f953b682892a8edc651c41e784fea7fd909\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$fbe97f953b682892a8edc651c41e784fea7fd909\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h4d;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$fc108c60316dca029a7858486322af8b56a64a00\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$fc108c60316dca029a7858486322af8b56a64a00\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$fc108c60316dca029a7858486322af8b56a64a00\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc4;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$fcde58b6f2bbfe79be080c62284e7e465d68e4bd\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$fcde58b6f2bbfe79be080c62284e7e465d68e4bd\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$fcde58b6f2bbfe79be080c62284e7e465d68e4bd\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[6]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hac;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ff0ff37b7731f6e59fdd6bfe8f1351856a3c2f03\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ff0ff37b7731f6e59fdd6bfe8f1351856a3c2f03\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ff0ff37b7731f6e59fdd6bfe8f1351856a3c2f03\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha1;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ff389c6919825545611e15b61013b489fa53fd2b\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ff389c6919825545611e15b61013b489fa53fd2b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ff389c6919825545611e15b61013b489fa53fd2b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _13_ (
    .A(_02_),
    .Y(_03_)
  );
  NAND _14_ (
    .A(expose_cmp[6]),
    .B(expose_cmp[7]),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcc;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ff4af9495c57ba7be7c4161c07d2f618cfd02b4d\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ff4af9495c57ba7be7c4161c07d2f618cfd02b4d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ff4af9495c57ba7be7c4161c07d2f618cfd02b4d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hcb;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ff8289dd1cd4f5a78ae6868e0982807935c70e73\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ff8289dd1cd4f5a78ae6868e0982807935c70e73\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ff8289dd1cd4f5a78ae6868e0982807935c70e73\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(_03_),
    .Y(_04_)
  );
  NAND _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'hc8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ffdbe0bdbaa1d7b7ba003bfbe8ea147bedaf4500\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ffdbe0bdbaa1d7b7ba003bfbe8ea147bedaf4500\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ffdbe0bdbaa1d7b7ba003bfbe8ea147bedaf4500\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_04_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h97;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ffde8b247d6af50c8396a6a410d0cf548d242b39\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ffde8b247d6af50c8396a6a410d0cf548d242b39\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ffde8b247d6af50c8396a6a410d0cf548d242b39\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_03_),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'ha8;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:252.1-288.10" *)
module \$paramod$ffee9133c12f24321e0d42319fbe15a50162d498\PIXEL_SENSOR (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA);
  (* src = "output/sensorTop.v:260.8-260.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:265.33-265.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:264.27-264.39" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:261.8-261.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:262.8-262.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:263.8-263.12" *)
  input READ;
  (* src = "output/sensorTop.v:275.7-275.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:269.12-269.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[0] = DIGITAL_RAMP[0];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[1] = DIGITAL_RAMP[1];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[2] = DIGITAL_RAMP[2];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[3] = DIGITAL_RAMP[3];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[4] = DIGITAL_RAMP[4];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[5] = DIGITAL_RAMP[5];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[6] = DIGITAL_RAMP[6];
  (* src = "output/sensorTop.v:276.2-278.30" *)
  always @*
    if (!cmp) local_data[7] = DIGITAL_RAMP[7];
  (* src = "output/sensorTop.v:282.4-287.3" *)
  \$paramod$ffee9133c12f24321e0d42319fbe15a50162d498\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(ANALOG_RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:270.11-274.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:222.1-251.10" *)
module \$paramod$ffee9133c12f24321e0d42319fbe15a50162d498\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:231.13-231.16" *)
  output CMP;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:228.8-228.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:237.13-237.25" *)
  wire [7:0] EXPOSE_VALUE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:239.13-239.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[7]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _13_ (
    .A(expose_cmp[4]),
    .B(_01_),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:246.2-250.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:240.22-245.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
  assign EXPOSE_VALUE = 8'h79;
endmodule

(* dynports =  1  *)
(* hdlname = "\\Counter" *)
(* src = "output/sensorTop.v:3.1-19.10" *)
module \$paramod\Counter\bits=s32'00000000000000000000000000000010 (clk, reset, enable, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  (* src = "output/sensorTop.v:9.8-9.11" *)
  input clk;
  (* src = "output/sensorTop.v:11.8-11.14" *)
  input enable;
  (* src = "output/sensorTop.v:13.26-13.29" *)
  output [1:0] out;
  (* src = "output/sensorTop.v:10.8-10.13" *)
  input reset;
  NOT _08_ (
    .A(out[1]),
    .Y(_04_)
  );
  NAND _09_ (
    .A(out[0]),
    .B(enable),
    .Y(_05_)
  );
  NOT _10_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _11_ (
    .A(out[0]),
    .B(enable),
    .Y(_07_)
  );
  NOR _12_ (
    .A(_06_),
    .B(_07_),
    .Y(_00_)
  );
  NOR _13_ (
    .A(out[1]),
    .B(_06_),
    .Y(_02_)
  );
  NOR _14_ (
    .A(_04_),
    .B(_05_),
    .Y(_03_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_03_),
    .Y(_01_)
  );
  (* src = "output/sensorTop.v:14.2-18.19" *)
  DFFSR _16_ (
    .C(clk),
    .D(_00_),
    .Q(out[0]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:14.2-18.19" *)
  DFFSR _17_ (
    .C(clk),
    .D(_01_),
    .Q(out[1]),
    .R(reset),
    .S(1'h0)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\Counter" *)
(* src = "output/sensorTop.v:3.1-19.10" *)
module \$paramod\Counter\bits=s32'00000000000000000000000000000011 (clk, reset, enable, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  (* src = "output/sensorTop.v:9.8-9.11" *)
  input clk;
  (* src = "output/sensorTop.v:11.8-11.14" *)
  input enable;
  (* src = "output/sensorTop.v:13.26-13.29" *)
  output [2:0] out;
  (* src = "output/sensorTop.v:10.8-10.13" *)
  input reset;
  NOT _14_ (
    .A(out[1]),
    .Y(_12_)
  );
  NOT _15_ (
    .A(enable),
    .Y(_13_)
  );
  NOT _16_ (
    .A(out[0]),
    .Y(_03_)
  );
  NOR _17_ (
    .A(_13_),
    .B(_03_),
    .Y(_04_)
  );
  NAND _18_ (
    .A(enable),
    .B(out[0]),
    .Y(_05_)
  );
  NOR _19_ (
    .A(_12_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _20_ (
    .A(out[1]),
    .B(_04_),
    .Y(_07_)
  );
  NOR _21_ (
    .A(_06_),
    .B(_07_),
    .Y(_01_)
  );
  NOR _22_ (
    .A(enable),
    .B(out[0]),
    .Y(_08_)
  );
  NOR _23_ (
    .A(_04_),
    .B(_08_),
    .Y(_00_)
  );
  NOR _24_ (
    .A(out[2]),
    .B(_06_),
    .Y(_09_)
  );
  NAND _25_ (
    .A(out[2]),
    .B(_06_),
    .Y(_10_)
  );
  NOT _26_ (
    .A(_10_),
    .Y(_11_)
  );
  NOR _27_ (
    .A(_09_),
    .B(_11_),
    .Y(_02_)
  );
  (* src = "output/sensorTop.v:14.2-18.19" *)
  DFFSR _28_ (
    .C(clk),
    .D(_00_),
    .Q(out[0]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:14.2-18.19" *)
  DFFSR _29_ (
    .C(clk),
    .D(_01_),
    .Q(out[1]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:14.2-18.19" *)
  DFFSR _30_ (
    .C(clk),
    .D(_02_),
    .Q(out[2]),
    .R(reset),
    .S(1'h0)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\Counter" *)
(* src = "output/sensorTop.v:3.1-19.10" *)
module \$paramod\Counter\bits=s32'00000000000000000000000000001000 (clk, reset, enable, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  (* src = "output/sensorTop.v:9.8-9.11" *)
  input clk;
  (* src = "output/sensorTop.v:11.8-11.14" *)
  input enable;
  (* src = "output/sensorTop.v:13.26-13.29" *)
  output [7:0] out;
  (* src = "output/sensorTop.v:10.8-10.13" *)
  input reset;
  NOT _38_ (
    .A(enable),
    .Y(_08_)
  );
  NOT _39_ (
    .A(out[5]),
    .Y(_09_)
  );
  NOT _40_ (
    .A(out[4]),
    .Y(_10_)
  );
  NOT _41_ (
    .A(out[3]),
    .Y(_11_)
  );
  NOT _42_ (
    .A(out[2]),
    .Y(_12_)
  );
  NOT _43_ (
    .A(out[1]),
    .Y(_13_)
  );
  NOT _44_ (
    .A(out[0]),
    .Y(_14_)
  );
  NOR _45_ (
    .A(_08_),
    .B(_14_),
    .Y(_15_)
  );
  NAND _46_ (
    .A(enable),
    .B(out[0]),
    .Y(_16_)
  );
  NOR _47_ (
    .A(_13_),
    .B(_16_),
    .Y(_17_)
  );
  NOT _48_ (
    .A(_17_),
    .Y(_18_)
  );
  NOR _49_ (
    .A(_12_),
    .B(_18_),
    .Y(_19_)
  );
  NAND _50_ (
    .A(out[2]),
    .B(_17_),
    .Y(_20_)
  );
  NOR _51_ (
    .A(_11_),
    .B(_20_),
    .Y(_21_)
  );
  NOT _52_ (
    .A(_21_),
    .Y(_22_)
  );
  NOR _53_ (
    .A(_10_),
    .B(_22_),
    .Y(_23_)
  );
  NAND _54_ (
    .A(out[4]),
    .B(_21_),
    .Y(_24_)
  );
  NOR _55_ (
    .A(_09_),
    .B(_24_),
    .Y(_25_)
  );
  NAND _56_ (
    .A(out[6]),
    .B(_25_),
    .Y(_26_)
  );
  NOT _57_ (
    .A(_26_),
    .Y(_27_)
  );
  NOR _58_ (
    .A(out[6]),
    .B(_25_),
    .Y(_28_)
  );
  NOR _59_ (
    .A(_27_),
    .B(_28_),
    .Y(_06_)
  );
  NOR _60_ (
    .A(out[5]),
    .B(_23_),
    .Y(_29_)
  );
  NOR _61_ (
    .A(_25_),
    .B(_29_),
    .Y(_05_)
  );
  NOR _62_ (
    .A(out[4]),
    .B(_21_),
    .Y(_30_)
  );
  NOR _63_ (
    .A(_23_),
    .B(_30_),
    .Y(_04_)
  );
  NOR _64_ (
    .A(out[3]),
    .B(_19_),
    .Y(_31_)
  );
  NOR _65_ (
    .A(_21_),
    .B(_31_),
    .Y(_03_)
  );
  NOR _66_ (
    .A(out[2]),
    .B(_17_),
    .Y(_32_)
  );
  NOR _67_ (
    .A(_19_),
    .B(_32_),
    .Y(_02_)
  );
  NOR _68_ (
    .A(out[1]),
    .B(_15_),
    .Y(_33_)
  );
  NOR _69_ (
    .A(_17_),
    .B(_33_),
    .Y(_01_)
  );
  NOR _70_ (
    .A(enable),
    .B(out[0]),
    .Y(_34_)
  );
  NOR _71_ (
    .A(_15_),
    .B(_34_),
    .Y(_00_)
  );
  NAND _72_ (
    .A(out[7]),
    .B(_26_),
    .Y(_35_)
  );
  NOR _73_ (
    .A(out[7]),
    .B(_26_),
    .Y(_36_)
  );
  NOT _74_ (
    .A(_36_),
    .Y(_37_)
  );
  NAND _75_ (
    .A(_35_),
    .B(_37_),
    .Y(_07_)
  );
  (* src = "output/sensorTop.v:14.2-18.19" *)
  DFFSR _76_ (
    .C(clk),
    .D(_00_),
    .Q(out[0]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:14.2-18.19" *)
  DFFSR _77_ (
    .C(clk),
    .D(_01_),
    .Q(out[1]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:14.2-18.19" *)
  DFFSR _78_ (
    .C(clk),
    .D(_02_),
    .Q(out[2]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:14.2-18.19" *)
  DFFSR _79_ (
    .C(clk),
    .D(_03_),
    .Q(out[3]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:14.2-18.19" *)
  DFFSR _80_ (
    .C(clk),
    .D(_04_),
    .Q(out[4]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:14.2-18.19" *)
  DFFSR _81_ (
    .C(clk),
    .D(_05_),
    .Q(out[5]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:14.2-18.19" *)
  DFFSR _82_ (
    .C(clk),
    .D(_06_),
    .Q(out[6]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:14.2-18.19" *)
  DFFSR _83_ (
    .C(clk),
    .D(_07_),
    .Q(out[7]),
    .R(reset),
    .S(1'h0)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\Graycounter" *)
(* src = "output/sensorTop.v:21.1-37.10" *)
module \$paramod\Graycounter\WIDTH=s32'00000000000000000000000000001000 (out, clk, reset);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  (* force_downto = 32'd1 *)
  (* src = "output/sensorTop.v:36.9-36.14|/usr/local/bin/../share/yosys/techmap.v:270.23-270.24" *)
  wire [7:0] _38_;
  (* force_downto = 32'd1 *)
  (* src = "output/sensorTop.v:36.9-36.14|/usr/local/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [7:0] _39_;
  (* src = "output/sensorTop.v:28.8-28.11" *)
  input clk;
  (* src = "output/sensorTop.v:27.28-27.31" *)
  output [7:0] out;
  (* src = "output/sensorTop.v:30.20-30.21" *)
  wire [7:0] q;
  (* src = "output/sensorTop.v:29.8-29.13" *)
  input reset;
  NOT _40_ (
    .A(q[1]),
    .Y(_00_)
  );
  NOT _41_ (
    .A(q[4]),
    .Y(_01_)
  );
  NOT _42_ (
    .A(q[0]),
    .Y(_38_[0])
  );
  NOR _43_ (
    .A(q[1]),
    .B(q[2]),
    .Y(_02_)
  );
  NAND _44_ (
    .A(q[1]),
    .B(q[2]),
    .Y(_03_)
  );
  NOT _45_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _46_ (
    .A(_02_),
    .B(_04_),
    .Y(out[1])
  );
  NOR _47_ (
    .A(q[2]),
    .B(q[3]),
    .Y(_05_)
  );
  NAND _48_ (
    .A(q[2]),
    .B(q[3]),
    .Y(_06_)
  );
  NOT _49_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _50_ (
    .A(_05_),
    .B(_07_),
    .Y(out[2])
  );
  NOR _51_ (
    .A(q[3]),
    .B(q[4]),
    .Y(_08_)
  );
  NAND _52_ (
    .A(q[3]),
    .B(q[4]),
    .Y(_09_)
  );
  NOT _53_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _54_ (
    .A(_08_),
    .B(_10_),
    .Y(out[3])
  );
  NOR _55_ (
    .A(q[4]),
    .B(q[5]),
    .Y(_11_)
  );
  NAND _56_ (
    .A(q[4]),
    .B(q[5]),
    .Y(_12_)
  );
  NOT _57_ (
    .A(_12_),
    .Y(_13_)
  );
  NOR _58_ (
    .A(_11_),
    .B(_13_),
    .Y(out[4])
  );
  NOR _59_ (
    .A(q[5]),
    .B(q[6]),
    .Y(_14_)
  );
  NAND _60_ (
    .A(q[5]),
    .B(q[6]),
    .Y(_15_)
  );
  NOT _61_ (
    .A(_15_),
    .Y(_16_)
  );
  NOR _62_ (
    .A(_14_),
    .B(_16_),
    .Y(out[5])
  );
  NOR _63_ (
    .A(q[6]),
    .B(q[7]),
    .Y(_17_)
  );
  NAND _64_ (
    .A(q[6]),
    .B(q[7]),
    .Y(_18_)
  );
  NOT _65_ (
    .A(_18_),
    .Y(_19_)
  );
  NOR _66_ (
    .A(_17_),
    .B(_19_),
    .Y(out[6])
  );
  NOR _67_ (
    .A(_00_),
    .B(_38_[0]),
    .Y(_20_)
  );
  NAND _68_ (
    .A(q[1]),
    .B(q[0]),
    .Y(_21_)
  );
  NOR _69_ (
    .A(q[1]),
    .B(q[0]),
    .Y(_22_)
  );
  NOR _70_ (
    .A(_20_),
    .B(_22_),
    .Y(out[0])
  );
  NOR _71_ (
    .A(_38_[0]),
    .B(_03_),
    .Y(_23_)
  );
  NOR _72_ (
    .A(q[2]),
    .B(_20_),
    .Y(_24_)
  );
  NOR _73_ (
    .A(_23_),
    .B(_24_),
    .Y(_39_[2])
  );
  NOR _74_ (
    .A(_06_),
    .B(_21_),
    .Y(_25_)
  );
  NAND _75_ (
    .A(q[3]),
    .B(_23_),
    .Y(_26_)
  );
  NOR _76_ (
    .A(q[3]),
    .B(_23_),
    .Y(_27_)
  );
  NOR _77_ (
    .A(_25_),
    .B(_27_),
    .Y(_39_[3])
  );
  NOR _78_ (
    .A(_01_),
    .B(_26_),
    .Y(_28_)
  );
  NAND _79_ (
    .A(q[4]),
    .B(_25_),
    .Y(_29_)
  );
  NOR _80_ (
    .A(q[4]),
    .B(_25_),
    .Y(_30_)
  );
  NOR _81_ (
    .A(_28_),
    .B(_30_),
    .Y(_39_[4])
  );
  NOR _82_ (
    .A(_12_),
    .B(_26_),
    .Y(_31_)
  );
  NOR _83_ (
    .A(q[5]),
    .B(_28_),
    .Y(_32_)
  );
  NOR _84_ (
    .A(_31_),
    .B(_32_),
    .Y(_39_[5])
  );
  NOR _85_ (
    .A(_15_),
    .B(_29_),
    .Y(_33_)
  );
  NOR _86_ (
    .A(q[6]),
    .B(_31_),
    .Y(_34_)
  );
  NOR _87_ (
    .A(_33_),
    .B(_34_),
    .Y(_39_[6])
  );
  NOR _88_ (
    .A(q[7]),
    .B(_33_),
    .Y(_35_)
  );
  NAND _89_ (
    .A(q[7]),
    .B(_33_),
    .Y(_36_)
  );
  NOT _90_ (
    .A(_36_),
    .Y(_37_)
  );
  NOR _91_ (
    .A(_35_),
    .B(_37_),
    .Y(_39_[7])
  );
  (* src = "output/sensorTop.v:32.2-36.15" *)
  DFFSR _92_ (
    .C(clk),
    .D(_38_[0]),
    .Q(q[0]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:32.2-36.15" *)
  DFFSR _93_ (
    .C(clk),
    .D(out[0]),
    .Q(q[1]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:32.2-36.15" *)
  DFFSR _94_ (
    .C(clk),
    .D(_39_[2]),
    .Q(q[2]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:32.2-36.15" *)
  DFFSR _95_ (
    .C(clk),
    .D(_39_[3]),
    .Q(q[3]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:32.2-36.15" *)
  DFFSR _96_ (
    .C(clk),
    .D(_39_[4]),
    .Q(q[4]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:32.2-36.15" *)
  DFFSR _97_ (
    .C(clk),
    .D(_39_[5]),
    .Q(q[5]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:32.2-36.15" *)
  DFFSR _98_ (
    .C(clk),
    .D(_39_[6]),
    .Q(q[6]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:32.2-36.15" *)
  DFFSR _99_ (
    .C(clk),
    .D(_39_[7]),
    .Q(q[7]),
    .R(reset),
    .S(1'h0)
  );
  assign _38_[7:1] = q[7:1];
  assign _39_[1:0] = { out[0], _38_[0] };
  assign out[7] = q[7];
endmodule

(* dynports =  1  *)
(* hdlname = "\\Graycounter_decode" *)
(* src = "output/sensorTop.v:38.1-51.10" *)
module \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000 (in, out);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  (* src = "output/sensorTop.v:43.22-43.24" *)
  input [7:0] in;
  (* src = "output/sensorTop.v:44.28-44.31" *)
  output [7:0] out;
  NOT _051_ (
    .A(in[5]),
    .Y(_000_)
  );
  NOT _052_ (
    .A(in[4]),
    .Y(_001_)
  );
  NOR _053_ (
    .A(in[6]),
    .B(in[7]),
    .Y(_002_)
  );
  NOT _054_ (
    .A(_002_),
    .Y(_003_)
  );
  NAND _055_ (
    .A(in[6]),
    .B(in[7]),
    .Y(_004_)
  );
  NAND _056_ (
    .A(_003_),
    .B(_004_),
    .Y(_005_)
  );
  NOT _057_ (
    .A(_005_),
    .Y(out[6])
  );
  NOR _058_ (
    .A(_000_),
    .B(out[6]),
    .Y(_006_)
  );
  NOR _059_ (
    .A(in[5]),
    .B(_005_),
    .Y(_007_)
  );
  NOR _060_ (
    .A(_006_),
    .B(_007_),
    .Y(_008_)
  );
  NOT _061_ (
    .A(_008_),
    .Y(out[5])
  );
  NAND _062_ (
    .A(in[4]),
    .B(out[5]),
    .Y(_009_)
  );
  NAND _063_ (
    .A(_001_),
    .B(_008_),
    .Y(_010_)
  );
  NAND _064_ (
    .A(_009_),
    .B(_010_),
    .Y(_011_)
  );
  NOT _065_ (
    .A(_011_),
    .Y(out[4])
  );
  NOR _066_ (
    .A(in[4]),
    .B(in[3]),
    .Y(_012_)
  );
  NOT _067_ (
    .A(_012_),
    .Y(_013_)
  );
  NAND _068_ (
    .A(in[4]),
    .B(in[3]),
    .Y(_014_)
  );
  NOT _069_ (
    .A(_014_),
    .Y(_015_)
  );
  NOR _070_ (
    .A(_012_),
    .B(_015_),
    .Y(_016_)
  );
  NAND _071_ (
    .A(_013_),
    .B(_014_),
    .Y(_017_)
  );
  NAND _072_ (
    .A(out[5]),
    .B(_016_),
    .Y(_018_)
  );
  NAND _073_ (
    .A(_008_),
    .B(_017_),
    .Y(_019_)
  );
  NAND _074_ (
    .A(_018_),
    .B(_019_),
    .Y(_020_)
  );
  NOT _075_ (
    .A(_020_),
    .Y(out[3])
  );
  NOR _076_ (
    .A(in[2]),
    .B(in[1]),
    .Y(_021_)
  );
  NOT _077_ (
    .A(_021_),
    .Y(_022_)
  );
  NAND _078_ (
    .A(in[2]),
    .B(in[1]),
    .Y(_023_)
  );
  NOT _079_ (
    .A(_023_),
    .Y(_024_)
  );
  NAND _080_ (
    .A(_022_),
    .B(_023_),
    .Y(_025_)
  );
  NOR _081_ (
    .A(_021_),
    .B(_024_),
    .Y(_026_)
  );
  NOR _082_ (
    .A(_020_),
    .B(_025_),
    .Y(_027_)
  );
  NOR _083_ (
    .A(out[3]),
    .B(_026_),
    .Y(_028_)
  );
  NOR _084_ (
    .A(_027_),
    .B(_028_),
    .Y(out[1])
  );
  NOR _085_ (
    .A(in[3]),
    .B(in[0]),
    .Y(_029_)
  );
  NOT _086_ (
    .A(_029_),
    .Y(_030_)
  );
  NAND _087_ (
    .A(in[3]),
    .B(in[0]),
    .Y(_031_)
  );
  NOT _088_ (
    .A(_031_),
    .Y(_032_)
  );
  NOR _089_ (
    .A(_029_),
    .B(_032_),
    .Y(_033_)
  );
  NAND _090_ (
    .A(_030_),
    .B(_031_),
    .Y(_034_)
  );
  NOR _091_ (
    .A(_025_),
    .B(_033_),
    .Y(_035_)
  );
  NAND _092_ (
    .A(_026_),
    .B(_034_),
    .Y(_036_)
  );
  NOR _093_ (
    .A(_026_),
    .B(_034_),
    .Y(_037_)
  );
  NAND _094_ (
    .A(_025_),
    .B(_033_),
    .Y(_038_)
  );
  NOR _095_ (
    .A(_035_),
    .B(_037_),
    .Y(_039_)
  );
  NAND _096_ (
    .A(_036_),
    .B(_038_),
    .Y(_040_)
  );
  NAND _097_ (
    .A(out[4]),
    .B(_039_),
    .Y(_041_)
  );
  NAND _098_ (
    .A(_011_),
    .B(_040_),
    .Y(_042_)
  );
  NAND _099_ (
    .A(_041_),
    .B(_042_),
    .Y(out[0])
  );
  NOR _100_ (
    .A(in[2]),
    .B(in[3]),
    .Y(_043_)
  );
  NOT _101_ (
    .A(_043_),
    .Y(_044_)
  );
  NAND _102_ (
    .A(in[2]),
    .B(in[3]),
    .Y(_045_)
  );
  NOT _103_ (
    .A(_045_),
    .Y(_046_)
  );
  NOR _104_ (
    .A(_043_),
    .B(_046_),
    .Y(_047_)
  );
  NAND _105_ (
    .A(_044_),
    .B(_045_),
    .Y(_048_)
  );
  NOR _106_ (
    .A(out[4]),
    .B(_047_),
    .Y(_049_)
  );
  NOR _107_ (
    .A(_011_),
    .B(_048_),
    .Y(_050_)
  );
  NOR _108_ (
    .A(_049_),
    .B(_050_),
    .Y(out[2])
  );
  assign out[7] = in[7];
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000000 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c1779105b47a492e95a170d797783cce44f65393\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$49f23997283855e956073715e9c790457ca237f0\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e18f246c33ab633ffe13326277061c2a4bea4859\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$01d0898bce902f5836d8b4eda371e193f827c7d9\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f170633d05c7d88d9b519702452ff0d8454806b1\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$8ab2e34da4daa495af7ab73f48dba38384b33e2d\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$473fd670d14df5d07d633f9b5f53b0bd93106422\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$cb3a276fc3aa7effcaf00414815bb8949ac6550c\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$14fc8c5d7f86599dd8e65a6e2335ba789acfba9b\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e8c4b9ff39a8188230ad9442c8bfd8a7c3f17bfa\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$3e6dc0c2061895833d300200da0bb57d40ee581e\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1850f0e476e36dbff939940fa2bdad9f281d7d2a\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$845266e2c6e6de5a1f0123eb44f450e8ff121ffa\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$afe591ff3282780b012fd10640d2f3a11b58060b\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d26742b91880fed701d9a2b8f2dcbfef8b412a82\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ad26d0315e9fed44e43ef69a73f54d05bfee96c4\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6b654c3306cca70bce345b07a67a0bfc062f966d\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d4124f325554042c7a7e07b30f48865fd3145f17\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$aade62649c3faaa245e79346ff137eaf656af767\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2155719df4bc99dec4198a2aba048f673893fd39\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$98ca0ba6ab19da98097e8e415fb0621f5a269418\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$482b965326f1c4fd7f8a39c6ebc2b9bade0cadf8\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5819e01802525a0550eeb114015576a387d42a09\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ff389c6919825545611e15b61013b489fa53fd2b\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000001 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$203b7c4b259ee952572b87d3e94151b5b02bbd2b\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$60eea0ef90d508652e296c935d9328146bee24e0\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$73d7f99b4fa4122695845d230e6727a72ccea07f\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$94d1449a854e9855e9dea9372cbe13c1e3564ed0\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d59d8d2b961beee020a41f294ec21b0c6b1b05cf\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c434be61c26c6d2c841ab93a1e2aa68b2ee5f295\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b615a4d0007e8336dd625193205ef7f6b979de41\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$82bdabc0d95990f27fe3b8f5375d935ccf8e7181\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5f0394247c4e57ba9305aa88354c66fcb2ffe0b9\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$af55fbf5db5c51bf4af670d9e4f1ef2770443144\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$85a8516862fd031a90dc289bc53232d574114a74\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$004a2d6c4d72b173587acaf41269bb48988ab7d5\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0b8efd2cb5f44937e4399f4125d07a6092c590e9\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$623268c450b40d3966680a3e657e391f2625ff40\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2ada5844b3e99cd0d222e36357dae1d6b7f0c26a\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$dc339be7d61369b137b2db7e495c45d6c26b7027\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$08fbb61fbeee1479bbddb2440780cddb7817a39f\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9d36b3247f0f30d337173068d81b64348d187534\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1b8d27631d17fa0e52e8399f7f3948c6f18592d8\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$51b34220a329433b176be5a45f17bf52adb5b036\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$658863566b96af184339e835ac488dfe9bd95d9c\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2e2515711462623047324ff48ab86c0f2ee91b84\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d02cb906c86cd7507fd02562af19ceeec171f683\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$bb8adab44655490560c3d052a5f7e92b8f1ec706\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000010 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$3157723d492346a7befead03d9df7a61b9ef7ef2\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d24dcb2f1565e44486e005f0baa5f59f1d09a502\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a0a8c696b6c3a69a94219a3a619bb19c7d3da342\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$93a12072cfe69c0c40f9a6fdb95addcd3790875f\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$479bfff085236c83a41b8c4dad5a8c67592459af\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$183c928f06b71821b44ec346947200caceaee395\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$53475543ececb669a499a23168dc608f548b8ff2\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$43805d7668ed07d3dde47b736f95915996c6f6a5\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ee96214573de2a43a910a136401fa5e4001a3d6e\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4eca0d5ca04c17f5bb495d2c40ccd5b7ad624703\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$aa1b1259447d6e397fd5ec9d1756b5c45df93000\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2d7398bc60324bc42c137744e6f1e701f82607bd\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c797236d4e2a8b42a5249860d4f21943fcf16249\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c6b7fb43685e4d5bfd835c2cd369519219e1c232\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$183358489ef7141153b8733ed376b64d93529b1c\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$15e28f39ea9c2b4c42d772ae34f7b601516774e5\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$806ef7cc717a19ecafc9b286c8440c49829369ff\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a6afd538ed6497962188786d3b849ad16565ea7c\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7702132de7367888bdeb7adfc44be6b74adda134\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ff8289dd1cd4f5a78ae6868e0982807935c70e73\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7a13046ec0dd89aca57dd004896f8f67fbc21056\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9c5e874b0aeab1cb0ba520193ea2c7e1deb02a0c\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d76421d0285cfe6be3bcfc2373e32e7979a47021\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ab9d0659e9083d722d5aee56384e1d24454ae7b6\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000011 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0abf079137ff8d553329f823c6f79ee63452d1ca\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e3b935a9ce8c505c97c165a481f25cc46e374d84\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ceeb6bb76c8a1ae66df9df7c4ff59fc95608cddc\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$875a257914cb69b2f82ab43db28212ee02759b2f\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2ade59743e807bfcd78895d45d1d1e7f93306203\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$78e84128ee89c10ee51703c8cb100ebca7970d96\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$07efc1129fff60dd1f92c52626e607e3d00c310e\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b5a35b425e41af6e9c4efdfdafbbbc358060e4c4\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$3d6eabeba7d6e12105ca2ca926716a8b371c2525\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$200a42bb7213f4a98363f04ac406c822dc18be57\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$47765dbe7ea0437b162399ca93b9ff1df4cc9217\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$60a8b1ce29019d832df609e2fe03079687ea5927\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$68dd97a6cbf11acfec5c2f7e86aa3de555ca3434\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$274f4673dab2745eb0842fcb451b84ceff2e8c9c\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$83ac1e023285c9a71a53f259e83b7bcc6c23a86d\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9e3c00a59c3001ecf29019428c302ac5c56fa741\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c8aabe4ef2d430bcef0d6fbc18b7f24300960c44\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e81cd9cba1e7d05fa180f5b7571cfbbd9538e0d3\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6fb630cb74158f0725105873bc0e5ef1e362462f\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b9043acf1dff3ee203106a51e38cf6c67b51adbd\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$216081f28242a087812456025dad0c9cb39cef71\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$385a6c89e6c677e286ed9cdcd2038901a36c509c\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6ac15b97db53cd5b58e8e3c7f6f07fb4b326b89d\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ec1f385f52c462370e3b9759e14e76cb838f7809\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000100 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$411b072b1d6548a3730fe42f78c0e378d37aeed1\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a3886899a86275511fe39330c63e7ddf94233187\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5dc1371902b47a80e952927a340706654f556f3f\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$86d4e28fc644059d7e2145d362b958d51d4d617c\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4c3e58a4a62fafb3fe0902f7ea9947bf968ce4da\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9976f246db3695bf1bfaf9e8308bda0ddf7625a6\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0745564ac814651b2ab580900c51b0d971dc3f07\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$bafbc86a8e5023bdc101c04a7dab38177ad4f082\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$63ddf84fcb6ecf301820e90994088d39a5d4c6c2\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7a00d946c882ac5961529327fccb625c985ccb8f\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$58da5b24159caa5819c9e7e0d6429f5f15f6d97e\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$156d6c38e10d0341cb6f6f5104789f70faddc0b3\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9a65e6cd71005d53c6beaf4494a9013fbf5637f5\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c06eadba4c42ec1bdbc932c9614da9b45dd2f15b\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ca00c45f854a3f97c607b1a7e14972fa9c82b951\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e9167e42782c781365c8b9baf8313fdfc45ca6a2\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a112240b50fbf4e1608de4e77a3f5e2badb44421\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$69a6a705a68ff08e5444ef236ba804d5a674af69\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2171d64d410cf4071f5eeea96fd21d30751b0b46\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6ad86d00c5b7f1d9f221e341c414a9f68b2f5b54\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e783ba2f1d16542c829fe6e6dbf584d3d6a9d22f\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$18561be74e740abb0ac66bd359e3ab5756fb9e64\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$13ab33b35c6472e6e9886c4b0ba4809a49d34f49\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ffde8b247d6af50c8396a6a410d0cf548d242b39\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000101 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$3e49e186a594fe6eed4356a04fcd3b5c95e9e14d\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0552184fdee99217ca88b95207071bffb74d5bf1\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$20014d0860a1a05ffff752466332e7a1875265a6\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c39bd35203e465785b5ec774e45abe7a1e5eb44c\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$bd30f06ef95947b58bc8de26ac2f8ff8b3c823f5\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f1f10318080f5e4d2f8e0a346e7d2ecafbb784f1\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1b3ed518d8707baefe0b5852fdd632356d7ae823\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$298bff7ba96057d89810fc8fbdba14b8ab6b4f75\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d5ed91290bf2d89f0835cc1a3418fb985a8e3321\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$75fdfb6b4a985a701871384f9c4b9757cfd083c1\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$54125cdfefc3c260f0d83474fe2ba707dd33ae0f\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e9e334c5da504c06314d2d04e106aabceb82f34f\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$62f5f9c72b5880a69eb65a9c8b3abcac6753b928\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f660b88ddc7eda599d21ae1431ecabea364c2bfe\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$57ec8426134f1ab4e49696e5887eac06e36c20d9\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1ec7be90266b4abc10611297be06dfc6c54a5905\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0b8cf5cff17dbaeeaba1d08f3766bb469583d4ea\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2c249a99d6a25f961052f3af95c66a80af94b76c\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2e557168e84ec413a77d36c29f5a15d3b4b58d0a\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e4ec3ba47583f2d3d66c3ffd4c20b21683d81845\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$894edf1fc91cd4ca5e43ed653f09015230b9be67\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$3ad1b0f9a1edc5a1b3e0b5fed8eb916e6eee802f\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ff0ff37b7731f6e59fdd6bfe8f1351856a3c2f03\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$3d834ca4e44c329ec2b0c10fe8ec2bc9e1ceccea\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000110 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$84955cb5c164c604cb4fac42e9cca61297237956\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$987ffe4d03086103069b38b920d5bee0ba509af6\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b571b63b381646af67828e5e7b3e6e33782a29b9\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e4833d05ada4ccc233de1f3eac40a901872efba3\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6ad9244f3b995c1568b4fd87b010ea3213ec51cd\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c4982934b75fc8d0f8d589efe393c319e1a9273a\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9ed7a7672f0fff90ffb81a27e9dc5d1e86219a81\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2ce44525c24ad80ad78d82a5cba001b877f26342\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7bdc048022d384229733d29443660851647b61ba\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$94edd4cffc766afc3687cd3f328da2563bf298a6\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$dc4fd506391b694fd21c70157c44ba393cfdedfa\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9f728b3e7240a3805f6109e4d85387a2d9841c40\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ad9089b2f411af59dc6c6309db95a6a21357d4ee\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b8ed5a690bfe1744bcbf9da1ab2f8a1936839fcc\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b297f29b43b76639e225db04db810c9a87521077\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$cad1cfa451422739406e6a02ffe4eb960e97d39f\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9c22d5fe56e186eacdaca86c27ce88ec1022fb96\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$872ac97569b52a7f532b94bab47af17880af2428\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d892981ea2d67e783c6845ef51cfbee74130c0a0\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4fe3bbe6b7aa1bbdd55674c9ae0642063d54c485\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d17ad904f2502c44732becd1206fbb914513b7bf\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ee1b443ce0ebc20492044f1d93c6941bc93888e4\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7adb51540c14b10130100ac800eac133d7b260ba\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a181a2d1b02b177af48e9f0363ee54d23db9a96e\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000111 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$8166d2265140c3672407afbe5c40249f189e2db0\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5dcf9147c18d1128926ce71dda70b841348e9bda\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7a4512c9b0b803d043ab23eedb61e77f36943ffe\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$89a288c4f59380eadefce6133ec26372fdcfab8b\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c5b235c97fc02afb084a0081e651b51cfed85874\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d28066824b79646e07e287fa06ec10795d370b60\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2a21d1145ac29982f3c7e78788658369f6fa667c\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$183d17f4c3ae9e75eac9485dd0e287de4153ae8e\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$806724c50cf57211755daa3d86e8f75180ce2732\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4ebe76dcda7653dc25888a241dea19cea78f575a\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c8fbffdebabd1fbc693cfddcf803428294762758\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$782a20ded8d17483691aa5bd85e9ae168365e0eb\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$bd66b340a5d61a1bf95cf2c387c0468cf4a5d2da\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$eac9d8343578467df8c431b8ee3e3b39b670b29b\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b8ee8211e38721142ae35f285d577676c300b949\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2b09eb99c06007a879330da0efe807811e8596bd\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6af79d7d41e9584cdede1beba68487a342161f9f\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$761ab2c2277819e5d0c987b38150aa84f381e898\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0767d9c0d399f5c684df26501482fd27789c5dac\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$aab511458015338fc8ebd6f8eb9d16141c760ef8\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$35218b83a6c825f6c3062ba8eff0014feb443211\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b9c6b59dd7bf33c8e57984532c1a501f8d9dfa76\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$aa126e917012c8e81a58249907205dcbc18cf4d6\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5595649abe9bd637536bffdf23b61e6505037422\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001000 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6e8bc6debd26f4358885d12fa135f9a81913b1eb\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0b541322a7f3cf1199a5b736868db1f54e39a0c8\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d00e7fc8542e7541b7ae80f8c70695378575a0d6\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ef1ad7cf108bf7c37e3aa0dfb2bf361be26388e4\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$278582c282b074c9c864d7d1c2c61da3bc899956\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$39f9150f67b66ae4be5b7c624ad48732e92261aa\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$17da6427d075e120ac534510ec72f6acf028ec7a\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$374565717dd92c5e213808346985793b7aa2bd6d\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$08e94c3250063f2dd756c00cd76350fd141df26f\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ed7324ed9e810fb7bf79c0df8f7ff81f76fc7014\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ccfa8863ebfd75be6aa229b89632625d1bf8c68e\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0c59e74ae579af3c77f7a1ac34c4ec2eddcf2718\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$05eebc84b29e4486e5dec0e0226432d16914dc79\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a81b56de96048b6a7479a5cd2f039217b571e4d5\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$fcde58b6f2bbfe79be080c62284e7e465d68e4bd\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$05b001e4ee05c68e3dc48af2ee9968743d309da1\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$bcae00f807b11a3bcc683a8c07896d71b2b77d67\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7f61c8548552b05496992abf1858611b8e25c268\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$32f0ab2cf437a2eec033b0d4a5eaa5bd489df4b5\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$05b5a4cd03672a09e9ee3e345072caec6c4218eb\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$54e169f8aef181206c6af7dc03b388f10ed775b9\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$281dc75a5b1b5193b07de00c45bb923afc3849a3\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$8d73bb48c2401420f60b5c2fbe41921b795f11a9\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1bd151eea8da07b60a533fb45a7d506009c08542\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001001 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$90c4acb691e4224d4ca634035e74cd494e4d67af\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6aa2e4a00e3d7826bc9050abc73c8dd134cebafe\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ba56c638388ac97d2de2dafe8f1e51cdbe8651e7\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$282cefeb5c30c539108aa7677acca1ba17b2d791\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2405b8db8472c17480043fe34169358d39fcffe7\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2ab221219a8a23f716bd6365038e8fc77cea70d7\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5cde24da9f1f2f981b2473e468228c8a4fc32045\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0936725936d1d014d45f62ee9a3ed9c0ed0302fe\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6c156d1a4e7d12ac3b252dbebb34546f43520d88\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$516b8c2f130b862847e1bfc916bf07837fc15139\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$fa2c84847c2d551ae77918dd919cbc9f49598a9a\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$22c73d5d60ec3d5e39cd56823af25caec76f68d7\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5ea64fdc5d946bb721402956363d5840d80bcc8f\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9f93e04e53b4f1a76ddc6637bf168bc2666f71c7\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1a159c28a720cd981a031f4583cd998edadf11fb\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$abffe09db575ec4699340db91886ce5cb035cba3\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b3c8f333ffbc57681ac35ef03023fb21f978d1ad\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$362c8512471a0a8e444e3ec8c7d90e4b34486891\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0186082d9ccf9a357d938a95f952fdc83a5418c9\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$3ba56fcaf12890106455b3cb027da67e2e94dff1\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$addfa1996fa92fb61bc70059ad0eb33ab5862860\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c40b535c9d7aff7f76a9034e7d58fde4874408bc\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$fb8c9a34bf03a251ffaef2a1f4680a6f5cb43c71\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$dadc1bbf152bdf2386cdfb382273edb8193987d8\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001010 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$747a30e361bd31162cdc71082c7f15c9d4d9cd2d\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ffee9133c12f24321e0d42319fbe15a50162d498\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ae88ba31ae59c44c844c8bd3244c30c13a343f56\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$59decee455616f114c58249abb7dba084482e85d\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$278b40e73ad49baba1e48a430aef02dabe007352\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5552b7278abca136a22cd6806dec963632153e3c\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$df294364e939b167061c42b37b4e14d7866692c9\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7b2c05b3c4b1533edfc1d17967fb7d246affc38d\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b068226648ad4180cd3a09fa5fc49727badabf56\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9879e2169e7c78a8461e6faf2e9b5f4e6f8babeb\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c3edc7f830b6e61ddb64ea3d4a2ece77b3015467\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d7c2e36528dc34e994ad125eb20a46f49be76f0f\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$12f15bfb697180f459005cfbf283198e7f004d87\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a04d8fcfe9d086fa04c813b38e05cacb222ef41a\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$39ad6a0c14bd0b7ea7621f6429ed5931a698c21e\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$443db24e96db1116d5b8e943c7f636d8bdafe5f2\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5c6d763c55b71db60595c3cb9758c29120d11a61\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$450092b797e7e5573a8b8b87593088f6ec3d9bf4\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a95d3d794a6f28fc0657e50db38eb15c1c2b5c91\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4f00f84b334c42001c496266408306b4fcdaa3c2\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$990557b98fb90d47b70888df04aab20d71fca6a1\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$8ba45614c113454fbbc2570f3e9a74fc943bbdd4\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4072355c81260281be756f83994b8949aeb645d2\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e5a3769f2ddfb3166ea69f43cf6d8cfb0c5fef7e\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001011 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a1f75b5e328a3fe83dc7d010c7ba2d71272962ac\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f8c441848b68409f7c045c98cb67a05799ffce1c\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$066a3667f14d210950ded5c6238511378617f4d0\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$719014f96fe37b6b97dfb448ac221c42e8bfa74a\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c29af8eda6fda912791a4e2be222356e30b6bf5a\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a1be3d6063c3628b82a59541ac3b5e4b50391420\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$826e8a5484a7d52952358425b82b864704982f54\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5d88ca457151c50e3f0d5ba97d45e2795ed06427\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9c08ae960c9df41c58f2011eb6027d148d2509f0\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7bc79231d9c3b0f27592092ce1010ab374bb6601\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c9dc15220708e94ee3dad49d9786d51361d58144\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$accc71bd07de4766ba0b35bda813f92ce962918d\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7d6a52382489975dd76a4a90be00a2b30556ef42\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$bb63b1086ba82eaec5fd2454e2a551abfed19a15\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$485b9fd2889922ea384df8ce79cb26f786391b5f\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4a8d2a3b4f1edbf6dd948bfa37ebe99a4e1057e8\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e672fa6112a95e755c8a233c497cd42a7e9c59bd\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5a0cdaa238cf4ca5a0af7d58b65321df757cb62a\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1a0a1d90e4b503dbbb1944aa7a2b0510aa84529e\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$31902666f8b34e03a4852bbcee5be855921d5503\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b172de0c0c075a7080c4518f1a02f349c63c9e90\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$915c11b0b0aa391ab76825257b4886a6eb1ebade\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b4a14fb225bed939e89c09d07b11a9fda50a01dc\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6c90b428a3ec911f50f99bd86abb032aee741cf9\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001100 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$bbe3e986a96861ede5ff1d3481cfbca3c05f0a64\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$8b1b2c3b3479dce4ab8cc243adf5734a985778a3\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$68b672c38169dd34d1b75e59e71ceb240fe94ef9\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4f1c5e1aefe70a40c5fb0bff3e70689e3c591577\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$db05bfc6e54f54b4868618d0cfe80cb06c35df3e\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$532c4bd215dbf1c77e88f970dd0783c868884cfa\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$08c77e10eb1136831232bf55a28dfde95f18dde9\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0bfac63476fd658463f3b98ec736ae43195bb00f\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$65c9d05a9df9458c323097b1e9cc04af416ecf87\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e6523a4aa23cf8712912f61e812d8e91289eedca\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$19aa88bc61e7883a69064b9b75d98a02e075941a\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$68c932cc45db9186d0f4d937290c8067e8103297\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$104ac5915677b2d8ee381a562c2c0e65857211d9\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$3020e25209101b10475182cea562f9b0a3638cf9\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0529418fdfc6cc423835330dc8428809232bb79b\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e91711ffe2b4b5d2a7735758012b6881faa856e3\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f0457637f63a51089f5a4c05ab56a6bc2dd5d6cb\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$75d30da077000266456acd0c4661955951e0d1b5\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5f03ca86e7e8aaecb0a0c10ada5bcda080148edb\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$25875dab1e73ff0f2f16f162b0e2b330423628c5\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6791cc404dc1320cfccb58aa273066c04a519c15\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$deac8ed67309b26b859e38264c2f65022d372f35\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6a0de5cd5c55fa9f1f7a8cd3fb3ab53c3dc41b34\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2d88d96fd4faf8b86979f2745586af26ca9dccb1\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001101 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0429319b113fe77bee47c08686cac7b6a94277d2\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$646acfeb934fd86a0180a7fb443b37419d8ba174\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5d1aae2d039b54a5c891ecb052d64d2ddee8df3e\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$8c8dac8383658ee29535e3423dceb31fbb98d235\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$eb0dae7215462a466f0952b0a04e24a93a025d42\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$96a2cd7c029cd74103d73e2f46de90f20b6b9c62\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1fc37abd1e31fd08ea66c5d6cb86900a4fef3d6d\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b5fdaec732bd24647632c2e732b3a543b97353a8\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$23231014f1babeedcc9bc1d1c8729ce0b94142dd\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b5fd56671d9b25de084b4c824c5b5fad2fb2f1fa\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$769b67257615219695aa42f4eb0a4f9cafa8b168\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ff4af9495c57ba7be7c4161c07d2f618cfd02b4d\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$894eccba0ae9a395a1685452dbc199aa368af769\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$3ac3743f0a4bb73ef3f7f1a1d4dabf69d2a16fae\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$3cfe9df848d559f8beea68716dc6c59c21b03e4f\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4b46cbb96b415e8870604a258bab08654909c631\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7376bfa2138eae64cdaba68054b9e5f01f3ce18c\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4b7befa6f0766acda836fb960ffdb1da13aad8ce\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$787ff53171db8794ff9c350ad71a1afdc510d0f7\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9b3c2ef8bb02de3280c01c1a176e5cabe02731d0\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f42d53c7a935d0d42b0d45e992a1af46e16251f1\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$330eef13b0bce5204ba064431b0a72b67c58d101\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$37e7bc72f3d173522dcfadd7d83ae1c0d2aefea4\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$36bb176a465719697e88c740789334de7b71bf3f\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001110 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$65533c22f6bdf34c06938898fb36245cf3601cb9\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$07eb617f8e5d8e273cd8064aefbd02c93154c9c0\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$3baa451be99be0e71c20c0329e2618101c0ab8c5\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$fa9bbbe09a80bb0d7b34560f0ce4232ec7060040\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$fbe97f953b682892a8edc651c41e784fea7fd909\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1769562a7087921e9d71b71b513ff260628317b9\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4203dca64e4bd77439eaa40ee103a4ea9f22c12a\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5e1c92a9a6bd3ed5d4e2ba8fc1b20a590cbcd1df\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0710a45239c5a94f9ece3faa5687b147e48a2517\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9e9c058bd4bcb0e87fc47b62e339c53bc2d75296\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b6dd31de21759bd493c3c560a9d01b22be744b63\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$72f95a6131f4b4c2829c7f2573f97ff57629e86d\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$8977596e095a4b67c07a9d647f0367b47ec55936\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$75c28c02f53c5c721be0ea88baeef3a97cf79d85\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$98ce4e463bef7c8c1b3787a5869907db069b055d\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$af9def19f8d68a8e7a73d03521cf11b0e1538974\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1bc823116d60f0c4b9e14cf917e396684860c4a8\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e42db783e084744c199e7c35df1c8a1a87a03600\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5292acca2b3d402aed9fae57958b8db0f88e8309\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ae8ceb7733ad1ed253b07fd8c5f0f0db814e1218\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$14f1b757aa87e9b162809b1823e84258d2103e27\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$287b7bbe2e3f9c987f4c6c03282c27d50d2c2b68\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b0e14ec4dea04bc16f005479c9546d4d769601db\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$75dfbd973b4f008cd0dad00b9ce89a9cd4b9934d\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001111 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a15dfefd6f749424162403f0d7e1ce32a65965a4\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1ddef5e65aa79c2b889612bceb1d0ae1068b110f\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ce996f439f7cad5de0034d58feb9023695f27fa6\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a3719e026ed03f7f29f66f07184ca0848dcfff40\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e049fc7f127a23ecf428261fba027895119aa44d\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$76ad8aefe1f009e5a9d9a894a2d0a84e5956aa77\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$df880b787a233e8fbd4601d8d1ff8d76667ff6b4\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f709bd80e27668b456f6ffee2fb32a13f61b3288\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f3cf39573cdaa23f6f2e0f0ab90c2ba86643d19e\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9cbaef721063646883312b38cb60375897ad3dfb\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$28850f21e0c73e1dce613d558c558862ef1fb79f\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$00de9470db4804ad703f3a427449ccace5dc208f\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5b58aca1af6f8bdce6a5de2e8dbc1bee7aea5df7\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c1504d2114709359e4bdac5143d9ebe4e6839c60\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6a6ed02c7d06a1d17eaf27a66db26f6348af460a\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f673828dac151f2524aa9c43126140681c76ca01\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6966e69d8bfff00542877c7674c83892ae6834c3\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a6f6eab2b5d68ad593cba28e3ee170807120e60e\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d15b7c38cb3a0179a5680aa000e0d256fc9bdbc9\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b942356e51f4457d972cfbb3e5c77cff66d6fe9a\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1a4fa145c73588ee13c328b1ba342668f5c4c937\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$459224f4980ff07f4e6d8b3803d67ae1321e0a58\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d42944f3625ac8d49f06255526e8167fa9013188\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$671aa9668f73ba6724832a787a2abe6c55f26adf\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010000 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c9018b949d96b1de24b4aef289707b57eb508935\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2b42d6d690715b4240c473131bc5b5c1e5f7c003\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$eb36bc382b696e47d16bb33a1015afba0edd039e\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$71fa7864c083b795ad82be17c3edfd71c52728b1\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$58b1d7e2f9f91a9cde57044b584271bf01cb7c75\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a57b110087df268e920ecc31da055648bc7cf2fe\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$601ac6bb73c2b47257d45dd9a0e39e90eae092dc\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e8c52717fd8d2a43b268edbf8eed2412ee014761\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$cd1248072192a5316db956dcf04c8f4af81e7222\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$de3fb4bdd957550580b0c26ed9332b1c52ac31b4\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9e43757e6f3a8f295f3e1cb35d7b2a126392168a\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d7b5c24555231e500da55b2fe9d3d35c8849b05c\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1e86cdb6d89b5e3e2f8e47b34077ed42fefe1879\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$728ee956cb4251c471934c69edf5435f957c8b9b\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$57bf64d414b95aaf625f459db62a195a8ab45d67\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f122ff66e049f8e54ef9495eb082475a9a89b1cd\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a666fd068f4dcfb5970f63964bc1e0e445262039\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$abd23cb75771b062809d12d8cad8eddf81f8461d\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$22946c60536505e59e99f0c4c838dc75f8db2469\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e609ead62b3e93d5e37450b5c42a28daa3a32e8e\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$3ff46d8c1257929945faf597d655afc8575d481d\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$fa66f0f2d344d8a673e091f0af8bd5e88067d509\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5d4e41bd22c41e378b92e40cfd38f4ad90d8b5ac\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$28857a7eb38e4485e1e79f13ea0c52f64981fa5b\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010001 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d615b911623032cc9e8f688c98eff0e2a4ad7d70\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$066429d09da3bb27691aae6db4f562ae1b985a5e\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$46238fb00a6e6ab46296d2c77024d17ed5539bd2\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$95814a6245ab1e64360f3d3c69d3594fbf32b0f9\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6922336d3480b11f9baa2ea28ce54de536fc1478\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f0507748634f68272f5984e4233327563d31b4d3\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2594b280d5c4af2377e159be29bbcf7b35ceeee7\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d1b40c4f306f3ed6d23d9320fdc8608b4d7ef824\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$fa5b472c97ed78a710ee6f9e63f7854c892c3713\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$903ed16f8302d2ab23463f2d88b6c3a3c3e6d30e\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$42e975066d98ad79fd3d6ad71b9bf8bbd696eca1\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7f15feb87ba1d481fb51bdd05012866e93b95b8a\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$574c67ae9e6f7a97c07c4e0a797ef4437ea8051b\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7fcdbd1eb90c373f7fd0b30f8dd509101ac197d9\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d04a7016f52fd93350ca11d0d1280ac72fafd732\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e9643b38fafa271a80ab3658b08225eff300559b\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4f9e30da1a117467385030ebed541d411f170329\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$50f04b8c6638c223cdd71885d3fd71a73e8e1e11\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$fb330974e0200a238f326d305df544918ee4a1f6\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7854b7742fbf4ffea5a0dd89509ab527dc60b792\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$bb93d8a1ac5c740350229fe8c41d440e592dec5f\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c8bcb9911d0dc7251a3083e4c38588ff3e1542bd\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c01dd9d52ce6455b40b124caf78b14122e5a373e\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$192c0738b21dda32a5b25307553aecaf68ef3b9e\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010010 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e2a5c7053e3d3d0c8cf600fca96ac12918d14f6a\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$169ae0e5df54bc032eb39df1d8994a27e2b9ed44\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2af64884ef19704217c3da913716334cadda778d\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$240108b7baff6b8a58433063119e17a5c7026f5b\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b8d6ebd3161679c41141593534211a92e8b0854d\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1af38f47beed9be5c5209662c6ed8904d28a9d1f\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$27cb51d048c1cf570e9eb8429847f9961c2ce0ee\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c761949f603c48ff2a1dfa14700aa938e8c6d21e\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1b5e39758ab73b2a08cc76a9f15f131062fe634a\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$09edb462dda648eff1ec5ec79d4bf1a0c7a89702\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$07ffe951c5b10a1ac21d53aba336f35632193a6e\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9ea7dd303675f22f652bab8a4ae0ad90cb15d001\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$fa507ea0456ed45406b5af56ddbf535d89d86a5e\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9fb77f33e4ad07853da2ee3caf4b88921e7cf15c\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9ee418f4fcd861b63d0d87545e56bedf7734e9a7\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$39b54efdc01cf5052275fdfe20ceac44dd727a73\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b62434d027b11f2a6e11bcecc54a9df30aebfc4a\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6e6e68851c32b1690c00bc3aa8c2a3ad464c4c77\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$042b93abac83f342c48ddd629ef0cfc6a6f49dc2\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6492ad3b01cb674fd5b06a5159ffcf5679215d59\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$8aab70368ef664533eac676a7a3df4c58d0187b8\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$3faeccecc3fb3442cc22ef26092d768b5364bf66\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f7fb0a8e216de8c1f5e13b2b5a274156bf042794\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d0f3a1d120aa71cdcc5b6e37e25df6fc96d1f4b4\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010011 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$580151470af21a5fd5a90f77f2e7a4aed32ef119\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$03522a3dc726e1588e6715540bc6a52f06a83c64\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$471f8057041812a0a1d6dbb66437fd1ee4e8ecc1\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$8465155fea8720618a749236af53eaa272e657ff\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c13a9cf0e2c7082c9fb7d07b490994be5b345893\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ffdbe0bdbaa1d7b7ba003bfbe8ea147bedaf4500\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d288cc2034cc4ea5c88a110d44b880b7c13110cd\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$02c5c830732c6fbe85a807e86b7e0f98a94d1c0d\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c5496029f9b407e866af7913d95ef175468286ec\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$98c70ef13780fcfcfd3ac5fc3a75d017e0be2549\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1b0603d042e1b786f890cb13aad071f0c8ec3be3\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$303b80749d9522b919dae0acb7a53c528b068ad0\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$35ff1cf19a5ef2fbefa42dc270b884a1c4adad42\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$1bba084887d0284ba9f4e257f3ec9d67875bcf66\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c5846d6df07f59ecea4f79fd2059e8546b0fb44c\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$31d075ab7501aefa9c9874cde7bedc7b46809c6c\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$69d4c2ae37db348cb51c68da200f27606a457ed5\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$bc10a5db545b25ccd64fce678797945669b37316\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$86160990a3a8a6678e48d94808db3d0495d5c0c9\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d4d2c93c043e00b64b947be47a2db1662b3bb81e\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f70ef0a43a151711af91d132b1064bfaaf4ea905\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9cc04212dc298f6f48d2153aeca74f0542e3da77\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e06d99429d9a96ff132a033f791774e046ac1644\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f148d8cc208b9a50ac99080c8b077339877da8b3\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010100 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$8b6fe0a805c5ba6d7d55ad543eda5b0a3ffd8657\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$3774e61f81482dd8756fe7fe948037aa483a64c7\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$8db81d61c14d4420da3bd851f7fe7cf4b2a48d7e\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$04ab72452bd65d8944b75f478892773812a03d44\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$5b52aa0cb5a4c5f30a5a1b6f5b238e56f1f51ec3\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$95b3ee2ce7a2091eb2fdbf6e37e34943e52f5ec6\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$98a512533e9a8b7f26d6adbfc899aa608b73f255\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$fc108c60316dca029a7858486322af8b56a64a00\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7ff95f4a7c192bf699e2051771111b1e1db918b7\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$492152bd64368008a685e7071db9e146dfc402d2\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f103065ee8925165b7992d69947df79d489a6607\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b42ca84015f058d8880ce137bc685ffd163b0b53\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2d5692b9b763899b8d8a8350befcb802f0a79c3a\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a636337907abb75935e64853f9dc1a791ed47be2\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$991b24601eb2cb7a06790fc12344887c6bc4b3c4\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$699c7fb89a0df2a7ea7df30e56a9bc64d4d9cce2\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$28553b310d7811c2ab2a1fc59ea0e94b13ac7eb1\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$786de980a520a3324b7f3d627406eb0c3d47ff29\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$bf078a989932f320eafca400f39d625f5a72dde7\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$dab6723c7fae696eba5c8a8af7f22f40dfbf9a15\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$32577fc83a068d78a52f76b29de73bc85fcfe496\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2a0983495b55ab08a0c8a79b2aa83c17eb53f1a3\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e2b222674603e37c8c1fc16a1d5f83311d5f25ce\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f7e6cb86a172f2a899082acc92db3be4357ebdf3\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010101 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b3ee86fb83b1107f6c0d519a51f50d7941f158e5\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$8dd4e7b0a63b851cf09d40c3e6a73373c6f3369e\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$9eb6a2fe2dc71aca764c3c86687594f0c63d49a4\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6131f8dc11b2ad060e5b268e7cdbb47b6cff8134\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$68604947a8b3ce988497df6ae586b79a2891c07b\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$414360eca1aa4c33e9f94327bc33bf17f645a30f\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a958394e60ebd1813ee730019a223f275f354cb5\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6dc1e301adb67aa00b849be49144886bf5eda86c\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$759a0ccccf3e35b19d614f837a2f2850e5c20ffc\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f3dfb7571ecba4be5d889badee4f21d008392557\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d45cb8ae5ca7bbf4e4e58fd8bca00f7891dad09f\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7917e5045397a86be5e7192cd484771eafd2e2ae\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a59dfbd6d626a3eaf8a3384d96da77225eff6708\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b68dc0de83a7b58904580404709f90fe46d84c1f\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$6a2b4b07519c5fbae99e4fa83421bba477ab8151\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e77e43b1fe6f444ecdcf8fc76f12625401c49b65\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2f10279d2c2898975dcebe58d3f689a0ddd3e414\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4b3222d112b625245bddf927690904d7d313701d\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b1b10fef70ab096fefc931bda0911f0acaeb3c05\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$541911b511dad51a80ae92123d691435a03d2b00\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$96dab45397d2e2bee0fe71c439e0497b3e66f282\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0aebb6fe1ddbc44cd1b1a3257d27f991be388040\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2b236d1805a3b53cacc163683c8312851678371f\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$0882c047ea8e09c58730536425ba3e11a37bd6f5\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010110 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$769ed76ab24430d36dc35b8063347a93a66b4911\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f0f955d17dc64803ca2bf81b3c2e1cbf0549a6f1\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$880b0cd54d7ce17e394dd7fb05ef5eb4d7b0a03a\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4c6d710cb154dff50925d81567d3b18b9bcc69a2\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$cede1a3eabea0f5c3e1c118123cdae81ea115cad\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$011b031488263cb1341bc3cbf094332c58f24d84\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a5657ecc8ffaac561a5531973e69108c2e5f3246\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$512a01de5c19a54c389c116c5f71abfe0699e2f8\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$be64a32d4d06f235af4266fabe0dae6681c69e70\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7ba3e790d3f34f689bcb9267414e1f00e0317891\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$a0cfcf512e05105fd6f8e22414539e88d916dd09\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$90bdf0303b6b41a4bdc95d1288c76a7b83e30f80\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ee484e122f443aa76955655f716bf4b20328f231\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$cd4f7a0c4e78c644bd392d28a57b4d91ba3a37c3\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$23e6440b70477a3b85ec011f1a0060f73d8dad10\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$89a36bbc87fcc34fe961d52306fac0e2e9209f50\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d7c757cbca288f0822cbb86e954eafcf144180e5\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$ea5d2cd4234897f6258187d87175a86776dc64c4\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2474b3329afefe42151692a67d0d800a2db4c73b\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$612ab8d3c383fef8d4a805323cc68bfc62398e18\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c0f43a799ad175791d1828eff10d197ab1de3699\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c6343318907fc8d75b3ec018dd717946cad31b56\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f54988d4ac9c4d537a74ef0a364c7d6161b4b6f6\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$685719d1b1e3c88a2bd6debec8f0729fed95a79f\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:289.1-322.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010111 (ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:297.8-297.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:304.46-304.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:301.14-301.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:298.8-298.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:299.8-299.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:300.8-300.12" *)
  input READ;
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$21609cfbd927f4e85ecfdb11f1cd3c4543f30aa8\PIXEL_SENSOR  \genblk1[0].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[7:0]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$03bd2ee9c4c1d91d94a2bd9fc344c1bcb1cbfca6\PIXEL_SENSOR  \genblk1[10].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[87:80]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$de5dec91ed5dce14ced1c7e2d37fd89028c5f91e\PIXEL_SENSOR  \genblk1[11].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[95:88]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$e5618b7180f915e3eae7909276632212eadd227a\PIXEL_SENSOR  \genblk1[12].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[103:96]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$d6e6c19cc2fa7a9783f31ea463a516b3bc483b50\PIXEL_SENSOR  \genblk1[13].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[111:104]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$18e5a9a2bcb7da2bfbcae665db08e109405b4cad\PIXEL_SENSOR  \genblk1[14].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[119:112]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f007c2cf40f0b7c566b6a163799fab2da1bf3bd0\PIXEL_SENSOR  \genblk1[15].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[127:120]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2fd6d3f4d59a1279088552194ee282c305ae37f6\PIXEL_SENSOR  \genblk1[16].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[135:128]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$b68c567c081626a0679ad020fb6be62b124689b0\PIXEL_SENSOR  \genblk1[17].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[143:136]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c88ec414be48c59962e4728c8ec0f338ac1a2b89\PIXEL_SENSOR  \genblk1[18].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[151:144]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f5baa1aa203079bb611892a4e4767b1306f6406a\PIXEL_SENSOR  \genblk1[19].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[159:152]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$8a9ba0b52767132e9f4a0f7660ddb2a9ef52adca\PIXEL_SENSOR  \genblk1[1].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[15:8]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c2788eca168c655a24b734e5036f3502a38304c9\PIXEL_SENSOR  \genblk1[20].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[167:160]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$df5e1dd0d3b00c29fde3c123feab25e00b87cc72\PIXEL_SENSOR  \genblk1[21].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[175:168]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$816d5886d5df981a8f7821c45c8de844cfa67004\PIXEL_SENSOR  \genblk1[22].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[183:176]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7cf6d74025f35bdcc590a3c21bed7ef13fa1c1c2\PIXEL_SENSOR  \genblk1[23].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[191:184]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f4b35423f2852033aabc4d3368b767ffbc6ca7f7\PIXEL_SENSOR  \genblk1[2].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[23:16]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$bcc338d44eb39c0cfba27173beae6b1cdde04dd7\PIXEL_SENSOR  \genblk1[3].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[31:24]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$4f80dc607669a0c946bf464070c299b5d0e60eb4\PIXEL_SENSOR  \genblk1[4].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[39:32]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$f8951e4f4fbda94600fd94006676d75cfee5e7c2\PIXEL_SENSOR  \genblk1[5].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[47:40]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$7125f60791f9b5fde74ad960c95abc248ba256b4\PIXEL_SENSOR  \genblk1[6].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[55:48]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$93791fde9f41cf1aa7b46feee3a52f5ff93d0cbd\PIXEL_SENSOR  \genblk1[7].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[63:56]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$2d706cd3af41ae36b925481ed0ec026875df3a49\PIXEL_SENSOR  \genblk1[8].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[71:64]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:312.6-319.5" *)
  \$paramod$c571936b24f4299d9dff3a090133bc68a563b3ed\PIXEL_SENSOR  \genblk1[9].ps  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA(DATA_OUT[79:72]),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\Register" *)
(* src = "output/sensorTop.v:356.1-372.10" *)
module \$paramod\Register\bits=s32'00000000000000000000000001000000 (set, reset, data_in, data_out);
  (* src = "output/sensorTop.v:365.21-365.28" *)
  input [63:0] data_in;
  (* src = "output/sensorTop.v:366.26-366.34" *)
  output [63:0] data_out;
  (* src = "output/sensorTop.v:363.8-363.13" *)
  input reset;
  (* src = "output/sensorTop.v:362.8-362.11" *)
  input set;
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _00_ (
    .C(set),
    .D(data_in[0]),
    .Q(data_out[0]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _01_ (
    .C(set),
    .D(data_in[1]),
    .Q(data_out[1]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _02_ (
    .C(set),
    .D(data_in[2]),
    .Q(data_out[2]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _03_ (
    .C(set),
    .D(data_in[3]),
    .Q(data_out[3]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _04_ (
    .C(set),
    .D(data_in[4]),
    .Q(data_out[4]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _05_ (
    .C(set),
    .D(data_in[5]),
    .Q(data_out[5]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _06_ (
    .C(set),
    .D(data_in[6]),
    .Q(data_out[6]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _07_ (
    .C(set),
    .D(data_in[7]),
    .Q(data_out[7]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _08_ (
    .C(set),
    .D(data_in[8]),
    .Q(data_out[8]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _09_ (
    .C(set),
    .D(data_in[9]),
    .Q(data_out[9]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _10_ (
    .C(set),
    .D(data_in[10]),
    .Q(data_out[10]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _11_ (
    .C(set),
    .D(data_in[11]),
    .Q(data_out[11]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _12_ (
    .C(set),
    .D(data_in[12]),
    .Q(data_out[12]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _13_ (
    .C(set),
    .D(data_in[13]),
    .Q(data_out[13]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _14_ (
    .C(set),
    .D(data_in[14]),
    .Q(data_out[14]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _15_ (
    .C(set),
    .D(data_in[15]),
    .Q(data_out[15]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _16_ (
    .C(set),
    .D(data_in[16]),
    .Q(data_out[16]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _17_ (
    .C(set),
    .D(data_in[17]),
    .Q(data_out[17]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _18_ (
    .C(set),
    .D(data_in[18]),
    .Q(data_out[18]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _19_ (
    .C(set),
    .D(data_in[19]),
    .Q(data_out[19]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _20_ (
    .C(set),
    .D(data_in[20]),
    .Q(data_out[20]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _21_ (
    .C(set),
    .D(data_in[21]),
    .Q(data_out[21]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _22_ (
    .C(set),
    .D(data_in[22]),
    .Q(data_out[22]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _23_ (
    .C(set),
    .D(data_in[23]),
    .Q(data_out[23]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _24_ (
    .C(set),
    .D(data_in[24]),
    .Q(data_out[24]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _25_ (
    .C(set),
    .D(data_in[25]),
    .Q(data_out[25]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _26_ (
    .C(set),
    .D(data_in[26]),
    .Q(data_out[26]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _27_ (
    .C(set),
    .D(data_in[27]),
    .Q(data_out[27]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _28_ (
    .C(set),
    .D(data_in[28]),
    .Q(data_out[28]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _29_ (
    .C(set),
    .D(data_in[29]),
    .Q(data_out[29]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _30_ (
    .C(set),
    .D(data_in[30]),
    .Q(data_out[30]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _31_ (
    .C(set),
    .D(data_in[31]),
    .Q(data_out[31]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _32_ (
    .C(set),
    .D(data_in[32]),
    .Q(data_out[32]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _33_ (
    .C(set),
    .D(data_in[33]),
    .Q(data_out[33]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _34_ (
    .C(set),
    .D(data_in[34]),
    .Q(data_out[34]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _35_ (
    .C(set),
    .D(data_in[35]),
    .Q(data_out[35]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _36_ (
    .C(set),
    .D(data_in[36]),
    .Q(data_out[36]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _37_ (
    .C(set),
    .D(data_in[37]),
    .Q(data_out[37]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _38_ (
    .C(set),
    .D(data_in[38]),
    .Q(data_out[38]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _39_ (
    .C(set),
    .D(data_in[39]),
    .Q(data_out[39]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _40_ (
    .C(set),
    .D(data_in[40]),
    .Q(data_out[40]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _41_ (
    .C(set),
    .D(data_in[41]),
    .Q(data_out[41]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _42_ (
    .C(set),
    .D(data_in[42]),
    .Q(data_out[42]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _43_ (
    .C(set),
    .D(data_in[43]),
    .Q(data_out[43]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _44_ (
    .C(set),
    .D(data_in[44]),
    .Q(data_out[44]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _45_ (
    .C(set),
    .D(data_in[45]),
    .Q(data_out[45]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _46_ (
    .C(set),
    .D(data_in[46]),
    .Q(data_out[46]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _47_ (
    .C(set),
    .D(data_in[47]),
    .Q(data_out[47]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _48_ (
    .C(set),
    .D(data_in[48]),
    .Q(data_out[48]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _49_ (
    .C(set),
    .D(data_in[49]),
    .Q(data_out[49]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _50_ (
    .C(set),
    .D(data_in[50]),
    .Q(data_out[50]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _51_ (
    .C(set),
    .D(data_in[51]),
    .Q(data_out[51]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _52_ (
    .C(set),
    .D(data_in[52]),
    .Q(data_out[52]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _53_ (
    .C(set),
    .D(data_in[53]),
    .Q(data_out[53]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _54_ (
    .C(set),
    .D(data_in[54]),
    .Q(data_out[54]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _55_ (
    .C(set),
    .D(data_in[55]),
    .Q(data_out[55]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _56_ (
    .C(set),
    .D(data_in[56]),
    .Q(data_out[56]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _57_ (
    .C(set),
    .D(data_in[57]),
    .Q(data_out[57]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _58_ (
    .C(set),
    .D(data_in[58]),
    .Q(data_out[58]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _59_ (
    .C(set),
    .D(data_in[59]),
    .Q(data_out[59]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _60_ (
    .C(set),
    .D(data_in[60]),
    .Q(data_out[60]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _61_ (
    .C(set),
    .D(data_in[61]),
    .Q(data_out[61]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _62_ (
    .C(set),
    .D(data_in[62]),
    .Q(data_out[62]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:367.2-371.24" *)
  DFFSR _63_ (
    .C(set),
    .D(data_in[63]),
    .Q(data_out[63]),
    .R(reset),
    .S(1'h0)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\Selector" *)
(* src = "output/sensorTop.v:53.1-73.10" *)
module \$paramod\Selector\length=s32'00000000000000000000000000000100 (clk, inputEnable, outputEnable, reset, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  (* src = "output/sensorTop.v:60.8-60.11" *)
  input clk;
  (* src = "output/sensorTop.v:61.8-61.19" *)
  input inputEnable;
  (* src = "output/sensorTop.v:66.21-66.30" *)
  wire [3:0] local_out;
  (* src = "output/sensorTop.v:65.29-65.32" *)
  output [3:0] out;
  (* src = "output/sensorTop.v:62.8-62.20" *)
  input outputEnable;
  (* src = "output/sensorTop.v:63.8-63.13" *)
  input reset;
  NOT _16_ (
    .A(inputEnable),
    .Y(_04_)
  );
  NOT _17_ (
    .A(local_out[0]),
    .Y(_05_)
  );
  NAND _18_ (
    .A(local_out[1]),
    .B(inputEnable),
    .Y(_06_)
  );
  NAND _19_ (
    .A(local_out[2]),
    .B(_04_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_02_)
  );
  NAND _21_ (
    .A(inputEnable),
    .B(local_out[0]),
    .Y(_08_)
  );
  NAND _22_ (
    .A(local_out[1]),
    .B(_04_),
    .Y(_09_)
  );
  NAND _23_ (
    .A(_08_),
    .B(_09_),
    .Y(_01_)
  );
  NOR _24_ (
    .A(inputEnable),
    .B(_05_),
    .Y(_00_)
  );
  NAND _25_ (
    .A(local_out[0]),
    .B(outputEnable),
    .Y(_10_)
  );
  NOT _26_ (
    .A(_10_),
    .Y(out[0])
  );
  NAND _27_ (
    .A(local_out[1]),
    .B(outputEnable),
    .Y(_11_)
  );
  NOT _28_ (
    .A(_11_),
    .Y(out[1])
  );
  NAND _29_ (
    .A(local_out[2]),
    .B(outputEnable),
    .Y(_12_)
  );
  NOT _30_ (
    .A(_12_),
    .Y(out[2])
  );
  NAND _31_ (
    .A(outputEnable),
    .B(local_out[3]),
    .Y(_13_)
  );
  NOT _32_ (
    .A(_13_),
    .Y(out[3])
  );
  NAND _33_ (
    .A(local_out[2]),
    .B(inputEnable),
    .Y(_14_)
  );
  NAND _34_ (
    .A(_04_),
    .B(local_out[3]),
    .Y(_15_)
  );
  NAND _35_ (
    .A(_14_),
    .B(_15_),
    .Y(_03_)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _36_ (
    .C(clk),
    .D(_00_),
    .Q(local_out[0]),
    .R(1'h0),
    .S(reset)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _37_ (
    .C(clk),
    .D(_01_),
    .Q(local_out[1]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _38_ (
    .C(clk),
    .D(_02_),
    .Q(local_out[2]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _39_ (
    .C(clk),
    .D(_03_),
    .Q(local_out[3]),
    .R(reset),
    .S(1'h0)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\Selector" *)
(* src = "output/sensorTop.v:53.1-73.10" *)
module \$paramod\Selector\length=s32'00000000000000000000000000011000 (clk, inputEnable, outputEnable, reset, out);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  (* src = "output/sensorTop.v:60.8-60.11" *)
  input clk;
  (* src = "output/sensorTop.v:61.8-61.19" *)
  input inputEnable;
  (* src = "output/sensorTop.v:66.21-66.30" *)
  wire [23:0] local_out;
  (* src = "output/sensorTop.v:65.29-65.32" *)
  output [23:0] out;
  (* src = "output/sensorTop.v:62.8-62.20" *)
  input outputEnable;
  (* src = "output/sensorTop.v:63.8-63.13" *)
  input reset;
  NOT _096_ (
    .A(inputEnable),
    .Y(_078_)
  );
  NOT _097_ (
    .A(local_out[0]),
    .Y(_079_)
  );
  NAND _098_ (
    .A(local_out[21]),
    .B(inputEnable),
    .Y(_080_)
  );
  NAND _099_ (
    .A(local_out[22]),
    .B(_078_),
    .Y(_081_)
  );
  NAND _100_ (
    .A(_080_),
    .B(_081_),
    .Y(_022_)
  );
  NAND _101_ (
    .A(inputEnable),
    .B(local_out[20]),
    .Y(_082_)
  );
  NAND _102_ (
    .A(local_out[21]),
    .B(_078_),
    .Y(_083_)
  );
  NAND _103_ (
    .A(_082_),
    .B(_083_),
    .Y(_021_)
  );
  NAND _104_ (
    .A(inputEnable),
    .B(local_out[19]),
    .Y(_084_)
  );
  NAND _105_ (
    .A(_078_),
    .B(local_out[20]),
    .Y(_085_)
  );
  NAND _106_ (
    .A(_084_),
    .B(_085_),
    .Y(_020_)
  );
  NAND _107_ (
    .A(inputEnable),
    .B(local_out[18]),
    .Y(_086_)
  );
  NAND _108_ (
    .A(_078_),
    .B(local_out[19]),
    .Y(_087_)
  );
  NAND _109_ (
    .A(_086_),
    .B(_087_),
    .Y(_019_)
  );
  NAND _110_ (
    .A(inputEnable),
    .B(local_out[17]),
    .Y(_088_)
  );
  NAND _111_ (
    .A(_078_),
    .B(local_out[18]),
    .Y(_089_)
  );
  NAND _112_ (
    .A(_088_),
    .B(_089_),
    .Y(_018_)
  );
  NAND _113_ (
    .A(inputEnable),
    .B(local_out[16]),
    .Y(_090_)
  );
  NAND _114_ (
    .A(_078_),
    .B(local_out[17]),
    .Y(_091_)
  );
  NAND _115_ (
    .A(_090_),
    .B(_091_),
    .Y(_017_)
  );
  NAND _116_ (
    .A(inputEnable),
    .B(local_out[15]),
    .Y(_092_)
  );
  NAND _117_ (
    .A(_078_),
    .B(local_out[16]),
    .Y(_093_)
  );
  NAND _118_ (
    .A(_092_),
    .B(_093_),
    .Y(_016_)
  );
  NAND _119_ (
    .A(inputEnable),
    .B(local_out[14]),
    .Y(_094_)
  );
  NAND _120_ (
    .A(_078_),
    .B(local_out[15]),
    .Y(_095_)
  );
  NAND _121_ (
    .A(_094_),
    .B(_095_),
    .Y(_015_)
  );
  NAND _122_ (
    .A(inputEnable),
    .B(local_out[13]),
    .Y(_024_)
  );
  NAND _123_ (
    .A(_078_),
    .B(local_out[14]),
    .Y(_025_)
  );
  NAND _124_ (
    .A(_024_),
    .B(_025_),
    .Y(_014_)
  );
  NAND _125_ (
    .A(inputEnable),
    .B(local_out[12]),
    .Y(_026_)
  );
  NAND _126_ (
    .A(_078_),
    .B(local_out[13]),
    .Y(_027_)
  );
  NAND _127_ (
    .A(_026_),
    .B(_027_),
    .Y(_013_)
  );
  NAND _128_ (
    .A(inputEnable),
    .B(local_out[11]),
    .Y(_028_)
  );
  NAND _129_ (
    .A(_078_),
    .B(local_out[12]),
    .Y(_029_)
  );
  NAND _130_ (
    .A(_028_),
    .B(_029_),
    .Y(_012_)
  );
  NAND _131_ (
    .A(inputEnable),
    .B(local_out[10]),
    .Y(_030_)
  );
  NAND _132_ (
    .A(_078_),
    .B(local_out[11]),
    .Y(_031_)
  );
  NAND _133_ (
    .A(_030_),
    .B(_031_),
    .Y(_011_)
  );
  NAND _134_ (
    .A(inputEnable),
    .B(local_out[9]),
    .Y(_032_)
  );
  NAND _135_ (
    .A(_078_),
    .B(local_out[10]),
    .Y(_033_)
  );
  NAND _136_ (
    .A(_032_),
    .B(_033_),
    .Y(_010_)
  );
  NAND _137_ (
    .A(inputEnable),
    .B(local_out[8]),
    .Y(_034_)
  );
  NAND _138_ (
    .A(_078_),
    .B(local_out[9]),
    .Y(_035_)
  );
  NAND _139_ (
    .A(_034_),
    .B(_035_),
    .Y(_009_)
  );
  NAND _140_ (
    .A(inputEnable),
    .B(local_out[7]),
    .Y(_036_)
  );
  NAND _141_ (
    .A(_078_),
    .B(local_out[8]),
    .Y(_037_)
  );
  NAND _142_ (
    .A(_036_),
    .B(_037_),
    .Y(_008_)
  );
  NAND _143_ (
    .A(inputEnable),
    .B(local_out[6]),
    .Y(_038_)
  );
  NAND _144_ (
    .A(_078_),
    .B(local_out[7]),
    .Y(_039_)
  );
  NAND _145_ (
    .A(_038_),
    .B(_039_),
    .Y(_007_)
  );
  NAND _146_ (
    .A(inputEnable),
    .B(local_out[5]),
    .Y(_040_)
  );
  NAND _147_ (
    .A(_078_),
    .B(local_out[6]),
    .Y(_041_)
  );
  NAND _148_ (
    .A(_040_),
    .B(_041_),
    .Y(_006_)
  );
  NAND _149_ (
    .A(inputEnable),
    .B(local_out[4]),
    .Y(_042_)
  );
  NAND _150_ (
    .A(_078_),
    .B(local_out[5]),
    .Y(_043_)
  );
  NAND _151_ (
    .A(_042_),
    .B(_043_),
    .Y(_005_)
  );
  NAND _152_ (
    .A(inputEnable),
    .B(local_out[3]),
    .Y(_044_)
  );
  NAND _153_ (
    .A(_078_),
    .B(local_out[4]),
    .Y(_045_)
  );
  NAND _154_ (
    .A(_044_),
    .B(_045_),
    .Y(_004_)
  );
  NAND _155_ (
    .A(inputEnable),
    .B(local_out[2]),
    .Y(_046_)
  );
  NAND _156_ (
    .A(_078_),
    .B(local_out[3]),
    .Y(_047_)
  );
  NAND _157_ (
    .A(_046_),
    .B(_047_),
    .Y(_003_)
  );
  NAND _158_ (
    .A(inputEnable),
    .B(local_out[1]),
    .Y(_048_)
  );
  NAND _159_ (
    .A(_078_),
    .B(local_out[2]),
    .Y(_049_)
  );
  NAND _160_ (
    .A(_048_),
    .B(_049_),
    .Y(_002_)
  );
  NAND _161_ (
    .A(inputEnable),
    .B(local_out[0]),
    .Y(_050_)
  );
  NAND _162_ (
    .A(_078_),
    .B(local_out[1]),
    .Y(_051_)
  );
  NAND _163_ (
    .A(_050_),
    .B(_051_),
    .Y(_001_)
  );
  NOR _164_ (
    .A(inputEnable),
    .B(_079_),
    .Y(_000_)
  );
  NAND _165_ (
    .A(local_out[0]),
    .B(outputEnable),
    .Y(_052_)
  );
  NOT _166_ (
    .A(_052_),
    .Y(out[0])
  );
  NAND _167_ (
    .A(local_out[1]),
    .B(outputEnable),
    .Y(_053_)
  );
  NOT _168_ (
    .A(_053_),
    .Y(out[1])
  );
  NAND _169_ (
    .A(local_out[2]),
    .B(outputEnable),
    .Y(_054_)
  );
  NOT _170_ (
    .A(_054_),
    .Y(out[2])
  );
  NAND _171_ (
    .A(local_out[3]),
    .B(outputEnable),
    .Y(_055_)
  );
  NOT _172_ (
    .A(_055_),
    .Y(out[3])
  );
  NAND _173_ (
    .A(local_out[4]),
    .B(outputEnable),
    .Y(_056_)
  );
  NOT _174_ (
    .A(_056_),
    .Y(out[4])
  );
  NAND _175_ (
    .A(local_out[5]),
    .B(outputEnable),
    .Y(_057_)
  );
  NOT _176_ (
    .A(_057_),
    .Y(out[5])
  );
  NAND _177_ (
    .A(local_out[6]),
    .B(outputEnable),
    .Y(_058_)
  );
  NOT _178_ (
    .A(_058_),
    .Y(out[6])
  );
  NAND _179_ (
    .A(local_out[7]),
    .B(outputEnable),
    .Y(_059_)
  );
  NOT _180_ (
    .A(_059_),
    .Y(out[7])
  );
  NAND _181_ (
    .A(local_out[8]),
    .B(outputEnable),
    .Y(_060_)
  );
  NOT _182_ (
    .A(_060_),
    .Y(out[8])
  );
  NAND _183_ (
    .A(local_out[9]),
    .B(outputEnable),
    .Y(_061_)
  );
  NOT _184_ (
    .A(_061_),
    .Y(out[9])
  );
  NAND _185_ (
    .A(local_out[10]),
    .B(outputEnable),
    .Y(_062_)
  );
  NOT _186_ (
    .A(_062_),
    .Y(out[10])
  );
  NAND _187_ (
    .A(local_out[11]),
    .B(outputEnable),
    .Y(_063_)
  );
  NOT _188_ (
    .A(_063_),
    .Y(out[11])
  );
  NAND _189_ (
    .A(local_out[12]),
    .B(outputEnable),
    .Y(_064_)
  );
  NOT _190_ (
    .A(_064_),
    .Y(out[12])
  );
  NAND _191_ (
    .A(local_out[13]),
    .B(outputEnable),
    .Y(_065_)
  );
  NOT _192_ (
    .A(_065_),
    .Y(out[13])
  );
  NAND _193_ (
    .A(local_out[14]),
    .B(outputEnable),
    .Y(_066_)
  );
  NOT _194_ (
    .A(_066_),
    .Y(out[14])
  );
  NAND _195_ (
    .A(local_out[15]),
    .B(outputEnable),
    .Y(_067_)
  );
  NOT _196_ (
    .A(_067_),
    .Y(out[15])
  );
  NAND _197_ (
    .A(local_out[16]),
    .B(outputEnable),
    .Y(_068_)
  );
  NOT _198_ (
    .A(_068_),
    .Y(out[16])
  );
  NAND _199_ (
    .A(local_out[17]),
    .B(outputEnable),
    .Y(_069_)
  );
  NOT _200_ (
    .A(_069_),
    .Y(out[17])
  );
  NAND _201_ (
    .A(local_out[18]),
    .B(outputEnable),
    .Y(_070_)
  );
  NOT _202_ (
    .A(_070_),
    .Y(out[18])
  );
  NAND _203_ (
    .A(local_out[19]),
    .B(outputEnable),
    .Y(_071_)
  );
  NOT _204_ (
    .A(_071_),
    .Y(out[19])
  );
  NAND _205_ (
    .A(local_out[20]),
    .B(outputEnable),
    .Y(_072_)
  );
  NOT _206_ (
    .A(_072_),
    .Y(out[20])
  );
  NAND _207_ (
    .A(local_out[21]),
    .B(outputEnable),
    .Y(_073_)
  );
  NOT _208_ (
    .A(_073_),
    .Y(out[21])
  );
  NAND _209_ (
    .A(local_out[22]),
    .B(outputEnable),
    .Y(_074_)
  );
  NOT _210_ (
    .A(_074_),
    .Y(out[22])
  );
  NAND _211_ (
    .A(outputEnable),
    .B(local_out[23]),
    .Y(_075_)
  );
  NOT _212_ (
    .A(_075_),
    .Y(out[23])
  );
  NAND _213_ (
    .A(local_out[22]),
    .B(inputEnable),
    .Y(_076_)
  );
  NAND _214_ (
    .A(_078_),
    .B(local_out[23]),
    .Y(_077_)
  );
  NAND _215_ (
    .A(_076_),
    .B(_077_),
    .Y(_023_)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _216_ (
    .C(clk),
    .D(_000_),
    .Q(local_out[0]),
    .R(1'h0),
    .S(reset)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _217_ (
    .C(clk),
    .D(_001_),
    .Q(local_out[1]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _218_ (
    .C(clk),
    .D(_002_),
    .Q(local_out[2]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _219_ (
    .C(clk),
    .D(_003_),
    .Q(local_out[3]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _220_ (
    .C(clk),
    .D(_004_),
    .Q(local_out[4]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _221_ (
    .C(clk),
    .D(_005_),
    .Q(local_out[5]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _222_ (
    .C(clk),
    .D(_006_),
    .Q(local_out[6]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _223_ (
    .C(clk),
    .D(_007_),
    .Q(local_out[7]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _224_ (
    .C(clk),
    .D(_008_),
    .Q(local_out[8]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _225_ (
    .C(clk),
    .D(_009_),
    .Q(local_out[9]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _226_ (
    .C(clk),
    .D(_010_),
    .Q(local_out[10]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _227_ (
    .C(clk),
    .D(_011_),
    .Q(local_out[11]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _228_ (
    .C(clk),
    .D(_012_),
    .Q(local_out[12]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _229_ (
    .C(clk),
    .D(_013_),
    .Q(local_out[13]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _230_ (
    .C(clk),
    .D(_014_),
    .Q(local_out[14]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _231_ (
    .C(clk),
    .D(_015_),
    .Q(local_out[15]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _232_ (
    .C(clk),
    .D(_016_),
    .Q(local_out[16]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _233_ (
    .C(clk),
    .D(_017_),
    .Q(local_out[17]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _234_ (
    .C(clk),
    .D(_018_),
    .Q(local_out[18]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _235_ (
    .C(clk),
    .D(_019_),
    .Q(local_out[19]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _236_ (
    .C(clk),
    .D(_020_),
    .Q(local_out[20]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _237_ (
    .C(clk),
    .D(_021_),
    .Q(local_out[21]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _238_ (
    .C(clk),
    .D(_022_),
    .Q(local_out[22]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:68.2-72.32" *)
  DFFSR _239_ (
    .C(clk),
    .D(_023_),
    .Q(local_out[23]),
    .R(reset),
    .S(1'h0)
  );
endmodule

(* dynports =  1  *)
(* src = "output/sensorTop.v:403.1-490.10" *)
module OUTPUT_BUFFER(SET_BUFFER, RESET, CLK, DATA_IN, OUTPUT_CLK, DATA_OUT);
  (* src = "output/sensorTop.v:460.2-483.6" *)
  wire _00_;
  (* src = "output/sensorTop.v:460.2-483.6" *)
  wire _01_;
  (* src = "output/sensorTop.v:460.2-483.6" *)
  wire _02_;
  (* src = "output/sensorTop.v:460.2-483.6" *)
  wire _03_;
  (* src = "output/sensorTop.v:443.35-443.53" *)
  wire _04_;
  (* src = "output/sensorTop.v:451.10-451.28" *)
  wire _05_;
  (* src = "output/sensorTop.v:432.10-432.31" *)
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  (* src = "output/sensorTop.v:413.8-413.11" *)
  input CLK;
  (* src = "output/sensorTop.v:414.49-414.56" *)
  input [191:0] DATA_IN;
  (* src = "output/sensorTop.v:416.54-416.62" *)
  output [63:0] DATA_OUT;
  (* src = "output/sensorTop.v:415.14-415.24" *)
  output OUTPUT_CLK;
  (* src = "output/sensorTop.v:412.8-412.13" *)
  input RESET;
  (* src = "output/sensorTop.v:411.8-411.18" *)
  input SET_BUFFER;
  (* src = "output/sensorTop.v:429.28-429.39" *)
  wire [1:0] counter_out;
  (* src = "output/sensorTop.v:428.6-428.19" *)
  wire counter_reset;
  (* src = "output/sensorTop.v:422.39-422.53" *)
  wire [191:0] data_in_decode;
  (* src = "output/sensorTop.v:440.14-440.28" *)
  wire [63:0] local_data_out;
  (* src = "output/sensorTop.v:427.6-427.18" *)
  wire sending_data;
  (* src = "output/sensorTop.v:439.6-439.18" *)
  wire set_register;
  (* src = "output/sensorTop.v:441.7-441.17" *)
  wire set_select;
  (* src = "output/sensorTop.v:436.6-436.18" *)
  wire should_shift;
  NOT _16_ (
    .A(sending_data),
    .Y(_07_)
  );
  NOT _17_ (
    .A(counter_out[0]),
    .Y(_08_)
  );
  NAND _18_ (
    .A(SET_BUFFER),
    .B(_07_),
    .Y(_09_)
  );
  NOR _19_ (
    .A(set_register),
    .B(_09_),
    .Y(_02_)
  );
  NOR _20_ (
    .A(sending_data),
    .B(should_shift),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_08_),
    .B(counter_out[1]),
    .Y(_11_)
  );
  NOR _22_ (
    .A(set_register),
    .B(_11_),
    .Y(_00_)
  );
  NOR _23_ (
    .A(_10_),
    .B(_00_),
    .Y(_03_)
  );
  NOR _24_ (
    .A(SET_BUFFER),
    .B(sending_data),
    .Y(_12_)
  );
  NOR _25_ (
    .A(_00_),
    .B(_12_),
    .Y(_01_)
  );
  NOR _26_ (
    .A(RESET),
    .B(counter_reset),
    .Y(_13_)
  );
  NOT _27_ (
    .A(_13_),
    .Y(_06_)
  );
  NAND _28_ (
    .A(set_register),
    .B(CLK),
    .Y(_14_)
  );
  NOT _29_ (
    .A(_14_),
    .Y(_04_)
  );
  NAND _30_ (
    .A(_09_),
    .B(_14_),
    .Y(set_select)
  );
  NAND _31_ (
    .A(should_shift),
    .B(CLK),
    .Y(_15_)
  );
  NOT _32_ (
    .A(_15_),
    .Y(_05_)
  );
  NOR _33_ (
    .A(_07_),
    .B(CLK),
    .Y(OUTPUT_CLK)
  );
  (* src = "output/sensorTop.v:460.2-483.6" *)
  DFFSR _34_ (
    .C(CLK),
    .D(_00_),
    .Q(counter_reset),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:460.2-483.6" *)
  DFFSR _35_ (
    .C(CLK),
    .D(_01_),
    .Q(sending_data),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:460.2-483.6" *)
  DFFSR _36_ (
    .C(CLK),
    .D(_03_),
    .Q(should_shift),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:460.2-483.6" *)
  DFFSR _37_ (
    .C(CLK),
    .D(_02_),
    .Q(set_register),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:430.33-435.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000000010  Counter (
    .clk(CLK),
    .enable(sending_data),
    .out(counter_out),
    .reset(_06_)
  );
  (* src = "output/sensorTop.v:447.4-454.3" *)
  \$paramod$4e29df410bc8e16bc6e2605c65ed249684a89f75\RegisterShifter  DataBuffer (
    .data_in(data_in_decode),
    .data_out(local_data_out),
    .reset(RESET),
    .set(_04_),
    .set_select(set_select),
    .shift(_05_)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[0]  (
    .A(local_data_out[0]),
    .EN(sending_data),
    .Y(DATA_OUT[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[10]  (
    .A(local_data_out[10]),
    .EN(sending_data),
    .Y(DATA_OUT[10])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[11]  (
    .A(local_data_out[11]),
    .EN(sending_data),
    .Y(DATA_OUT[11])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[12]  (
    .A(local_data_out[12]),
    .EN(sending_data),
    .Y(DATA_OUT[12])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[13]  (
    .A(local_data_out[13]),
    .EN(sending_data),
    .Y(DATA_OUT[13])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[14]  (
    .A(local_data_out[14]),
    .EN(sending_data),
    .Y(DATA_OUT[14])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[15]  (
    .A(local_data_out[15]),
    .EN(sending_data),
    .Y(DATA_OUT[15])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[16]  (
    .A(local_data_out[16]),
    .EN(sending_data),
    .Y(DATA_OUT[16])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[17]  (
    .A(local_data_out[17]),
    .EN(sending_data),
    .Y(DATA_OUT[17])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[18]  (
    .A(local_data_out[18]),
    .EN(sending_data),
    .Y(DATA_OUT[18])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[19]  (
    .A(local_data_out[19]),
    .EN(sending_data),
    .Y(DATA_OUT[19])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[1]  (
    .A(local_data_out[1]),
    .EN(sending_data),
    .Y(DATA_OUT[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[20]  (
    .A(local_data_out[20]),
    .EN(sending_data),
    .Y(DATA_OUT[20])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[21]  (
    .A(local_data_out[21]),
    .EN(sending_data),
    .Y(DATA_OUT[21])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[22]  (
    .A(local_data_out[22]),
    .EN(sending_data),
    .Y(DATA_OUT[22])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[23]  (
    .A(local_data_out[23]),
    .EN(sending_data),
    .Y(DATA_OUT[23])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[24]  (
    .A(local_data_out[24]),
    .EN(sending_data),
    .Y(DATA_OUT[24])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[25]  (
    .A(local_data_out[25]),
    .EN(sending_data),
    .Y(DATA_OUT[25])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[26]  (
    .A(local_data_out[26]),
    .EN(sending_data),
    .Y(DATA_OUT[26])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[27]  (
    .A(local_data_out[27]),
    .EN(sending_data),
    .Y(DATA_OUT[27])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[28]  (
    .A(local_data_out[28]),
    .EN(sending_data),
    .Y(DATA_OUT[28])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[29]  (
    .A(local_data_out[29]),
    .EN(sending_data),
    .Y(DATA_OUT[29])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[2]  (
    .A(local_data_out[2]),
    .EN(sending_data),
    .Y(DATA_OUT[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[30]  (
    .A(local_data_out[30]),
    .EN(sending_data),
    .Y(DATA_OUT[30])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[31]  (
    .A(local_data_out[31]),
    .EN(sending_data),
    .Y(DATA_OUT[31])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[32]  (
    .A(local_data_out[32]),
    .EN(sending_data),
    .Y(DATA_OUT[32])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[33]  (
    .A(local_data_out[33]),
    .EN(sending_data),
    .Y(DATA_OUT[33])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[34]  (
    .A(local_data_out[34]),
    .EN(sending_data),
    .Y(DATA_OUT[34])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[35]  (
    .A(local_data_out[35]),
    .EN(sending_data),
    .Y(DATA_OUT[35])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[36]  (
    .A(local_data_out[36]),
    .EN(sending_data),
    .Y(DATA_OUT[36])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[37]  (
    .A(local_data_out[37]),
    .EN(sending_data),
    .Y(DATA_OUT[37])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[38]  (
    .A(local_data_out[38]),
    .EN(sending_data),
    .Y(DATA_OUT[38])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[39]  (
    .A(local_data_out[39]),
    .EN(sending_data),
    .Y(DATA_OUT[39])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[3]  (
    .A(local_data_out[3]),
    .EN(sending_data),
    .Y(DATA_OUT[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[40]  (
    .A(local_data_out[40]),
    .EN(sending_data),
    .Y(DATA_OUT[40])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[41]  (
    .A(local_data_out[41]),
    .EN(sending_data),
    .Y(DATA_OUT[41])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[42]  (
    .A(local_data_out[42]),
    .EN(sending_data),
    .Y(DATA_OUT[42])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[43]  (
    .A(local_data_out[43]),
    .EN(sending_data),
    .Y(DATA_OUT[43])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[44]  (
    .A(local_data_out[44]),
    .EN(sending_data),
    .Y(DATA_OUT[44])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[45]  (
    .A(local_data_out[45]),
    .EN(sending_data),
    .Y(DATA_OUT[45])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[46]  (
    .A(local_data_out[46]),
    .EN(sending_data),
    .Y(DATA_OUT[46])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[47]  (
    .A(local_data_out[47]),
    .EN(sending_data),
    .Y(DATA_OUT[47])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[48]  (
    .A(local_data_out[48]),
    .EN(sending_data),
    .Y(DATA_OUT[48])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[49]  (
    .A(local_data_out[49]),
    .EN(sending_data),
    .Y(DATA_OUT[49])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[4]  (
    .A(local_data_out[4]),
    .EN(sending_data),
    .Y(DATA_OUT[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[50]  (
    .A(local_data_out[50]),
    .EN(sending_data),
    .Y(DATA_OUT[50])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[51]  (
    .A(local_data_out[51]),
    .EN(sending_data),
    .Y(DATA_OUT[51])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[52]  (
    .A(local_data_out[52]),
    .EN(sending_data),
    .Y(DATA_OUT[52])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[53]  (
    .A(local_data_out[53]),
    .EN(sending_data),
    .Y(DATA_OUT[53])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[54]  (
    .A(local_data_out[54]),
    .EN(sending_data),
    .Y(DATA_OUT[54])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[55]  (
    .A(local_data_out[55]),
    .EN(sending_data),
    .Y(DATA_OUT[55])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[56]  (
    .A(local_data_out[56]),
    .EN(sending_data),
    .Y(DATA_OUT[56])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[57]  (
    .A(local_data_out[57]),
    .EN(sending_data),
    .Y(DATA_OUT[57])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[58]  (
    .A(local_data_out[58]),
    .EN(sending_data),
    .Y(DATA_OUT[58])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[59]  (
    .A(local_data_out[59]),
    .EN(sending_data),
    .Y(DATA_OUT[59])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[5]  (
    .A(local_data_out[5]),
    .EN(sending_data),
    .Y(DATA_OUT[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[60]  (
    .A(local_data_out[60]),
    .EN(sending_data),
    .Y(DATA_OUT[60])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[61]  (
    .A(local_data_out[61]),
    .EN(sending_data),
    .Y(DATA_OUT[61])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[62]  (
    .A(local_data_out[62]),
    .EN(sending_data),
    .Y(DATA_OUT[62])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[63]  (
    .A(local_data_out[63]),
    .EN(sending_data),
    .Y(DATA_OUT[63])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[6]  (
    .A(local_data_out[6]),
    .EN(sending_data),
    .Y(DATA_OUT[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[7]  (
    .A(local_data_out[7]),
    .EN(sending_data),
    .Y(DATA_OUT[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[8]  (
    .A(local_data_out[8]),
    .EN(sending_data),
    .Y(DATA_OUT[8])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:485.11-489.3" *)
  Tristate \Tristate[9]  (
    .A(local_data_out[9]),
    .EN(sending_data),
    .Y(DATA_OUT[9])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[0]  (
    .in(DATA_IN[7:0]),
    .out(data_in_decode[7:0])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[10]  (
    .in(DATA_IN[87:80]),
    .out(data_in_decode[87:80])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[11]  (
    .in(DATA_IN[95:88]),
    .out(data_in_decode[95:88])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[12]  (
    .in(DATA_IN[103:96]),
    .out(data_in_decode[103:96])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[13]  (
    .in(DATA_IN[111:104]),
    .out(data_in_decode[111:104])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[14]  (
    .in(DATA_IN[119:112]),
    .out(data_in_decode[119:112])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[15]  (
    .in(DATA_IN[127:120]),
    .out(data_in_decode[127:120])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[16]  (
    .in(DATA_IN[135:128]),
    .out(data_in_decode[135:128])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[17]  (
    .in(DATA_IN[143:136]),
    .out(data_in_decode[143:136])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[18]  (
    .in(DATA_IN[151:144]),
    .out(data_in_decode[151:144])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[19]  (
    .in(DATA_IN[159:152]),
    .out(data_in_decode[159:152])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[1]  (
    .in(DATA_IN[15:8]),
    .out(data_in_decode[15:8])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[20]  (
    .in(DATA_IN[167:160]),
    .out(data_in_decode[167:160])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[21]  (
    .in(DATA_IN[175:168]),
    .out(data_in_decode[175:168])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[22]  (
    .in(DATA_IN[183:176]),
    .out(data_in_decode[183:176])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[23]  (
    .in(DATA_IN[191:184]),
    .out(data_in_decode[191:184])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[2]  (
    .in(DATA_IN[23:16]),
    .out(data_in_decode[23:16])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[3]  (
    .in(DATA_IN[31:24]),
    .out(data_in_decode[31:24])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[4]  (
    .in(DATA_IN[39:32]),
    .out(data_in_decode[39:32])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[5]  (
    .in(DATA_IN[47:40]),
    .out(data_in_decode[47:40])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[6]  (
    .in(DATA_IN[55:48]),
    .out(data_in_decode[55:48])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[7]  (
    .in(DATA_IN[63:56]),
    .out(data_in_decode[63:56])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[8]  (
    .in(DATA_IN[71:64]),
    .out(data_in_decode[71:64])
  );
  (* src = "output/sensorTop.v:423.43-426.3" *)
  \$paramod\Graycounter_decode\WIDTH=s32'00000000000000000000000000001000  \decoder[9]  (
    .in(DATA_IN[79:72]),
    .out(data_in_decode[79:72])
  );
endmodule

(* dynports =  1  *)
(* src = "output/sensorTop.v:323.1-353.10" *)
module PIXEL_ARRAY(ANALOG_RAMP, ERASE, EXPOSE, READ, DIGITAL_RAMP, DATA_OUT);
  (* src = "output/sensorTop.v:331.8-331.19" *)
  input ANALOG_RAMP;
  (* src = "output/sensorTop.v:339.46-339.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:336.14-336.26" *)
  input [7:0] DIGITAL_RAMP;
  (* src = "output/sensorTop.v:332.8-332.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:333.8-333.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:335.35-335.39" *)
  input [23:0] READ;
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000000  \genblk1[0].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[0])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001010  \genblk1[10].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[10])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001011  \genblk1[11].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[11])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001100  \genblk1[12].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[12])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001101  \genblk1[13].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[13])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001110  \genblk1[14].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[14])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001111  \genblk1[15].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[15])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010000  \genblk1[16].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[16])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010001  \genblk1[17].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[17])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010010  \genblk1[18].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[18])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010011  \genblk1[19].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[19])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000001  \genblk1[1].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[1])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010100  \genblk1[20].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[20])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010101  \genblk1[21].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[21])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010110  \genblk1[22].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[22])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000010111  \genblk1[23].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[23])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000010  \genblk1[2].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[2])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000011  \genblk1[3].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[3])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000100  \genblk1[4].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[4])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000101  \genblk1[5].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[5])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000110  \genblk1[6].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[6])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000111  \genblk1[7].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[7])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001000  \genblk1[8].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[8])
  );
  (* src = "output/sensorTop.v:343.31-350.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000001001  \genblk1[9].pr  (
    .ANALOG_RAMP(ANALOG_RAMP),
    .DATA_OUT(DATA_OUT),
    .DIGITAL_RAMP(DIGITAL_RAMP),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .READ(READ[9])
  );
endmodule

(* dynports =  1  *)
(* src = "output/sensorTop.v:99.1-221.10" *)
module SENSOR_STATE(CLK, RESET, PIXEL_ERASE, PIXEL_EXPOSE, SENSOR_ROW_SELECT, NEW_ROW, PIXEL_ANALOG_RAMP, PIXEL_DIGITAL_RAMP, FRAME_FINISHED);
  (* src = "output/sensorTop.v:152.8-152.26" *)
  wire _000_;
  (* src = "output/sensorTop.v:165.10-165.49" *)
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  (* src = "output/sensorTop.v:110.8-110.11" *)
  input CLK;
  (* src = "output/sensorTop.v:120.14-120.28" *)
  output FRAME_FINISHED;
  (* src = "output/sensorTop.v:116.13-116.20" *)
  output NEW_ROW;
  (* src = "output/sensorTop.v:117.14-117.31" *)
  output PIXEL_ANALOG_RAMP;
  (* src = "output/sensorTop.v:119.20-119.38" *)
  output [7:0] PIXEL_DIGITAL_RAMP;
  (* src = "output/sensorTop.v:112.14-112.25" *)
  output PIXEL_ERASE;
  (* src = "output/sensorTop.v:113.14-113.26" *)
  output PIXEL_EXPOSE;
  (* src = "output/sensorTop.v:111.8-111.13" *)
  input RESET;
  (* src = "output/sensorTop.v:115.41-115.58" *)
  output [23:0] SENSOR_ROW_SELECT;
  (* src = "output/sensorTop.v:137.28-137.35" *)
  wire [7:0] counter;
  (* src = "output/sensorTop.v:138.6-138.19" *)
  wire counter_reset;
  (* src = "output/sensorTop.v:148.7-148.19" *)
  wire dRamp_enable;
  (* src = "output/sensorTop.v:170.7-170.11" *)
  wire idle;
  (* src = "output/sensorTop.v:133.6-133.20" *)
  wire internal_reset;
  (* src = "output/sensorTop.v:139.7-139.27" *)
  wire master_counter_reset;
  (* src = "output/sensorTop.v:135.7-135.19" *)
  wire master_reset;
  (* src = "output/sensorTop.v:172.7-172.29" *)
  wire master_rowSelect_reset;
  (* src = "output/sensorTop.v:158.13-158.28" *)
  wire [2:0] rowSelect_count;
  (* src = "output/sensorTop.v:157.7-157.31" *)
  wire rowSelect_counter_enable;
  (* src = "output/sensorTop.v:156.7-156.30" *)
  wire rowSelect_counter_reset;
  (* src = "output/sensorTop.v:169.7-169.23" *)
  wire rowSelect_enable;
  (* src = "output/sensorTop.v:160.6-160.19" *)
  wire rowSelect_inc;
  (* src = "output/sensorTop.v:149.13-149.18" *)
  wire [3:0] state;
  (* src = "output/sensorTop.v:161.6-161.25" *)
  wire stateSelector_shift;
  NOT _080_ (
    .A(counter_reset),
    .Y(_016_)
  );
  NOT _081_ (
    .A(state[0]),
    .Y(_017_)
  );
  NOT _082_ (
    .A(state[1]),
    .Y(_018_)
  );
  NOT _083_ (
    .A(state[2]),
    .Y(_019_)
  );
  NOT _084_ (
    .A(state[3]),
    .Y(_020_)
  );
  NOT _085_ (
    .A(counter[3]),
    .Y(_021_)
  );
  NOT _086_ (
    .A(counter[5]),
    .Y(_022_)
  );
  NOT _087_ (
    .A(counter[4]),
    .Y(_023_)
  );
  NOR _088_ (
    .A(internal_reset),
    .B(RESET),
    .Y(_024_)
  );
  NOT _089_ (
    .A(_024_),
    .Y(master_reset)
  );
  NAND _090_ (
    .A(_016_),
    .B(_024_),
    .Y(idle)
  );
  NOT _091_ (
    .A(idle),
    .Y(_025_)
  );
  NOR _092_ (
    .A(counter[4]),
    .B(counter[7]),
    .Y(_026_)
  );
  NOR _093_ (
    .A(counter[5]),
    .B(counter[6]),
    .Y(_027_)
  );
  NAND _094_ (
    .A(_026_),
    .B(_027_),
    .Y(_028_)
  );
  NAND _095_ (
    .A(_021_),
    .B(counter[2]),
    .Y(_029_)
  );
  NOR _096_ (
    .A(state[2]),
    .B(state[3]),
    .Y(_030_)
  );
  NAND _097_ (
    .A(state[0]),
    .B(counter[0]),
    .Y(_031_)
  );
  NOR _098_ (
    .A(_029_),
    .B(_031_),
    .Y(_032_)
  );
  NOR _099_ (
    .A(state[1]),
    .B(counter[1]),
    .Y(_033_)
  );
  NAND _100_ (
    .A(_030_),
    .B(_033_),
    .Y(_034_)
  );
  NOR _101_ (
    .A(_028_),
    .B(_034_),
    .Y(_035_)
  );
  NAND _102_ (
    .A(_032_),
    .B(_035_),
    .Y(_036_)
  );
  NOT _103_ (
    .A(_036_),
    .Y(_037_)
  );
  NOR _104_ (
    .A(idle),
    .B(_037_),
    .Y(_038_)
  );
  NAND _105_ (
    .A(_025_),
    .B(_036_),
    .Y(_039_)
  );
  NAND _106_ (
    .A(counter[1]),
    .B(counter[0]),
    .Y(_040_)
  );
  NOT _107_ (
    .A(_040_),
    .Y(_041_)
  );
  NAND _108_ (
    .A(counter[3]),
    .B(counter[2]),
    .Y(_042_)
  );
  NOR _109_ (
    .A(_023_),
    .B(_042_),
    .Y(_043_)
  );
  NAND _110_ (
    .A(_041_),
    .B(_043_),
    .Y(_044_)
  );
  NOR _111_ (
    .A(_022_),
    .B(_044_),
    .Y(_045_)
  );
  NAND _112_ (
    .A(counter[7]),
    .B(counter[6]),
    .Y(_046_)
  );
  NOR _113_ (
    .A(state[0]),
    .B(state[1]),
    .Y(_047_)
  );
  NOR _114_ (
    .A(_019_),
    .B(state[3]),
    .Y(_048_)
  );
  NAND _115_ (
    .A(state[2]),
    .B(_047_),
    .Y(_049_)
  );
  NOR _116_ (
    .A(state[3]),
    .B(_049_),
    .Y(_050_)
  );
  NAND _117_ (
    .A(_047_),
    .B(_048_),
    .Y(_051_)
  );
  NOR _118_ (
    .A(state[0]),
    .B(_018_),
    .Y(_052_)
  );
  NAND _119_ (
    .A(_017_),
    .B(_030_),
    .Y(_053_)
  );
  NOR _120_ (
    .A(_018_),
    .B(_053_),
    .Y(_054_)
  );
  NAND _121_ (
    .A(_030_),
    .B(_052_),
    .Y(_055_)
  );
  NOR _122_ (
    .A(_050_),
    .B(_054_),
    .Y(_056_)
  );
  NAND _123_ (
    .A(_051_),
    .B(_055_),
    .Y(_057_)
  );
  NOR _124_ (
    .A(_046_),
    .B(_056_),
    .Y(_058_)
  );
  NAND _125_ (
    .A(_045_),
    .B(_058_),
    .Y(_059_)
  );
  NAND _126_ (
    .A(_045_),
    .B(_057_),
    .Y(_060_)
  );
  NOR _127_ (
    .A(_046_),
    .B(_060_),
    .Y(_061_)
  );
  NOR _128_ (
    .A(_039_),
    .B(_061_),
    .Y(_062_)
  );
  NAND _129_ (
    .A(_038_),
    .B(_059_),
    .Y(_063_)
  );
  NOR _130_ (
    .A(counter[6]),
    .B(_045_),
    .Y(_064_)
  );
  NOT _131_ (
    .A(_064_),
    .Y(_065_)
  );
  NAND _132_ (
    .A(state[3]),
    .B(_047_),
    .Y(_066_)
  );
  NOR _133_ (
    .A(state[2]),
    .B(_066_),
    .Y(_067_)
  );
  NOT _134_ (
    .A(_067_),
    .Y(_068_)
  );
  NOR _135_ (
    .A(_029_),
    .B(_040_),
    .Y(_069_)
  );
  NAND _136_ (
    .A(counter[5]),
    .B(counter[4]),
    .Y(_070_)
  );
  NOR _137_ (
    .A(counter[7]),
    .B(_070_),
    .Y(_071_)
  );
  NAND _138_ (
    .A(_069_),
    .B(_071_),
    .Y(_072_)
  );
  NOT _139_ (
    .A(_072_),
    .Y(_073_)
  );
  NOR _140_ (
    .A(_068_),
    .B(_072_),
    .Y(_074_)
  );
  NAND _141_ (
    .A(_067_),
    .B(_073_),
    .Y(_075_)
  );
  NOR _142_ (
    .A(_064_),
    .B(_075_),
    .Y(_076_)
  );
  NAND _143_ (
    .A(_065_),
    .B(_074_),
    .Y(_077_)
  );
  NOR _144_ (
    .A(_063_),
    .B(_076_),
    .Y(_078_)
  );
  NAND _145_ (
    .A(_062_),
    .B(_077_),
    .Y(_079_)
  );
  NAND _146_ (
    .A(rowSelect_count[1]),
    .B(rowSelect_count[0]),
    .Y(_005_)
  );
  NOT _147_ (
    .A(_005_),
    .Y(_006_)
  );
  NAND _148_ (
    .A(_067_),
    .B(_006_),
    .Y(_007_)
  );
  NOR _149_ (
    .A(rowSelect_count[2]),
    .B(_007_),
    .Y(_008_)
  );
  NOR _150_ (
    .A(_079_),
    .B(_008_),
    .Y(_009_)
  );
  NOR _151_ (
    .A(rowSelect_inc),
    .B(_078_),
    .Y(_010_)
  );
  NOR _152_ (
    .A(_009_),
    .B(_010_),
    .Y(_003_)
  );
  NOR _153_ (
    .A(idle),
    .B(_077_),
    .Y(_002_)
  );
  NAND _154_ (
    .A(state[3]),
    .B(stateSelector_shift),
    .Y(_011_)
  );
  NOT _155_ (
    .A(_011_),
    .Y(_012_)
  );
  NOR _156_ (
    .A(rowSelect_inc),
    .B(_012_),
    .Y(_013_)
  );
  NOT _157_ (
    .A(_013_),
    .Y(rowSelect_counter_reset)
  );
  NAND _158_ (
    .A(_024_),
    .B(_013_),
    .Y(_001_)
  );
  NOR _159_ (
    .A(_020_),
    .B(idle),
    .Y(rowSelect_enable)
  );
  NOR _160_ (
    .A(_017_),
    .B(idle),
    .Y(PIXEL_ERASE)
  );
  NOR _161_ (
    .A(_018_),
    .B(idle),
    .Y(PIXEL_EXPOSE)
  );
  NAND _162_ (
    .A(CLK),
    .B(_050_),
    .Y(_014_)
  );
  NOR _163_ (
    .A(idle),
    .B(_014_),
    .Y(PIXEL_ANALOG_RAMP)
  );
  NAND _164_ (
    .A(state[2]),
    .B(CLK),
    .Y(_015_)
  );
  NOT _165_ (
    .A(_015_),
    .Y(_000_)
  );
  NOR _166_ (
    .A(idle),
    .B(_078_),
    .Y(_004_)
  );
  (* src = "output/sensorTop.v:189.2-217.6" *)
  DFFSR _167_ (
    .C(CLK),
    .D(rowSelect_counter_reset),
    .Q(NEW_ROW),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:189.2-217.6" *)
  DFFSR _168_ (
    .C(CLK),
    .D(idle),
    .Q(stateSelector_shift),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:189.2-217.6" *)
  DFFSR _169_ (
    .C(CLK),
    .D(_002_),
    .Q(internal_reset),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:189.2-217.6" *)
  DFFSR _170_ (
    .C(CLK),
    .D(_003_),
    .Q(rowSelect_inc),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:189.2-217.6" *)
  DFFSR _171_ (
    .C(CLK),
    .D(_004_),
    .Q(counter_reset),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:141.33-146.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(CLK),
    .enable(1'h1),
    .out(counter),
    .reset(idle)
  );
  (* src = "output/sensorTop.v:151.27-155.3" *)
  \$paramod\Graycounter\WIDTH=s32'00000000000000000000000000001000  DRamp (
    .clk(_000_),
    .out(PIXEL_DIGITAL_RAMP),
    .reset(idle)
  );
  (* src = "output/sensorTop.v:174.42-180.3" *)
  \$paramod\Selector\length=s32'00000000000000000000000000011000  RowSelector (
    .clk(rowSelect_inc),
    .inputEnable(rowSelect_enable),
    .out(SENSOR_ROW_SELECT),
    .outputEnable(rowSelect_enable),
    .reset(master_reset)
  );
  (* src = "output/sensorTop.v:163.22-168.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000000011  RowSelectorCounter (
    .clk(CLK),
    .enable(state[3]),
    .out(rowSelect_count),
    .reset(_001_)
  );
  (* src = "output/sensorTop.v:181.30-187.3" *)
  \$paramod\Selector\length=s32'00000000000000000000000000000100  StateSelector (
    .clk(stateSelector_shift),
    .inputEnable(1'h1),
    .out(state),
    .outputEnable(1'h1),
    .reset(master_reset)
  );
  assign FRAME_FINISHED = internal_reset;
  assign dRamp_enable = state[2];
  assign master_counter_reset = idle;
  assign master_rowSelect_reset = master_reset;
  assign rowSelect_counter_enable = state[3];
endmodule

(* dynports =  1  *)
(* top =  1  *)
(* src = "output/sensorTop.v:491.1-543.10" *)
module SENSOR_TOP(CLK, RESET, BUFFER_CLK, OUTPUT_CLK, DATA_OUT, FRAME_FINISHED);
  (* src = "output/sensorTop.v:501.8-501.18" *)
  input BUFFER_CLK;
  (* src = "output/sensorTop.v:499.8-499.11" *)
  input CLK;
  (* src = "output/sensorTop.v:505.21-505.29" *)
  output [63:0] DATA_OUT;
  (* src = "output/sensorTop.v:506.14-506.28" *)
  output FRAME_FINISHED;
  (* src = "output/sensorTop.v:502.14-502.24" *)
  output OUTPUT_CLK;
  (* src = "output/sensorTop.v:500.8-500.13" *)
  input RESET;
  (* src = "output/sensorTop.v:513.13-513.31" *)
  wire [7:0] pixel_digital_ramp;
  (* src = "output/sensorTop.v:512.7-512.25" *)
  wire sensor_analog_ramp;
  (* src = "output/sensorTop.v:515.39-515.54" *)
  wire [191:0] sensor_data_out;
  (* src = "output/sensorTop.v:507.7-507.19" *)
  wire sensor_erase;
  (* src = "output/sensorTop.v:508.7-508.20" *)
  wire sensor_expose;
  (* src = "output/sensorTop.v:511.7-511.21" *)
  wire sensor_new_row;
  (* src = "output/sensorTop.v:510.34-510.51" *)
  wire [23:0] sensor_row_select;
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:535.16-542.3" *)
  OUTPUT_BUFFER OutputBuffer (
    .CLK(BUFFER_CLK),
    .DATA_IN(sensor_data_out),
    .DATA_OUT(DATA_OUT),
    .OUTPUT_CLK(OUTPUT_CLK),
    .RESET(RESET),
    .SET_BUFFER(sensor_new_row)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:516.14-523.3" *)
  PIXEL_ARRAY PixelArray (
    .ANALOG_RAMP(sensor_analog_ramp),
    .DATA_OUT(sensor_data_out),
    .DIGITAL_RAMP(pixel_digital_ramp),
    .ERASE(sensor_erase),
    .EXPOSE(sensor_expose),
    .READ(sensor_row_select)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:524.15-534.3" *)
  SENSOR_STATE SensorState (
    .CLK(CLK),
    .FRAME_FINISHED(FRAME_FINISHED),
    .NEW_ROW(sensor_new_row),
    .PIXEL_ANALOG_RAMP(sensor_analog_ramp),
    .PIXEL_DIGITAL_RAMP(pixel_digital_ramp),
    .PIXEL_ERASE(sensor_erase),
    .PIXEL_EXPOSE(sensor_expose),
    .RESET(RESET),
    .SENSOR_ROW_SELECT(sensor_row_select)
  );
endmodule

(* src = "output/sensorTop.v:74.1-83.10" *)
module Tristate(A, EN, Y);
  (* src = "output/sensorTop.v:79.8-79.9" *)
  input A;
  (* src = "output/sensorTop.v:80.8-80.10" *)
  input EN;
  (* src = "output/sensorTop.v:81.14-81.15" *)
  output Y;
  (* src = "output/sensorTop.v:82.14-82.27" *)
  \$_TBUF_  _0_ (
    .A(A),
    .E(EN),
    .Y(Y)
  );
endmodule
