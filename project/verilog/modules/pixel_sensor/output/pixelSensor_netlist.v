// **Custom imports** 
`include "../../../lib/gates.lib"

/* Generated by Yosys 0.10.0 (git sha1 UNKNOWN, clang 13.0.0 -fPIC -Os) */

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/pixelSensor.v:46.1-71.10" *)
module \$paramod$c1779105b47a492e95a170d797783cce44f65393\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/pixelSensor.v:55.13-55.16" *)
  output CMP;
  (* src = "output/pixelSensor.v:54.8-54.13" *)
  input ERASE;
  (* src = "output/pixelSensor.v:52.8-52.14" *)
  input EXPOSE;
  (* src = "output/pixelSensor.v:53.8-53.12" *)
  input RAMP;
  (* src = "output/pixelSensor.v:59.13-59.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/pixelSensor.v:66.2-70.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/pixelSensor.v:60.22-65.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\Counter" *)
(* src = "output/pixelSensor.v:29.1-45.10" *)
module \$paramod\Counter\bits=s32'00000000000000000000000000001000 (clk, reset, enable, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  (* src = "output/pixelSensor.v:35.8-35.11" *)
  input clk;
  (* src = "output/pixelSensor.v:37.8-37.14" *)
  input enable;
  (* src = "output/pixelSensor.v:39.26-39.29" *)
  output [7:0] out;
  (* src = "output/pixelSensor.v:36.8-36.13" *)
  input reset;
  NOT _38_ (
    .A(enable),
    .Y(_08_)
  );
  NOT _39_ (
    .A(out[5]),
    .Y(_09_)
  );
  NOT _40_ (
    .A(out[4]),
    .Y(_10_)
  );
  NOT _41_ (
    .A(out[3]),
    .Y(_11_)
  );
  NOT _42_ (
    .A(out[2]),
    .Y(_12_)
  );
  NOT _43_ (
    .A(out[1]),
    .Y(_13_)
  );
  NOT _44_ (
    .A(out[0]),
    .Y(_14_)
  );
  NOR _45_ (
    .A(_08_),
    .B(_14_),
    .Y(_15_)
  );
  NAND _46_ (
    .A(enable),
    .B(out[0]),
    .Y(_16_)
  );
  NOR _47_ (
    .A(_13_),
    .B(_16_),
    .Y(_17_)
  );
  NOT _48_ (
    .A(_17_),
    .Y(_18_)
  );
  NOR _49_ (
    .A(_12_),
    .B(_18_),
    .Y(_19_)
  );
  NAND _50_ (
    .A(out[2]),
    .B(_17_),
    .Y(_20_)
  );
  NOR _51_ (
    .A(_11_),
    .B(_20_),
    .Y(_21_)
  );
  NOT _52_ (
    .A(_21_),
    .Y(_22_)
  );
  NOR _53_ (
    .A(_10_),
    .B(_22_),
    .Y(_23_)
  );
  NAND _54_ (
    .A(out[4]),
    .B(_21_),
    .Y(_24_)
  );
  NOR _55_ (
    .A(_09_),
    .B(_24_),
    .Y(_25_)
  );
  NAND _56_ (
    .A(out[6]),
    .B(_25_),
    .Y(_26_)
  );
  NOT _57_ (
    .A(_26_),
    .Y(_27_)
  );
  NOR _58_ (
    .A(out[6]),
    .B(_25_),
    .Y(_28_)
  );
  NOR _59_ (
    .A(_27_),
    .B(_28_),
    .Y(_06_)
  );
  NOR _60_ (
    .A(out[5]),
    .B(_23_),
    .Y(_29_)
  );
  NOR _61_ (
    .A(_25_),
    .B(_29_),
    .Y(_05_)
  );
  NOR _62_ (
    .A(out[4]),
    .B(_21_),
    .Y(_30_)
  );
  NOR _63_ (
    .A(_23_),
    .B(_30_),
    .Y(_04_)
  );
  NOR _64_ (
    .A(out[3]),
    .B(_19_),
    .Y(_31_)
  );
  NOR _65_ (
    .A(_21_),
    .B(_31_),
    .Y(_03_)
  );
  NOR _66_ (
    .A(out[2]),
    .B(_17_),
    .Y(_32_)
  );
  NOR _67_ (
    .A(_19_),
    .B(_32_),
    .Y(_02_)
  );
  NOR _68_ (
    .A(out[1]),
    .B(_15_),
    .Y(_33_)
  );
  NOR _69_ (
    .A(_17_),
    .B(_33_),
    .Y(_01_)
  );
  NOR _70_ (
    .A(enable),
    .B(out[0]),
    .Y(_34_)
  );
  NOR _71_ (
    .A(_15_),
    .B(_34_),
    .Y(_00_)
  );
  NAND _72_ (
    .A(out[7]),
    .B(_26_),
    .Y(_35_)
  );
  NOR _73_ (
    .A(out[7]),
    .B(_26_),
    .Y(_36_)
  );
  NOT _74_ (
    .A(_36_),
    .Y(_37_)
  );
  NAND _75_ (
    .A(_35_),
    .B(_37_),
    .Y(_07_)
  );
  (* src = "output/pixelSensor.v:40.2-44.19" *)
  DFFSR _76_ (
    .C(clk),
    .D(_00_),
    .Q(out[0]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/pixelSensor.v:40.2-44.19" *)
  DFFSR _77_ (
    .C(clk),
    .D(_01_),
    .Q(out[1]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/pixelSensor.v:40.2-44.19" *)
  DFFSR _78_ (
    .C(clk),
    .D(_02_),
    .Q(out[2]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/pixelSensor.v:40.2-44.19" *)
  DFFSR _79_ (
    .C(clk),
    .D(_03_),
    .Q(out[3]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/pixelSensor.v:40.2-44.19" *)
  DFFSR _80_ (
    .C(clk),
    .D(_04_),
    .Q(out[4]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/pixelSensor.v:40.2-44.19" *)
  DFFSR _81_ (
    .C(clk),
    .D(_05_),
    .Q(out[5]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/pixelSensor.v:40.2-44.19" *)
  DFFSR _82_ (
    .C(clk),
    .D(_06_),
    .Q(out[6]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/pixelSensor.v:40.2-44.19" *)
  DFFSR _83_ (
    .C(clk),
    .D(_07_),
    .Q(out[7]),
    .R(reset),
    .S(1'h0)
  );
endmodule

(* dynports =  1  *)
(* top =  1  *)
(* src = "output/pixelSensor.v:72.1-104.10" *)
module PIXEL_SENSOR(RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/pixelSensor.v:84.27-84.34" *)
  input [7:0] COUNTER;
  (* src = "output/pixelSensor.v:85.33-85.37" *)
  output [7:0] DATA;
  (* src = "output/pixelSensor.v:81.8-81.13" *)
  input ERASE;
  (* src = "output/pixelSensor.v:82.8-82.14" *)
  input EXPOSE;
  (* src = "output/pixelSensor.v:80.8-80.12" *)
  input RAMP;
  (* src = "output/pixelSensor.v:83.8-83.12" *)
  input READ;
  (* src = "output/pixelSensor.v:91.7-91.10" *)
  wire cmp;
  (* src = "output/pixelSensor.v:89.12-89.22" *)
  reg [7:0] local_data;
  (* src = "output/pixelSensor.v:92.2-94.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/pixelSensor.v:92.2-94.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/pixelSensor.v:92.2-94.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/pixelSensor.v:92.2-94.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/pixelSensor.v:92.2-94.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/pixelSensor.v:92.2-94.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/pixelSensor.v:92.2-94.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/pixelSensor.v:92.2-94.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/pixelSensor.v:98.4-103.3" *)
  \$paramod$c1779105b47a492e95a170d797783cce44f65393\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  assign DATA = local_data;
endmodule
