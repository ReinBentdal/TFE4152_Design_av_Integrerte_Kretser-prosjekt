// **Custom imports** 
`include "../pixel_sensor/pixelSensorAnalog.sv"
`include "../../lib/gates.v"

/* Generated by Yosys 0.10.0 (git sha1 UNKNOWN, clang 13.0.0 -fPIC -Os) */

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$004a2d6c4d72b173587acaf41269bb48988ab7d5\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$004a2d6c4d72b173587acaf41269bb48988ab7d5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$004a2d6c4d72b173587acaf41269bb48988ab7d5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$01d0898bce902f5836d8b4eda371e193f827c7d9\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$01d0898bce902f5836d8b4eda371e193f827c7d9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$01d0898bce902f5836d8b4eda371e193f827c7d9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOT _16_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$08fbb61fbeee1479bbddb2440780cddb7817a39f\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$08fbb61fbeee1479bbddb2440780cddb7817a39f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$08fbb61fbeee1479bbddb2440780cddb7817a39f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$0b8efd2cb5f44937e4399f4125d07a6092c590e9\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$0b8efd2cb5f44937e4399f4125d07a6092c590e9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$0b8efd2cb5f44937e4399f4125d07a6092c590e9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NOR _18_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _19_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_05_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$14fc8c5d7f86599dd8e65a6e2335ba789acfba9b\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$14fc8c5d7f86599dd8e65a6e2335ba789acfba9b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$14fc8c5d7f86599dd8e65a6e2335ba789acfba9b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$15e28f39ea9c2b4c42d772ae34f7b601516774e5\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$15e28f39ea9c2b4c42d772ae34f7b601516774e5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$15e28f39ea9c2b4c42d772ae34f7b601516774e5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _17_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$183358489ef7141153b8733ed376b64d93529b1c\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$183358489ef7141153b8733ed376b64d93529b1c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$183358489ef7141153b8733ed376b64d93529b1c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[7]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _19_ (
    .A(_03_),
    .B(expose_cmp[6]),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$183c928f06b71821b44ec346947200caceaee395\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$183c928f06b71821b44ec346947200caceaee395\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$183c928f06b71821b44ec346947200caceaee395\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NOR _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$1850f0e476e36dbff939940fa2bdad9f281d7d2a\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$1850f0e476e36dbff939940fa2bdad9f281d7d2a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$1850f0e476e36dbff939940fa2bdad9f281d7d2a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$1b8d27631d17fa0e52e8399f7f3948c6f18592d8\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$1b8d27631d17fa0e52e8399f7f3948c6f18592d8\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$1b8d27631d17fa0e52e8399f7f3948c6f18592d8\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$203b7c4b259ee952572b87d3e94151b5b02bbd2b\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$203b7c4b259ee952572b87d3e94151b5b02bbd2b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$203b7c4b259ee952572b87d3e94151b5b02bbd2b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$2155719df4bc99dec4198a2aba048f673893fd39\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$2155719df4bc99dec4198a2aba048f673893fd39\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$2155719df4bc99dec4198a2aba048f673893fd39\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$2ada5844b3e99cd0d222e36357dae1d6b7f0c26a\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$2ada5844b3e99cd0d222e36357dae1d6b7f0c26a\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$2ada5844b3e99cd0d222e36357dae1d6b7f0c26a\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NOR _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$2d7398bc60324bc42c137744e6f1e701f82607bd\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$2d7398bc60324bc42c137744e6f1e701f82607bd\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$2d7398bc60324bc42c137744e6f1e701f82607bd\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$2e2515711462623047324ff48ab86c0f2ee91b84\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$2e2515711462623047324ff48ab86c0f2ee91b84\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$2e2515711462623047324ff48ab86c0f2ee91b84\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _15_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_03_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$3157723d492346a7befead03d9df7a61b9ef7ef2\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$3157723d492346a7befead03d9df7a61b9ef7ef2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$3157723d492346a7befead03d9df7a61b9ef7ef2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$3e6dc0c2061895833d300200da0bb57d40ee581e\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$3e6dc0c2061895833d300200da0bb57d40ee581e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$3e6dc0c2061895833d300200da0bb57d40ee581e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$43805d7668ed07d3dde47b736f95915996c6f6a5\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$43805d7668ed07d3dde47b736f95915996c6f6a5\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$43805d7668ed07d3dde47b736f95915996c6f6a5\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$473fd670d14df5d07d633f9b5f53b0bd93106422\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$473fd670d14df5d07d633f9b5f53b0bd93106422\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$473fd670d14df5d07d633f9b5f53b0bd93106422\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _15_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_03_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$479bfff085236c83a41b8c4dad5a8c67592459af\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$479bfff085236c83a41b8c4dad5a8c67592459af\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$479bfff085236c83a41b8c4dad5a8c67592459af\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NOR _18_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _19_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_05_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$482b965326f1c4fd7f8a39c6ebc2b9bade0cadf8\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$482b965326f1c4fd7f8a39c6ebc2b9bade0cadf8\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$482b965326f1c4fd7f8a39c6ebc2b9bade0cadf8\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$49f23997283855e956073715e9c790457ca237f0\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$49f23997283855e956073715e9c790457ca237f0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$49f23997283855e956073715e9c790457ca237f0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOT _16_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\RegisterShifter" *)
(* src = "output/sensorTop.v:344.1-381.10" *)
module \$paramod$4e29df410bc8e16bc6e2605c65ed249684a89f75\RegisterShifter (clk, set, reset, shift, data_in, data_out);
  wire _000_;
  (* src = "output/sensorTop.v:374.10-374.27" *)
  wire _001_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _002_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _003_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _004_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _005_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _006_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _007_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _008_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _009_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _010_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _011_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _012_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _013_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _014_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _015_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _016_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _017_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _018_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _019_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _020_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _021_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _022_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _023_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _024_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _025_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _026_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _027_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _028_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _029_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _030_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _031_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _032_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _033_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _034_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _035_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _036_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _037_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _038_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _039_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _040_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _041_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _042_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _043_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _044_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _045_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _046_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _047_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _048_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _049_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _050_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _051_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _052_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _053_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _054_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _055_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _056_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _057_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _058_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _059_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _060_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _061_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _062_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _063_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _064_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _065_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _066_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _067_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _068_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _069_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _070_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _071_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _072_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _073_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _074_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _075_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _076_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _077_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _078_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _079_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _080_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _081_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _082_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _083_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _084_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _085_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _086_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _087_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _088_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _089_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _090_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _091_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _092_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _093_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _094_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _095_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _096_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _097_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _098_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _099_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _100_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _101_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _102_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _103_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _104_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _105_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _106_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _107_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _108_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _109_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _110_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _111_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _112_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _113_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _114_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _115_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _116_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _117_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _118_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _119_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _120_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _121_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _122_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _123_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _124_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _125_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _126_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _127_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _128_;
  (* src = "output/sensorTop.v:376.15-376.121" *)
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  wire _235_;
  wire _236_;
  wire _237_;
  wire _238_;
  wire _239_;
  wire _240_;
  wire _241_;
  wire _242_;
  wire _243_;
  wire _244_;
  wire _245_;
  wire _246_;
  wire _247_;
  wire _248_;
  wire _249_;
  wire _250_;
  wire _251_;
  wire _252_;
  wire _253_;
  wire _254_;
  wire _255_;
  wire _256_;
  wire _257_;
  wire _258_;
  wire _259_;
  wire _260_;
  wire _261_;
  wire _262_;
  wire _263_;
  wire _264_;
  wire _265_;
  wire _266_;
  wire _267_;
  wire _268_;
  wire _269_;
  wire _270_;
  wire _271_;
  wire _272_;
  wire _273_;
  wire _274_;
  wire _275_;
  wire _276_;
  wire _277_;
  wire _278_;
  wire _279_;
  wire _280_;
  wire _281_;
  wire _282_;
  wire _283_;
  wire _284_;
  wire _285_;
  wire _286_;
  wire _287_;
  wire _288_;
  wire _289_;
  wire _290_;
  wire _291_;
  wire _292_;
  wire _293_;
  wire _294_;
  wire _295_;
  wire _296_;
  wire _297_;
  wire _298_;
  wire _299_;
  wire _300_;
  wire _301_;
  wire _302_;
  wire _303_;
  wire _304_;
  wire _305_;
  wire _306_;
  wire _307_;
  wire _308_;
  wire _309_;
  wire _310_;
  wire _311_;
  wire _312_;
  wire _313_;
  wire _314_;
  wire _315_;
  wire _316_;
  wire _317_;
  wire _318_;
  wire _319_;
  wire _320_;
  wire _321_;
  wire _322_;
  wire _323_;
  wire _324_;
  wire _325_;
  wire _326_;
  wire _327_;
  wire _328_;
  wire _329_;
  wire _330_;
  wire _331_;
  wire _332_;
  wire _333_;
  wire _334_;
  wire _335_;
  wire _336_;
  wire _337_;
  wire _338_;
  wire _339_;
  wire _340_;
  wire _341_;
  wire _342_;
  wire _343_;
  wire _344_;
  wire _345_;
  wire _346_;
  wire _347_;
  wire _348_;
  wire _349_;
  wire _350_;
  wire _351_;
  wire _352_;
  wire _353_;
  wire _354_;
  wire _355_;
  wire _356_;
  wire _357_;
  wire _358_;
  wire _359_;
  wire _360_;
  wire _361_;
  wire _362_;
  wire _363_;
  wire _364_;
  wire _365_;
  wire _366_;
  wire _367_;
  wire _368_;
  wire _369_;
  wire _370_;
  wire _371_;
  wire _372_;
  wire _373_;
  wire _374_;
  wire _375_;
  wire _376_;
  wire _377_;
  wire _378_;
  wire _379_;
  wire _380_;
  wire _381_;
  wire _382_;
  wire _383_;
  wire _384_;
  wire _385_;
  wire _386_;
  wire _387_;
  wire _388_;
  (* src = "output/sensorTop.v:352.8-352.11" *)
  input clk;
  (* src = "output/sensorTop.v:358.32-358.39" *)
  input [191:0] data_in;
  (* src = "output/sensorTop.v:359.27-359.35" *)
  output [63:0] data_out;
  (* src = "output/sensorTop.v:360.31-360.45" *)
  wire [191:0] local_data_out;
  (* src = "output/sensorTop.v:354.8-354.13" *)
  input reset;
  (* src = "output/sensorTop.v:353.8-353.11" *)
  input set;
  (* src = "output/sensorTop.v:362.6-362.15" *)
  wire set_pulse;
  (* src = "output/sensorTop.v:355.8-355.13" *)
  input shift;
  NOT _389_ (
    .A(set),
    .Y(_130_)
  );
  NAND _390_ (
    .A(data_in[64]),
    .B(set),
    .Y(_131_)
  );
  NAND _391_ (
    .A(local_data_out[128]),
    .B(_130_),
    .Y(_132_)
  );
  NAND _392_ (
    .A(_131_),
    .B(_132_),
    .Y(_066_)
  );
  NAND _393_ (
    .A(set),
    .B(data_in[65]),
    .Y(_133_)
  );
  NAND _394_ (
    .A(_130_),
    .B(local_data_out[129]),
    .Y(_134_)
  );
  NAND _395_ (
    .A(_133_),
    .B(_134_),
    .Y(_077_)
  );
  NAND _396_ (
    .A(set),
    .B(data_in[66]),
    .Y(_135_)
  );
  NAND _397_ (
    .A(_130_),
    .B(local_data_out[130]),
    .Y(_136_)
  );
  NAND _398_ (
    .A(_135_),
    .B(_136_),
    .Y(_088_)
  );
  NAND _399_ (
    .A(set),
    .B(data_in[67]),
    .Y(_137_)
  );
  NAND _400_ (
    .A(_130_),
    .B(local_data_out[131]),
    .Y(_138_)
  );
  NAND _401_ (
    .A(_137_),
    .B(_138_),
    .Y(_099_)
  );
  NAND _402_ (
    .A(set),
    .B(data_in[68]),
    .Y(_139_)
  );
  NAND _403_ (
    .A(_130_),
    .B(local_data_out[132]),
    .Y(_140_)
  );
  NAND _404_ (
    .A(_139_),
    .B(_140_),
    .Y(_110_)
  );
  NAND _405_ (
    .A(set),
    .B(data_in[69]),
    .Y(_141_)
  );
  NAND _406_ (
    .A(_130_),
    .B(local_data_out[133]),
    .Y(_142_)
  );
  NAND _407_ (
    .A(_141_),
    .B(_142_),
    .Y(_121_)
  );
  NAND _408_ (
    .A(set),
    .B(data_in[70]),
    .Y(_143_)
  );
  NAND _409_ (
    .A(_130_),
    .B(local_data_out[134]),
    .Y(_144_)
  );
  NAND _410_ (
    .A(_143_),
    .B(_144_),
    .Y(_126_)
  );
  NAND _411_ (
    .A(set),
    .B(data_in[71]),
    .Y(_145_)
  );
  NAND _412_ (
    .A(_130_),
    .B(local_data_out[135]),
    .Y(_146_)
  );
  NAND _413_ (
    .A(_145_),
    .B(_146_),
    .Y(_127_)
  );
  NAND _414_ (
    .A(set),
    .B(data_in[72]),
    .Y(_147_)
  );
  NAND _415_ (
    .A(_130_),
    .B(local_data_out[136]),
    .Y(_148_)
  );
  NAND _416_ (
    .A(_147_),
    .B(_148_),
    .Y(_128_)
  );
  NAND _417_ (
    .A(set),
    .B(data_in[73]),
    .Y(_149_)
  );
  NAND _418_ (
    .A(_130_),
    .B(local_data_out[137]),
    .Y(_150_)
  );
  NAND _419_ (
    .A(_149_),
    .B(_150_),
    .Y(_129_)
  );
  NAND _420_ (
    .A(set),
    .B(data_in[74]),
    .Y(_151_)
  );
  NAND _421_ (
    .A(_130_),
    .B(local_data_out[138]),
    .Y(_152_)
  );
  NAND _422_ (
    .A(_151_),
    .B(_152_),
    .Y(_067_)
  );
  NAND _423_ (
    .A(set),
    .B(data_in[75]),
    .Y(_153_)
  );
  NAND _424_ (
    .A(_130_),
    .B(local_data_out[139]),
    .Y(_154_)
  );
  NAND _425_ (
    .A(_153_),
    .B(_154_),
    .Y(_068_)
  );
  NAND _426_ (
    .A(set),
    .B(data_in[76]),
    .Y(_155_)
  );
  NAND _427_ (
    .A(_130_),
    .B(local_data_out[140]),
    .Y(_156_)
  );
  NAND _428_ (
    .A(_155_),
    .B(_156_),
    .Y(_069_)
  );
  NAND _429_ (
    .A(set),
    .B(data_in[77]),
    .Y(_157_)
  );
  NAND _430_ (
    .A(_130_),
    .B(local_data_out[141]),
    .Y(_158_)
  );
  NAND _431_ (
    .A(_157_),
    .B(_158_),
    .Y(_070_)
  );
  NAND _432_ (
    .A(set),
    .B(data_in[78]),
    .Y(_159_)
  );
  NAND _433_ (
    .A(_130_),
    .B(local_data_out[142]),
    .Y(_160_)
  );
  NAND _434_ (
    .A(_159_),
    .B(_160_),
    .Y(_071_)
  );
  NAND _435_ (
    .A(set),
    .B(data_in[79]),
    .Y(_161_)
  );
  NAND _436_ (
    .A(_130_),
    .B(local_data_out[143]),
    .Y(_162_)
  );
  NAND _437_ (
    .A(_161_),
    .B(_162_),
    .Y(_072_)
  );
  NAND _438_ (
    .A(set),
    .B(data_in[80]),
    .Y(_163_)
  );
  NAND _439_ (
    .A(_130_),
    .B(local_data_out[144]),
    .Y(_164_)
  );
  NAND _440_ (
    .A(_163_),
    .B(_164_),
    .Y(_073_)
  );
  NAND _441_ (
    .A(set),
    .B(data_in[81]),
    .Y(_165_)
  );
  NAND _442_ (
    .A(_130_),
    .B(local_data_out[145]),
    .Y(_166_)
  );
  NAND _443_ (
    .A(_165_),
    .B(_166_),
    .Y(_074_)
  );
  NAND _444_ (
    .A(set),
    .B(data_in[82]),
    .Y(_167_)
  );
  NAND _445_ (
    .A(_130_),
    .B(local_data_out[146]),
    .Y(_168_)
  );
  NAND _446_ (
    .A(_167_),
    .B(_168_),
    .Y(_075_)
  );
  NAND _447_ (
    .A(set),
    .B(data_in[83]),
    .Y(_169_)
  );
  NAND _448_ (
    .A(_130_),
    .B(local_data_out[147]),
    .Y(_170_)
  );
  NAND _449_ (
    .A(_169_),
    .B(_170_),
    .Y(_076_)
  );
  NAND _450_ (
    .A(set),
    .B(data_in[84]),
    .Y(_171_)
  );
  NAND _451_ (
    .A(_130_),
    .B(local_data_out[148]),
    .Y(_172_)
  );
  NAND _452_ (
    .A(_171_),
    .B(_172_),
    .Y(_078_)
  );
  NAND _453_ (
    .A(set),
    .B(data_in[85]),
    .Y(_173_)
  );
  NAND _454_ (
    .A(_130_),
    .B(local_data_out[149]),
    .Y(_174_)
  );
  NAND _455_ (
    .A(_173_),
    .B(_174_),
    .Y(_079_)
  );
  NAND _456_ (
    .A(set),
    .B(data_in[86]),
    .Y(_175_)
  );
  NAND _457_ (
    .A(_130_),
    .B(local_data_out[150]),
    .Y(_176_)
  );
  NAND _458_ (
    .A(_175_),
    .B(_176_),
    .Y(_080_)
  );
  NAND _459_ (
    .A(set),
    .B(data_in[87]),
    .Y(_177_)
  );
  NAND _460_ (
    .A(_130_),
    .B(local_data_out[151]),
    .Y(_178_)
  );
  NAND _461_ (
    .A(_177_),
    .B(_178_),
    .Y(_081_)
  );
  NAND _462_ (
    .A(set),
    .B(data_in[88]),
    .Y(_179_)
  );
  NAND _463_ (
    .A(_130_),
    .B(local_data_out[152]),
    .Y(_180_)
  );
  NAND _464_ (
    .A(_179_),
    .B(_180_),
    .Y(_082_)
  );
  NAND _465_ (
    .A(set),
    .B(data_in[89]),
    .Y(_181_)
  );
  NAND _466_ (
    .A(_130_),
    .B(local_data_out[153]),
    .Y(_182_)
  );
  NAND _467_ (
    .A(_181_),
    .B(_182_),
    .Y(_083_)
  );
  NAND _468_ (
    .A(set),
    .B(data_in[90]),
    .Y(_183_)
  );
  NAND _469_ (
    .A(_130_),
    .B(local_data_out[154]),
    .Y(_184_)
  );
  NAND _470_ (
    .A(_183_),
    .B(_184_),
    .Y(_084_)
  );
  NAND _471_ (
    .A(set),
    .B(data_in[91]),
    .Y(_185_)
  );
  NAND _472_ (
    .A(_130_),
    .B(local_data_out[155]),
    .Y(_186_)
  );
  NAND _473_ (
    .A(_185_),
    .B(_186_),
    .Y(_085_)
  );
  NAND _474_ (
    .A(set),
    .B(data_in[92]),
    .Y(_187_)
  );
  NAND _475_ (
    .A(_130_),
    .B(local_data_out[156]),
    .Y(_188_)
  );
  NAND _476_ (
    .A(_187_),
    .B(_188_),
    .Y(_086_)
  );
  NAND _477_ (
    .A(set),
    .B(data_in[93]),
    .Y(_189_)
  );
  NAND _478_ (
    .A(_130_),
    .B(local_data_out[157]),
    .Y(_190_)
  );
  NAND _479_ (
    .A(_189_),
    .B(_190_),
    .Y(_087_)
  );
  NAND _480_ (
    .A(set),
    .B(data_in[94]),
    .Y(_191_)
  );
  NAND _481_ (
    .A(_130_),
    .B(local_data_out[158]),
    .Y(_192_)
  );
  NAND _482_ (
    .A(_191_),
    .B(_192_),
    .Y(_089_)
  );
  NAND _483_ (
    .A(set),
    .B(data_in[95]),
    .Y(_193_)
  );
  NAND _484_ (
    .A(_130_),
    .B(local_data_out[159]),
    .Y(_194_)
  );
  NAND _485_ (
    .A(_193_),
    .B(_194_),
    .Y(_090_)
  );
  NAND _486_ (
    .A(set),
    .B(data_in[96]),
    .Y(_195_)
  );
  NAND _487_ (
    .A(_130_),
    .B(local_data_out[160]),
    .Y(_196_)
  );
  NAND _488_ (
    .A(_195_),
    .B(_196_),
    .Y(_091_)
  );
  NAND _489_ (
    .A(set),
    .B(data_in[97]),
    .Y(_197_)
  );
  NAND _490_ (
    .A(_130_),
    .B(local_data_out[161]),
    .Y(_198_)
  );
  NAND _491_ (
    .A(_197_),
    .B(_198_),
    .Y(_092_)
  );
  NAND _492_ (
    .A(set),
    .B(data_in[98]),
    .Y(_199_)
  );
  NAND _493_ (
    .A(_130_),
    .B(local_data_out[162]),
    .Y(_200_)
  );
  NAND _494_ (
    .A(_199_),
    .B(_200_),
    .Y(_093_)
  );
  NAND _495_ (
    .A(set),
    .B(data_in[99]),
    .Y(_201_)
  );
  NAND _496_ (
    .A(_130_),
    .B(local_data_out[163]),
    .Y(_202_)
  );
  NAND _497_ (
    .A(_201_),
    .B(_202_),
    .Y(_094_)
  );
  NAND _498_ (
    .A(set),
    .B(data_in[100]),
    .Y(_203_)
  );
  NAND _499_ (
    .A(_130_),
    .B(local_data_out[164]),
    .Y(_204_)
  );
  NAND _500_ (
    .A(_203_),
    .B(_204_),
    .Y(_095_)
  );
  NAND _501_ (
    .A(set),
    .B(data_in[101]),
    .Y(_205_)
  );
  NAND _502_ (
    .A(_130_),
    .B(local_data_out[165]),
    .Y(_206_)
  );
  NAND _503_ (
    .A(_205_),
    .B(_206_),
    .Y(_096_)
  );
  NAND _504_ (
    .A(set),
    .B(data_in[102]),
    .Y(_207_)
  );
  NAND _505_ (
    .A(_130_),
    .B(local_data_out[166]),
    .Y(_208_)
  );
  NAND _506_ (
    .A(_207_),
    .B(_208_),
    .Y(_097_)
  );
  NAND _507_ (
    .A(set),
    .B(data_in[103]),
    .Y(_209_)
  );
  NAND _508_ (
    .A(_130_),
    .B(local_data_out[167]),
    .Y(_210_)
  );
  NAND _509_ (
    .A(_209_),
    .B(_210_),
    .Y(_098_)
  );
  NAND _510_ (
    .A(set),
    .B(data_in[104]),
    .Y(_211_)
  );
  NAND _511_ (
    .A(_130_),
    .B(local_data_out[168]),
    .Y(_212_)
  );
  NAND _512_ (
    .A(_211_),
    .B(_212_),
    .Y(_100_)
  );
  NAND _513_ (
    .A(set),
    .B(data_in[105]),
    .Y(_213_)
  );
  NAND _514_ (
    .A(_130_),
    .B(local_data_out[169]),
    .Y(_214_)
  );
  NAND _515_ (
    .A(_213_),
    .B(_214_),
    .Y(_101_)
  );
  NAND _516_ (
    .A(set),
    .B(data_in[106]),
    .Y(_215_)
  );
  NAND _517_ (
    .A(_130_),
    .B(local_data_out[170]),
    .Y(_216_)
  );
  NAND _518_ (
    .A(_215_),
    .B(_216_),
    .Y(_102_)
  );
  NAND _519_ (
    .A(set),
    .B(data_in[107]),
    .Y(_217_)
  );
  NAND _520_ (
    .A(_130_),
    .B(local_data_out[171]),
    .Y(_218_)
  );
  NAND _521_ (
    .A(_217_),
    .B(_218_),
    .Y(_103_)
  );
  NAND _522_ (
    .A(set),
    .B(data_in[108]),
    .Y(_219_)
  );
  NAND _523_ (
    .A(_130_),
    .B(local_data_out[172]),
    .Y(_220_)
  );
  NAND _524_ (
    .A(_219_),
    .B(_220_),
    .Y(_104_)
  );
  NAND _525_ (
    .A(set),
    .B(data_in[109]),
    .Y(_221_)
  );
  NAND _526_ (
    .A(_130_),
    .B(local_data_out[173]),
    .Y(_222_)
  );
  NAND _527_ (
    .A(_221_),
    .B(_222_),
    .Y(_105_)
  );
  NAND _528_ (
    .A(set),
    .B(data_in[110]),
    .Y(_223_)
  );
  NAND _529_ (
    .A(_130_),
    .B(local_data_out[174]),
    .Y(_224_)
  );
  NAND _530_ (
    .A(_223_),
    .B(_224_),
    .Y(_106_)
  );
  NAND _531_ (
    .A(set),
    .B(data_in[111]),
    .Y(_225_)
  );
  NAND _532_ (
    .A(_130_),
    .B(local_data_out[175]),
    .Y(_226_)
  );
  NAND _533_ (
    .A(_225_),
    .B(_226_),
    .Y(_107_)
  );
  NAND _534_ (
    .A(set),
    .B(data_in[112]),
    .Y(_227_)
  );
  NAND _535_ (
    .A(_130_),
    .B(local_data_out[176]),
    .Y(_228_)
  );
  NAND _536_ (
    .A(_227_),
    .B(_228_),
    .Y(_108_)
  );
  NAND _537_ (
    .A(set),
    .B(data_in[113]),
    .Y(_229_)
  );
  NAND _538_ (
    .A(_130_),
    .B(local_data_out[177]),
    .Y(_230_)
  );
  NAND _539_ (
    .A(_229_),
    .B(_230_),
    .Y(_109_)
  );
  NAND _540_ (
    .A(set),
    .B(data_in[114]),
    .Y(_231_)
  );
  NAND _541_ (
    .A(_130_),
    .B(local_data_out[178]),
    .Y(_232_)
  );
  NAND _542_ (
    .A(_231_),
    .B(_232_),
    .Y(_111_)
  );
  NAND _543_ (
    .A(set),
    .B(data_in[115]),
    .Y(_233_)
  );
  NAND _544_ (
    .A(_130_),
    .B(local_data_out[179]),
    .Y(_234_)
  );
  NAND _545_ (
    .A(_233_),
    .B(_234_),
    .Y(_112_)
  );
  NAND _546_ (
    .A(set),
    .B(data_in[116]),
    .Y(_235_)
  );
  NAND _547_ (
    .A(_130_),
    .B(local_data_out[180]),
    .Y(_236_)
  );
  NAND _548_ (
    .A(_235_),
    .B(_236_),
    .Y(_113_)
  );
  NAND _549_ (
    .A(set),
    .B(data_in[117]),
    .Y(_237_)
  );
  NAND _550_ (
    .A(_130_),
    .B(local_data_out[181]),
    .Y(_238_)
  );
  NAND _551_ (
    .A(_237_),
    .B(_238_),
    .Y(_114_)
  );
  NAND _552_ (
    .A(set),
    .B(data_in[118]),
    .Y(_239_)
  );
  NAND _553_ (
    .A(_130_),
    .B(local_data_out[182]),
    .Y(_240_)
  );
  NAND _554_ (
    .A(_239_),
    .B(_240_),
    .Y(_115_)
  );
  NAND _555_ (
    .A(set),
    .B(data_in[119]),
    .Y(_241_)
  );
  NAND _556_ (
    .A(_130_),
    .B(local_data_out[183]),
    .Y(_242_)
  );
  NAND _557_ (
    .A(_241_),
    .B(_242_),
    .Y(_116_)
  );
  NAND _558_ (
    .A(set),
    .B(data_in[120]),
    .Y(_243_)
  );
  NAND _559_ (
    .A(_130_),
    .B(local_data_out[184]),
    .Y(_244_)
  );
  NAND _560_ (
    .A(_243_),
    .B(_244_),
    .Y(_117_)
  );
  NAND _561_ (
    .A(set),
    .B(data_in[121]),
    .Y(_245_)
  );
  NAND _562_ (
    .A(_130_),
    .B(local_data_out[185]),
    .Y(_246_)
  );
  NAND _563_ (
    .A(_245_),
    .B(_246_),
    .Y(_118_)
  );
  NAND _564_ (
    .A(set),
    .B(data_in[122]),
    .Y(_247_)
  );
  NAND _565_ (
    .A(_130_),
    .B(local_data_out[186]),
    .Y(_248_)
  );
  NAND _566_ (
    .A(_247_),
    .B(_248_),
    .Y(_119_)
  );
  NAND _567_ (
    .A(set),
    .B(data_in[123]),
    .Y(_249_)
  );
  NAND _568_ (
    .A(_130_),
    .B(local_data_out[187]),
    .Y(_250_)
  );
  NAND _569_ (
    .A(_249_),
    .B(_250_),
    .Y(_120_)
  );
  NAND _570_ (
    .A(set),
    .B(data_in[124]),
    .Y(_251_)
  );
  NAND _571_ (
    .A(_130_),
    .B(local_data_out[188]),
    .Y(_252_)
  );
  NAND _572_ (
    .A(_251_),
    .B(_252_),
    .Y(_122_)
  );
  NAND _573_ (
    .A(set),
    .B(data_in[125]),
    .Y(_253_)
  );
  NAND _574_ (
    .A(_130_),
    .B(local_data_out[189]),
    .Y(_254_)
  );
  NAND _575_ (
    .A(_253_),
    .B(_254_),
    .Y(_123_)
  );
  NAND _576_ (
    .A(set),
    .B(data_in[126]),
    .Y(_255_)
  );
  NAND _577_ (
    .A(_130_),
    .B(local_data_out[190]),
    .Y(_256_)
  );
  NAND _578_ (
    .A(_255_),
    .B(_256_),
    .Y(_124_)
  );
  NAND _579_ (
    .A(set),
    .B(data_in[127]),
    .Y(_257_)
  );
  NAND _580_ (
    .A(_130_),
    .B(local_data_out[191]),
    .Y(_258_)
  );
  NAND _581_ (
    .A(_257_),
    .B(_258_),
    .Y(_125_)
  );
  NAND _582_ (
    .A(set),
    .B(data_in[0]),
    .Y(_259_)
  );
  NAND _583_ (
    .A(_130_),
    .B(local_data_out[64]),
    .Y(_260_)
  );
  NAND _584_ (
    .A(_259_),
    .B(_260_),
    .Y(_002_)
  );
  NAND _585_ (
    .A(set),
    .B(data_in[1]),
    .Y(_261_)
  );
  NAND _586_ (
    .A(_130_),
    .B(local_data_out[65]),
    .Y(_262_)
  );
  NAND _587_ (
    .A(_261_),
    .B(_262_),
    .Y(_013_)
  );
  NAND _588_ (
    .A(set),
    .B(data_in[2]),
    .Y(_263_)
  );
  NAND _589_ (
    .A(_130_),
    .B(local_data_out[66]),
    .Y(_264_)
  );
  NAND _590_ (
    .A(_263_),
    .B(_264_),
    .Y(_024_)
  );
  NAND _591_ (
    .A(set),
    .B(data_in[3]),
    .Y(_265_)
  );
  NAND _592_ (
    .A(_130_),
    .B(local_data_out[67]),
    .Y(_266_)
  );
  NAND _593_ (
    .A(_265_),
    .B(_266_),
    .Y(_035_)
  );
  NAND _594_ (
    .A(set),
    .B(data_in[4]),
    .Y(_267_)
  );
  NAND _595_ (
    .A(_130_),
    .B(local_data_out[68]),
    .Y(_268_)
  );
  NAND _596_ (
    .A(_267_),
    .B(_268_),
    .Y(_046_)
  );
  NAND _597_ (
    .A(set),
    .B(data_in[5]),
    .Y(_269_)
  );
  NAND _598_ (
    .A(_130_),
    .B(local_data_out[69]),
    .Y(_270_)
  );
  NAND _599_ (
    .A(_269_),
    .B(_270_),
    .Y(_057_)
  );
  NAND _600_ (
    .A(set),
    .B(data_in[6]),
    .Y(_271_)
  );
  NAND _601_ (
    .A(_130_),
    .B(local_data_out[70]),
    .Y(_272_)
  );
  NAND _602_ (
    .A(_271_),
    .B(_272_),
    .Y(_062_)
  );
  NAND _603_ (
    .A(set),
    .B(data_in[7]),
    .Y(_273_)
  );
  NAND _604_ (
    .A(_130_),
    .B(local_data_out[71]),
    .Y(_274_)
  );
  NAND _605_ (
    .A(_273_),
    .B(_274_),
    .Y(_063_)
  );
  NAND _606_ (
    .A(set),
    .B(data_in[8]),
    .Y(_275_)
  );
  NAND _607_ (
    .A(_130_),
    .B(local_data_out[72]),
    .Y(_276_)
  );
  NAND _608_ (
    .A(_275_),
    .B(_276_),
    .Y(_064_)
  );
  NAND _609_ (
    .A(set),
    .B(data_in[9]),
    .Y(_277_)
  );
  NAND _610_ (
    .A(_130_),
    .B(local_data_out[73]),
    .Y(_278_)
  );
  NAND _611_ (
    .A(_277_),
    .B(_278_),
    .Y(_065_)
  );
  NAND _612_ (
    .A(set),
    .B(data_in[10]),
    .Y(_279_)
  );
  NAND _613_ (
    .A(_130_),
    .B(local_data_out[74]),
    .Y(_280_)
  );
  NAND _614_ (
    .A(_279_),
    .B(_280_),
    .Y(_003_)
  );
  NAND _615_ (
    .A(set),
    .B(data_in[11]),
    .Y(_281_)
  );
  NAND _616_ (
    .A(_130_),
    .B(local_data_out[75]),
    .Y(_282_)
  );
  NAND _617_ (
    .A(_281_),
    .B(_282_),
    .Y(_004_)
  );
  NAND _618_ (
    .A(set),
    .B(data_in[12]),
    .Y(_283_)
  );
  NAND _619_ (
    .A(_130_),
    .B(local_data_out[76]),
    .Y(_284_)
  );
  NAND _620_ (
    .A(_283_),
    .B(_284_),
    .Y(_005_)
  );
  NAND _621_ (
    .A(set),
    .B(data_in[13]),
    .Y(_285_)
  );
  NAND _622_ (
    .A(_130_),
    .B(local_data_out[77]),
    .Y(_286_)
  );
  NAND _623_ (
    .A(_285_),
    .B(_286_),
    .Y(_006_)
  );
  NAND _624_ (
    .A(set),
    .B(data_in[14]),
    .Y(_287_)
  );
  NAND _625_ (
    .A(_130_),
    .B(local_data_out[78]),
    .Y(_288_)
  );
  NAND _626_ (
    .A(_287_),
    .B(_288_),
    .Y(_007_)
  );
  NAND _627_ (
    .A(set),
    .B(data_in[15]),
    .Y(_289_)
  );
  NAND _628_ (
    .A(_130_),
    .B(local_data_out[79]),
    .Y(_290_)
  );
  NAND _629_ (
    .A(_289_),
    .B(_290_),
    .Y(_008_)
  );
  NAND _630_ (
    .A(set),
    .B(data_in[16]),
    .Y(_291_)
  );
  NAND _631_ (
    .A(_130_),
    .B(local_data_out[80]),
    .Y(_292_)
  );
  NAND _632_ (
    .A(_291_),
    .B(_292_),
    .Y(_009_)
  );
  NAND _633_ (
    .A(set),
    .B(data_in[17]),
    .Y(_293_)
  );
  NAND _634_ (
    .A(_130_),
    .B(local_data_out[81]),
    .Y(_294_)
  );
  NAND _635_ (
    .A(_293_),
    .B(_294_),
    .Y(_010_)
  );
  NAND _636_ (
    .A(set),
    .B(data_in[18]),
    .Y(_295_)
  );
  NAND _637_ (
    .A(_130_),
    .B(local_data_out[82]),
    .Y(_296_)
  );
  NAND _638_ (
    .A(_295_),
    .B(_296_),
    .Y(_011_)
  );
  NAND _639_ (
    .A(set),
    .B(data_in[19]),
    .Y(_297_)
  );
  NAND _640_ (
    .A(_130_),
    .B(local_data_out[83]),
    .Y(_298_)
  );
  NAND _641_ (
    .A(_297_),
    .B(_298_),
    .Y(_012_)
  );
  NAND _642_ (
    .A(set),
    .B(data_in[20]),
    .Y(_299_)
  );
  NAND _643_ (
    .A(_130_),
    .B(local_data_out[84]),
    .Y(_300_)
  );
  NAND _644_ (
    .A(_299_),
    .B(_300_),
    .Y(_014_)
  );
  NAND _645_ (
    .A(set),
    .B(data_in[21]),
    .Y(_301_)
  );
  NAND _646_ (
    .A(_130_),
    .B(local_data_out[85]),
    .Y(_302_)
  );
  NAND _647_ (
    .A(_301_),
    .B(_302_),
    .Y(_015_)
  );
  NAND _648_ (
    .A(set),
    .B(data_in[22]),
    .Y(_303_)
  );
  NAND _649_ (
    .A(_130_),
    .B(local_data_out[86]),
    .Y(_304_)
  );
  NAND _650_ (
    .A(_303_),
    .B(_304_),
    .Y(_016_)
  );
  NAND _651_ (
    .A(set),
    .B(data_in[23]),
    .Y(_305_)
  );
  NAND _652_ (
    .A(_130_),
    .B(local_data_out[87]),
    .Y(_306_)
  );
  NAND _653_ (
    .A(_305_),
    .B(_306_),
    .Y(_017_)
  );
  NAND _654_ (
    .A(set),
    .B(data_in[24]),
    .Y(_307_)
  );
  NAND _655_ (
    .A(_130_),
    .B(local_data_out[88]),
    .Y(_308_)
  );
  NAND _656_ (
    .A(_307_),
    .B(_308_),
    .Y(_018_)
  );
  NAND _657_ (
    .A(set),
    .B(data_in[25]),
    .Y(_309_)
  );
  NAND _658_ (
    .A(_130_),
    .B(local_data_out[89]),
    .Y(_310_)
  );
  NAND _659_ (
    .A(_309_),
    .B(_310_),
    .Y(_019_)
  );
  NAND _660_ (
    .A(set),
    .B(data_in[26]),
    .Y(_311_)
  );
  NAND _661_ (
    .A(_130_),
    .B(local_data_out[90]),
    .Y(_312_)
  );
  NAND _662_ (
    .A(_311_),
    .B(_312_),
    .Y(_020_)
  );
  NAND _663_ (
    .A(set),
    .B(data_in[27]),
    .Y(_313_)
  );
  NAND _664_ (
    .A(_130_),
    .B(local_data_out[91]),
    .Y(_314_)
  );
  NAND _665_ (
    .A(_313_),
    .B(_314_),
    .Y(_021_)
  );
  NAND _666_ (
    .A(set),
    .B(data_in[28]),
    .Y(_315_)
  );
  NAND _667_ (
    .A(_130_),
    .B(local_data_out[92]),
    .Y(_316_)
  );
  NAND _668_ (
    .A(_315_),
    .B(_316_),
    .Y(_022_)
  );
  NAND _669_ (
    .A(set),
    .B(data_in[29]),
    .Y(_317_)
  );
  NAND _670_ (
    .A(_130_),
    .B(local_data_out[93]),
    .Y(_318_)
  );
  NAND _671_ (
    .A(_317_),
    .B(_318_),
    .Y(_023_)
  );
  NAND _672_ (
    .A(set),
    .B(data_in[30]),
    .Y(_319_)
  );
  NAND _673_ (
    .A(_130_),
    .B(local_data_out[94]),
    .Y(_320_)
  );
  NAND _674_ (
    .A(_319_),
    .B(_320_),
    .Y(_025_)
  );
  NAND _675_ (
    .A(set),
    .B(data_in[31]),
    .Y(_321_)
  );
  NAND _676_ (
    .A(_130_),
    .B(local_data_out[95]),
    .Y(_322_)
  );
  NAND _677_ (
    .A(_321_),
    .B(_322_),
    .Y(_026_)
  );
  NAND _678_ (
    .A(set),
    .B(data_in[32]),
    .Y(_323_)
  );
  NAND _679_ (
    .A(_130_),
    .B(local_data_out[96]),
    .Y(_324_)
  );
  NAND _680_ (
    .A(_323_),
    .B(_324_),
    .Y(_027_)
  );
  NAND _681_ (
    .A(set),
    .B(data_in[33]),
    .Y(_325_)
  );
  NAND _682_ (
    .A(_130_),
    .B(local_data_out[97]),
    .Y(_326_)
  );
  NAND _683_ (
    .A(_325_),
    .B(_326_),
    .Y(_028_)
  );
  NAND _684_ (
    .A(set),
    .B(data_in[34]),
    .Y(_327_)
  );
  NAND _685_ (
    .A(_130_),
    .B(local_data_out[98]),
    .Y(_328_)
  );
  NAND _686_ (
    .A(_327_),
    .B(_328_),
    .Y(_029_)
  );
  NAND _687_ (
    .A(set),
    .B(data_in[35]),
    .Y(_329_)
  );
  NAND _688_ (
    .A(_130_),
    .B(local_data_out[99]),
    .Y(_330_)
  );
  NAND _689_ (
    .A(_329_),
    .B(_330_),
    .Y(_030_)
  );
  NAND _690_ (
    .A(set),
    .B(data_in[36]),
    .Y(_331_)
  );
  NAND _691_ (
    .A(_130_),
    .B(local_data_out[100]),
    .Y(_332_)
  );
  NAND _692_ (
    .A(_331_),
    .B(_332_),
    .Y(_031_)
  );
  NAND _693_ (
    .A(set),
    .B(data_in[37]),
    .Y(_333_)
  );
  NAND _694_ (
    .A(_130_),
    .B(local_data_out[101]),
    .Y(_334_)
  );
  NAND _695_ (
    .A(_333_),
    .B(_334_),
    .Y(_032_)
  );
  NAND _696_ (
    .A(set),
    .B(data_in[38]),
    .Y(_335_)
  );
  NAND _697_ (
    .A(_130_),
    .B(local_data_out[102]),
    .Y(_336_)
  );
  NAND _698_ (
    .A(_335_),
    .B(_336_),
    .Y(_033_)
  );
  NAND _699_ (
    .A(set),
    .B(data_in[39]),
    .Y(_337_)
  );
  NAND _700_ (
    .A(_130_),
    .B(local_data_out[103]),
    .Y(_338_)
  );
  NAND _701_ (
    .A(_337_),
    .B(_338_),
    .Y(_034_)
  );
  NAND _702_ (
    .A(set),
    .B(data_in[40]),
    .Y(_339_)
  );
  NAND _703_ (
    .A(_130_),
    .B(local_data_out[104]),
    .Y(_340_)
  );
  NAND _704_ (
    .A(_339_),
    .B(_340_),
    .Y(_036_)
  );
  NAND _705_ (
    .A(set),
    .B(data_in[41]),
    .Y(_341_)
  );
  NAND _706_ (
    .A(_130_),
    .B(local_data_out[105]),
    .Y(_342_)
  );
  NAND _707_ (
    .A(_341_),
    .B(_342_),
    .Y(_037_)
  );
  NAND _708_ (
    .A(set),
    .B(data_in[42]),
    .Y(_343_)
  );
  NAND _709_ (
    .A(_130_),
    .B(local_data_out[106]),
    .Y(_344_)
  );
  NAND _710_ (
    .A(_343_),
    .B(_344_),
    .Y(_038_)
  );
  NAND _711_ (
    .A(set),
    .B(data_in[43]),
    .Y(_345_)
  );
  NAND _712_ (
    .A(_130_),
    .B(local_data_out[107]),
    .Y(_346_)
  );
  NAND _713_ (
    .A(_345_),
    .B(_346_),
    .Y(_039_)
  );
  NAND _714_ (
    .A(set),
    .B(data_in[44]),
    .Y(_347_)
  );
  NAND _715_ (
    .A(_130_),
    .B(local_data_out[108]),
    .Y(_348_)
  );
  NAND _716_ (
    .A(_347_),
    .B(_348_),
    .Y(_040_)
  );
  NAND _717_ (
    .A(set),
    .B(data_in[45]),
    .Y(_349_)
  );
  NAND _718_ (
    .A(_130_),
    .B(local_data_out[109]),
    .Y(_350_)
  );
  NAND _719_ (
    .A(_349_),
    .B(_350_),
    .Y(_041_)
  );
  NAND _720_ (
    .A(set),
    .B(data_in[46]),
    .Y(_351_)
  );
  NAND _721_ (
    .A(_130_),
    .B(local_data_out[110]),
    .Y(_352_)
  );
  NAND _722_ (
    .A(_351_),
    .B(_352_),
    .Y(_042_)
  );
  NAND _723_ (
    .A(set),
    .B(data_in[47]),
    .Y(_353_)
  );
  NAND _724_ (
    .A(_130_),
    .B(local_data_out[111]),
    .Y(_354_)
  );
  NAND _725_ (
    .A(_353_),
    .B(_354_),
    .Y(_043_)
  );
  NAND _726_ (
    .A(set),
    .B(data_in[48]),
    .Y(_355_)
  );
  NAND _727_ (
    .A(_130_),
    .B(local_data_out[112]),
    .Y(_356_)
  );
  NAND _728_ (
    .A(_355_),
    .B(_356_),
    .Y(_044_)
  );
  NAND _729_ (
    .A(set),
    .B(data_in[49]),
    .Y(_357_)
  );
  NAND _730_ (
    .A(_130_),
    .B(local_data_out[113]),
    .Y(_358_)
  );
  NAND _731_ (
    .A(_357_),
    .B(_358_),
    .Y(_045_)
  );
  NAND _732_ (
    .A(set),
    .B(data_in[50]),
    .Y(_359_)
  );
  NAND _733_ (
    .A(_130_),
    .B(local_data_out[114]),
    .Y(_360_)
  );
  NAND _734_ (
    .A(_359_),
    .B(_360_),
    .Y(_047_)
  );
  NAND _735_ (
    .A(set),
    .B(data_in[51]),
    .Y(_361_)
  );
  NAND _736_ (
    .A(_130_),
    .B(local_data_out[115]),
    .Y(_362_)
  );
  NAND _737_ (
    .A(_361_),
    .B(_362_),
    .Y(_048_)
  );
  NAND _738_ (
    .A(set),
    .B(data_in[52]),
    .Y(_363_)
  );
  NAND _739_ (
    .A(_130_),
    .B(local_data_out[116]),
    .Y(_364_)
  );
  NAND _740_ (
    .A(_363_),
    .B(_364_),
    .Y(_049_)
  );
  NAND _741_ (
    .A(set),
    .B(data_in[53]),
    .Y(_365_)
  );
  NAND _742_ (
    .A(_130_),
    .B(local_data_out[117]),
    .Y(_366_)
  );
  NAND _743_ (
    .A(_365_),
    .B(_366_),
    .Y(_050_)
  );
  NAND _744_ (
    .A(set),
    .B(data_in[54]),
    .Y(_367_)
  );
  NAND _745_ (
    .A(_130_),
    .B(local_data_out[118]),
    .Y(_368_)
  );
  NAND _746_ (
    .A(_367_),
    .B(_368_),
    .Y(_051_)
  );
  NAND _747_ (
    .A(set),
    .B(data_in[55]),
    .Y(_369_)
  );
  NAND _748_ (
    .A(_130_),
    .B(local_data_out[119]),
    .Y(_370_)
  );
  NAND _749_ (
    .A(_369_),
    .B(_370_),
    .Y(_052_)
  );
  NAND _750_ (
    .A(set),
    .B(data_in[56]),
    .Y(_371_)
  );
  NAND _751_ (
    .A(_130_),
    .B(local_data_out[120]),
    .Y(_372_)
  );
  NAND _752_ (
    .A(_371_),
    .B(_372_),
    .Y(_053_)
  );
  NAND _753_ (
    .A(set),
    .B(data_in[57]),
    .Y(_373_)
  );
  NAND _754_ (
    .A(_130_),
    .B(local_data_out[121]),
    .Y(_374_)
  );
  NAND _755_ (
    .A(_373_),
    .B(_374_),
    .Y(_054_)
  );
  NAND _756_ (
    .A(set),
    .B(data_in[58]),
    .Y(_375_)
  );
  NAND _757_ (
    .A(_130_),
    .B(local_data_out[122]),
    .Y(_376_)
  );
  NAND _758_ (
    .A(_375_),
    .B(_376_),
    .Y(_055_)
  );
  NAND _759_ (
    .A(set),
    .B(data_in[59]),
    .Y(_377_)
  );
  NAND _760_ (
    .A(_130_),
    .B(local_data_out[123]),
    .Y(_378_)
  );
  NAND _761_ (
    .A(_377_),
    .B(_378_),
    .Y(_056_)
  );
  NAND _762_ (
    .A(set),
    .B(data_in[60]),
    .Y(_379_)
  );
  NAND _763_ (
    .A(_130_),
    .B(local_data_out[124]),
    .Y(_380_)
  );
  NAND _764_ (
    .A(_379_),
    .B(_380_),
    .Y(_058_)
  );
  NAND _765_ (
    .A(set),
    .B(data_in[61]),
    .Y(_381_)
  );
  NAND _766_ (
    .A(_130_),
    .B(local_data_out[125]),
    .Y(_382_)
  );
  NAND _767_ (
    .A(_381_),
    .B(_382_),
    .Y(_059_)
  );
  NAND _768_ (
    .A(set),
    .B(data_in[62]),
    .Y(_383_)
  );
  NAND _769_ (
    .A(_130_),
    .B(local_data_out[126]),
    .Y(_384_)
  );
  NAND _770_ (
    .A(_383_),
    .B(_384_),
    .Y(_060_)
  );
  NAND _771_ (
    .A(set),
    .B(data_in[63]),
    .Y(_385_)
  );
  NAND _772_ (
    .A(_130_),
    .B(local_data_out[127]),
    .Y(_386_)
  );
  NAND _773_ (
    .A(_385_),
    .B(_386_),
    .Y(_061_)
  );
  NOR _774_ (
    .A(shift),
    .B(set_pulse),
    .Y(_387_)
  );
  NOT _775_ (
    .A(_387_),
    .Y(_001_)
  );
  NOR _776_ (
    .A(set_pulse),
    .B(reset),
    .Y(_388_)
  );
  NOT _777_ (
    .A(_388_),
    .Y(_000_)
  );
  (* src = "output/sensorTop.v:363.2-369.19" *)
  DFFSR _778_ (
    .C(set),
    .D(1'h1),
    .Q(set_pulse),
    .R(_000_),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:373.28-378.5" *)
  \$paramod\Register\bits=s32'00000000000000000000000001000000  \genblk1[0].Register  (
    .data_in({ _061_, _060_, _059_, _058_, _056_, _055_, _054_, _053_, _052_, _051_, _050_, _049_, _048_, _047_, _045_, _044_, _043_, _042_, _041_, _040_, _039_, _038_, _037_, _036_, _034_, _033_, _032_, _031_, _030_, _029_, _028_, _027_, _026_, _025_, _023_, _022_, _021_, _020_, _019_, _018_, _017_, _016_, _015_, _014_, _012_, _011_, _010_, _009_, _008_, _007_, _006_, _005_, _004_, _003_, _065_, _064_, _063_, _062_, _057_, _046_, _035_, _024_, _013_, _002_ }),
    .data_out(data_out),
    .reset(reset),
    .set(_001_)
  );
  (* src = "output/sensorTop.v:373.28-378.5" *)
  \$paramod\Register\bits=s32'00000000000000000000000001000000  \genblk1[1].Register  (
    .data_in({ _125_, _124_, _123_, _122_, _120_, _119_, _118_, _117_, _116_, _115_, _114_, _113_, _112_, _111_, _109_, _108_, _107_, _106_, _105_, _104_, _103_, _102_, _101_, _100_, _098_, _097_, _096_, _095_, _094_, _093_, _092_, _091_, _090_, _089_, _087_, _086_, _085_, _084_, _083_, _082_, _081_, _080_, _079_, _078_, _076_, _075_, _074_, _073_, _072_, _071_, _070_, _069_, _068_, _067_, _129_, _128_, _127_, _126_, _121_, _110_, _099_, _088_, _077_, _066_ }),
    .data_out(local_data_out[127:64]),
    .reset(reset),
    .set(_001_)
  );
  (* src = "output/sensorTop.v:373.28-378.5" *)
  \$paramod\Register\bits=s32'00000000000000000000000001000000  \genblk1[2].Register  (
    .data_in(data_in[191:128]),
    .data_out(local_data_out[191:128]),
    .reset(reset),
    .set(_001_)
  );
  assign local_data_out[63:0] = data_out;
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$4eca0d5ca04c17f5bb495d2c40ccd5b7ad624703\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$4eca0d5ca04c17f5bb495d2c40ccd5b7ad624703\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$4eca0d5ca04c17f5bb495d2c40ccd5b7ad624703\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$51b34220a329433b176be5a45f17bf52adb5b036\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$51b34220a329433b176be5a45f17bf52adb5b036\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$51b34220a329433b176be5a45f17bf52adb5b036\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$53475543ececb669a499a23168dc608f548b8ff2\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$53475543ececb669a499a23168dc608f548b8ff2\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$53475543ececb669a499a23168dc608f548b8ff2\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$5819e01802525a0550eeb114015576a387d42a09\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$5819e01802525a0550eeb114015576a387d42a09\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$5819e01802525a0550eeb114015576a387d42a09\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$5f0394247c4e57ba9305aa88354c66fcb2ffe0b9\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$5f0394247c4e57ba9305aa88354c66fcb2ffe0b9\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$5f0394247c4e57ba9305aa88354c66fcb2ffe0b9\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$60eea0ef90d508652e296c935d9328146bee24e0\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$60eea0ef90d508652e296c935d9328146bee24e0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$60eea0ef90d508652e296c935d9328146bee24e0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[5]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOR _18_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _19_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_05_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$623268c450b40d3966680a3e657e391f2625ff40\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$623268c450b40d3966680a3e657e391f2625ff40\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$623268c450b40d3966680a3e657e391f2625ff40\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[4]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$658863566b96af184339e835ac488dfe9bd95d9c\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$658863566b96af184339e835ac488dfe9bd95d9c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$658863566b96af184339e835ac488dfe9bd95d9c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOT _16_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$6b654c3306cca70bce345b07a67a0bfc062f966d\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$6b654c3306cca70bce345b07a67a0bfc062f966d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$6b654c3306cca70bce345b07a67a0bfc062f966d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOT _18_ (
    .A(_07_),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_06_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$73d7f99b4fa4122695845d230e6727a72ccea07f\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$73d7f99b4fa4122695845d230e6727a72ccea07f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$73d7f99b4fa4122695845d230e6727a72ccea07f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$7702132de7367888bdeb7adfc44be6b74adda134\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$7702132de7367888bdeb7adfc44be6b74adda134\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$7702132de7367888bdeb7adfc44be6b74adda134\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _11_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _14_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$7a13046ec0dd89aca57dd004896f8f67fbc21056\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$7a13046ec0dd89aca57dd004896f8f67fbc21056\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$7a13046ec0dd89aca57dd004896f8f67fbc21056\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[5]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOR _18_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _19_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_05_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$806ef7cc717a19ecafc9b286c8440c49829369ff\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$806ef7cc717a19ecafc9b286c8440c49829369ff\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$806ef7cc717a19ecafc9b286c8440c49829369ff\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$82bdabc0d95990f27fe3b8f5375d935ccf8e7181\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$82bdabc0d95990f27fe3b8f5375d935ccf8e7181\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$82bdabc0d95990f27fe3b8f5375d935ccf8e7181\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$845266e2c6e6de5a1f0123eb44f450e8ff121ffa\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$845266e2c6e6de5a1f0123eb44f450e8ff121ffa\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$845266e2c6e6de5a1f0123eb44f450e8ff121ffa\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[5]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOR _18_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _19_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_05_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$85a8516862fd031a90dc289bc53232d574114a74\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$85a8516862fd031a90dc289bc53232d574114a74\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$85a8516862fd031a90dc289bc53232d574114a74\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$8ab2e34da4daa495af7ab73f48dba38384b33e2d\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$8ab2e34da4daa495af7ab73f48dba38384b33e2d\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$8ab2e34da4daa495af7ab73f48dba38384b33e2d\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _11_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _14_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$93a12072cfe69c0c40f9a6fdb95addcd3790875f\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$93a12072cfe69c0c40f9a6fdb95addcd3790875f\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$93a12072cfe69c0c40f9a6fdb95addcd3790875f\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NOR _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$94d1449a854e9855e9dea9372cbe13c1e3564ed0\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$94d1449a854e9855e9dea9372cbe13c1e3564ed0\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$94d1449a854e9855e9dea9372cbe13c1e3564ed0\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[2]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[5]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOR _18_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _19_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_05_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$98ca0ba6ab19da98097e8e415fb0621f5a269418\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$98ca0ba6ab19da98097e8e415fb0621f5a269418\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$98ca0ba6ab19da98097e8e415fb0621f5a269418\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOT _16_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$9c5e874b0aeab1cb0ba520193ea2c7e1deb02a0c\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$9c5e874b0aeab1cb0ba520193ea2c7e1deb02a0c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$9c5e874b0aeab1cb0ba520193ea2c7e1deb02a0c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$9d36b3247f0f30d337173068d81b64348d187534\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$9d36b3247f0f30d337173068d81b64348d187534\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$9d36b3247f0f30d337173068d81b64348d187534\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$a0a8c696b6c3a69a94219a3a619bb19c7d3da342\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$a0a8c696b6c3a69a94219a3a619bb19c7d3da342\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$a0a8c696b6c3a69a94219a3a619bb19c7d3da342\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$a6afd538ed6497962188786d3b849ad16565ea7c\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$a6afd538ed6497962188786d3b849ad16565ea7c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$a6afd538ed6497962188786d3b849ad16565ea7c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$aa1b1259447d6e397fd5ec9d1756b5c45df93000\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$aa1b1259447d6e397fd5ec9d1756b5c45df93000\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$aa1b1259447d6e397fd5ec9d1756b5c45df93000\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$aade62649c3faaa245e79346ff137eaf656af767\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$aade62649c3faaa245e79346ff137eaf656af767\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$aade62649c3faaa245e79346ff137eaf656af767\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$ab9d0659e9083d722d5aee56384e1d24454ae7b6\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$ab9d0659e9083d722d5aee56384e1d24454ae7b6\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$ab9d0659e9083d722d5aee56384e1d24454ae7b6\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$ad26d0315e9fed44e43ef69a73f54d05bfee96c4\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$ad26d0315e9fed44e43ef69a73f54d05bfee96c4\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$ad26d0315e9fed44e43ef69a73f54d05bfee96c4\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$af55fbf5db5c51bf4af670d9e4f1ef2770443144\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$af55fbf5db5c51bf4af670d9e4f1ef2770443144\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$af55fbf5db5c51bf4af670d9e4f1ef2770443144\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[4]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[5]),
    .Y(_05_)
  );
  NOR _18_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _19_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_05_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$afe591ff3282780b012fd10640d2f3a11b58060b\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$afe591ff3282780b012fd10640d2f3a11b58060b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$afe591ff3282780b012fd10640d2f3a11b58060b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(expose_cmp[5]),
    .Y(_03_)
  );
  NOT _16_ (
    .A(CMP),
    .Y(_04_)
  );
  NAND _17_ (
    .A(_03_),
    .B(expose_cmp[4]),
    .Y(_05_)
  );
  NOR _18_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOT _19_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(_05_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_04_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$b615a4d0007e8336dd625193205ef7f6b979de41\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$b615a4d0007e8336dd625193205ef7f6b979de41\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$b615a4d0007e8336dd625193205ef7f6b979de41\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _11_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NAND _13_ (
    .A(_01_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NOR _14_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[7]),
    .Y(_05_)
  );
  NOR _15_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_04_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_03_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_02_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$bb8adab44655490560c3d052a5f7e92b8f1ec706\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$bb8adab44655490560c3d052a5f7e92b8f1ec706\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$bb8adab44655490560c3d052a5f7e92b8f1ec706\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NOR _20_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOT _21_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _22_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$c1779105b47a492e95a170d797783cce44f65393\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$c1779105b47a492e95a170d797783cce44f65393\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$c1779105b47a492e95a170d797783cce44f65393\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$c434be61c26c6d2c841ab93a1e2aa68b2ee5f295\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$c434be61c26c6d2c841ab93a1e2aa68b2ee5f295\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$c434be61c26c6d2c841ab93a1e2aa68b2ee5f295\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$c6b7fb43685e4d5bfd835c2cd369519219e1c232\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$c6b7fb43685e4d5bfd835c2cd369519219e1c232\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$c6b7fb43685e4d5bfd835c2cd369519219e1c232\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[7]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NOR _16_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOT _17_ (
    .A(_04_),
    .Y(_05_)
  );
  NAND _18_ (
    .A(_02_),
    .B(expose_cmp[6]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_05_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$c797236d4e2a8b42a5249860d4f21943fcf16249\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$c797236d4e2a8b42a5249860d4f21943fcf16249\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$c797236d4e2a8b42a5249860d4f21943fcf16249\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _10_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _11_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[5]),
    .Y(_02_)
  );
  NOR _12_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _13_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _14_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NAND _15_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NAND _16_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NOR _17_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _18_ (
    .A(_05_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_01_),
    .B(_09_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _20_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$cb3a276fc3aa7effcaf00414815bb8949ac6550c\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$cb3a276fc3aa7effcaf00414815bb8949ac6550c\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$cb3a276fc3aa7effcaf00414815bb8949ac6550c\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$d02cb906c86cd7507fd02562af19ceeec171f683\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$d02cb906c86cd7507fd02562af19ceeec171f683\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$d02cb906c86cd7507fd02562af19ceeec171f683\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$d24dcb2f1565e44486e005f0baa5f59f1d09a502\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$d24dcb2f1565e44486e005f0baa5f59f1d09a502\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$d24dcb2f1565e44486e005f0baa5f59f1d09a502\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[1]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[4]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[5]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$d26742b91880fed701d9a2b8f2dcbfef8b412a82\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$d26742b91880fed701d9a2b8f2dcbfef8b412a82\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$d26742b91880fed701d9a2b8f2dcbfef8b412a82\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$d4124f325554042c7a7e07b30f48865fd3145f17\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$d4124f325554042c7a7e07b30f48865fd3145f17\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$d4124f325554042c7a7e07b30f48865fd3145f17\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[3]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _14_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NAND _16_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$d59d8d2b961beee020a41f294ec21b0c6b1b05cf\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$d59d8d2b961beee020a41f294ec21b0c6b1b05cf\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$d59d8d2b961beee020a41f294ec21b0c6b1b05cf\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOT _19_ (
    .A(_07_),
    .Y(_08_)
  );
  NAND _20_ (
    .A(expose_cmp[2]),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$d76421d0285cfe6be3bcfc2373e32e7979a47021\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$d76421d0285cfe6be3bcfc2373e32e7979a47021\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$d76421d0285cfe6be3bcfc2373e32e7979a47021\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[2]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[3]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$dc339be7d61369b137b2db7e495c45d6c26b7027\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$dc339be7d61369b137b2db7e495c45d6c26b7027\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$dc339be7d61369b137b2db7e495c45d6c26b7027\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NAND _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NOT _14_ (
    .A(_03_),
    .Y(_04_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOR _17_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NOT _19_ (
    .A(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$e18f246c33ab633ffe13326277061c2a4bea4859\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$e18f246c33ab633ffe13326277061c2a4bea4859\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$e18f246c33ab633ffe13326277061c2a4bea4859\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$e8c4b9ff39a8188230ad9442c8bfd8a7c3f17bfa\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$e8c4b9ff39a8188230ad9442c8bfd8a7c3f17bfa\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$e8c4b9ff39a8188230ad9442c8bfd8a7c3f17bfa\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[5]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(CMP),
    .Y(_02_)
  );
  NAND _14_ (
    .A(_01_),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _15_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NOT _16_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _17_ (
    .A(_03_),
    .B(_05_),
    .Y(_06_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[0]),
    .Y(_07_)
  );
  NOR _19_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOT _20_ (
    .A(_08_),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_07_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_02_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$ee96214573de2a43a910a136401fa5e4001a3d6e\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$ee96214573de2a43a910a136401fa5e4001a3d6e\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$ee96214573de2a43a910a136401fa5e4001a3d6e\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _12_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _13_ (
    .A(expose_cmp[3]),
    .Y(_02_)
  );
  NOT _14_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _15_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _16_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _18_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _19_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NAND _20_ (
    .A(_02_),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_07_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_03_),
    .B(_11_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _24_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$f170633d05c7d88d9b519702452ff0d8454806b1\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$f170633d05c7d88d9b519702452ff0d8454806b1\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$f170633d05c7d88d9b519702452ff0d8454806b1\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _12_ (
    .A(CMP),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[4]),
    .Y(_03_)
  );
  NOR _14_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_04_)
  );
  NAND _15_ (
    .A(_03_),
    .B(_04_),
    .Y(_05_)
  );
  NOT _16_ (
    .A(_05_),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_02_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$ff389c6919825545611e15b61013b489fa53fd2b\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$ff389c6919825545611e15b61013b489fa53fd2b\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$ff389c6919825545611e15b61013b489fa53fd2b\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _11_ (
    .A(CMP),
    .Y(_01_)
  );
  NOR _12_ (
    .A(expose_cmp[5]),
    .B(expose_cmp[6]),
    .Y(_02_)
  );
  NOR _13_ (
    .A(expose_cmp[0]),
    .B(expose_cmp[2]),
    .Y(_03_)
  );
  NAND _14_ (
    .A(_02_),
    .B(_03_),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_05_)
  );
  NOR _16_ (
    .A(expose_cmp[4]),
    .B(expose_cmp[7]),
    .Y(_06_)
  );
  NOT _17_ (
    .A(_06_),
    .Y(_07_)
  );
  NAND _18_ (
    .A(expose_cmp[1]),
    .B(expose_cmp[3]),
    .Y(_08_)
  );
  NOR _19_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _20_ (
    .A(_05_),
    .B(_09_),
    .Y(_10_)
  );
  NAND _21_ (
    .A(_01_),
    .B(_10_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _22_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_SENSOR" *)
(* src = "output/sensorTop.v:221.1-257.10" *)
module \$paramod$ff8289dd1cd4f5a78ae6868e0982807935c70e73\PIXEL_SENSOR (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA);
  (* src = "output/sensorTop.v:233.27-233.34" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:234.33-234.37" *)
  output [7:0] DATA;
  (* src = "output/sensorTop.v:230.8-230.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:231.8-231.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:229.8-229.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:232.8-232.12" *)
  input READ;
  (* src = "output/sensorTop.v:244.7-244.10" *)
  wire cmp;
  (* src = "output/sensorTop.v:238.12-238.22" *)
  reg [7:0] local_data;
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[0] = COUNTER[0];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[1] = COUNTER[1];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[2] = COUNTER[2];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[3] = COUNTER[3];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[4] = COUNTER[4];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[5] = COUNTER[5];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[6] = COUNTER[6];
  (* src = "output/sensorTop.v:245.2-247.25" *)
  always @*
    if (!cmp) local_data[7] = COUNTER[7];
  (* src = "output/sensorTop.v:251.4-256.3" *)
  \$paramod$ff8289dd1cd4f5a78ae6868e0982807935c70e73\PIXEL_SENSOR_ANALOG  PixelSensorAnalog (
    .CMP(cmp),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[0]  (
    .A(local_data[0]),
    .EN(READ),
    .Y(DATA[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[1]  (
    .A(local_data[1]),
    .EN(READ),
    .Y(DATA[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[2]  (
    .A(local_data[2]),
    .EN(READ),
    .Y(DATA[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[3]  (
    .A(local_data[3]),
    .EN(READ),
    .Y(DATA[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[4]  (
    .A(local_data[4]),
    .EN(READ),
    .Y(DATA[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[5]  (
    .A(local_data[5]),
    .EN(READ),
    .Y(DATA[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[6]  (
    .A(local_data[6]),
    .EN(READ),
    .Y(DATA[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:239.11-243.3" *)
  Tristate \Tristate[7]  (
    .A(local_data[7]),
    .EN(READ),
    .Y(DATA[7])
  );
endmodule

(* hdlname = "\\PIXEL_SENSOR_ANALOG" *)
(* src = "output/sensorTop.v:195.1-220.10" *)
module \$paramod$ff8289dd1cd4f5a78ae6868e0982807935c70e73\PIXEL_SENSOR_ANALOG (EXPOSE, RAMP, ERASE, CMP);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:204.13-204.16" *)
  output CMP;
  (* src = "output/sensorTop.v:203.8-203.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:201.8-201.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:202.8-202.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:208.13-208.23" *)
  wire [7:0] expose_cmp;
  NOT _13_ (
    .A(expose_cmp[0]),
    .Y(_01_)
  );
  NOT _14_ (
    .A(expose_cmp[5]),
    .Y(_02_)
  );
  NOT _15_ (
    .A(CMP),
    .Y(_03_)
  );
  NAND _16_ (
    .A(_02_),
    .B(expose_cmp[4]),
    .Y(_04_)
  );
  NOR _17_ (
    .A(expose_cmp[7]),
    .B(expose_cmp[6]),
    .Y(_05_)
  );
  NOT _18_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _19_ (
    .A(_04_),
    .B(_06_),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_01_),
    .B(expose_cmp[1]),
    .Y(_08_)
  );
  NOR _21_ (
    .A(expose_cmp[3]),
    .B(expose_cmp[2]),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_10_)
  );
  NOR _23_ (
    .A(_08_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _24_ (
    .A(_07_),
    .B(_11_),
    .Y(_12_)
  );
  NAND _25_ (
    .A(_03_),
    .B(_12_),
    .Y(_00_)
  );
  (* src = "output/sensorTop.v:215.2-219.13" *)
  DFFSR _26_ (
    .C(RAMP),
    .D(_00_),
    .Q(CMP),
    .R(ERASE),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:209.22-214.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  Counter (
    .clk(RAMP),
    .enable(1'h1),
    .out(expose_cmp),
    .reset(ERASE)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\Counter" *)
(* src = "output/sensorTop.v:4.1-20.10" *)
module \$paramod\Counter\bits=s32'00000000000000000000000000000010 (clk, reset, enable, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  (* src = "output/sensorTop.v:10.8-10.11" *)
  input clk;
  (* src = "output/sensorTop.v:12.8-12.14" *)
  input enable;
  (* src = "output/sensorTop.v:14.26-14.29" *)
  output [1:0] out;
  (* src = "output/sensorTop.v:11.8-11.13" *)
  input reset;
  NOT _08_ (
    .A(out[1]),
    .Y(_04_)
  );
  NAND _09_ (
    .A(out[0]),
    .B(enable),
    .Y(_05_)
  );
  NOT _10_ (
    .A(_05_),
    .Y(_06_)
  );
  NOR _11_ (
    .A(out[0]),
    .B(enable),
    .Y(_07_)
  );
  NOR _12_ (
    .A(_06_),
    .B(_07_),
    .Y(_00_)
  );
  NOR _13_ (
    .A(out[1]),
    .B(_06_),
    .Y(_02_)
  );
  NOR _14_ (
    .A(_04_),
    .B(_05_),
    .Y(_03_)
  );
  NOR _15_ (
    .A(_02_),
    .B(_03_),
    .Y(_01_)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _16_ (
    .C(clk),
    .D(_00_),
    .Q(out[0]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _17_ (
    .C(clk),
    .D(_01_),
    .Q(out[1]),
    .R(reset),
    .S(1'h0)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\Counter" *)
(* src = "output/sensorTop.v:4.1-20.10" *)
module \$paramod\Counter\bits=s32'00000000000000000000000000000011 (clk, reset, enable, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  (* src = "output/sensorTop.v:10.8-10.11" *)
  input clk;
  (* src = "output/sensorTop.v:12.8-12.14" *)
  input enable;
  (* src = "output/sensorTop.v:14.26-14.29" *)
  output [2:0] out;
  (* src = "output/sensorTop.v:11.8-11.13" *)
  input reset;
  NOT _14_ (
    .A(out[1]),
    .Y(_12_)
  );
  NOT _15_ (
    .A(enable),
    .Y(_13_)
  );
  NOT _16_ (
    .A(out[0]),
    .Y(_03_)
  );
  NOR _17_ (
    .A(_13_),
    .B(_03_),
    .Y(_04_)
  );
  NAND _18_ (
    .A(enable),
    .B(out[0]),
    .Y(_05_)
  );
  NOR _19_ (
    .A(_12_),
    .B(_05_),
    .Y(_06_)
  );
  NOR _20_ (
    .A(out[1]),
    .B(_04_),
    .Y(_07_)
  );
  NOR _21_ (
    .A(_06_),
    .B(_07_),
    .Y(_01_)
  );
  NOR _22_ (
    .A(enable),
    .B(out[0]),
    .Y(_08_)
  );
  NOR _23_ (
    .A(_04_),
    .B(_08_),
    .Y(_00_)
  );
  NOR _24_ (
    .A(out[2]),
    .B(_06_),
    .Y(_09_)
  );
  NAND _25_ (
    .A(out[2]),
    .B(_06_),
    .Y(_10_)
  );
  NOT _26_ (
    .A(_10_),
    .Y(_11_)
  );
  NOR _27_ (
    .A(_09_),
    .B(_11_),
    .Y(_02_)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _28_ (
    .C(clk),
    .D(_00_),
    .Q(out[0]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _29_ (
    .C(clk),
    .D(_01_),
    .Q(out[1]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _30_ (
    .C(clk),
    .D(_02_),
    .Q(out[2]),
    .R(reset),
    .S(1'h0)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\Counter" *)
(* src = "output/sensorTop.v:4.1-20.10" *)
module \$paramod\Counter\bits=s32'00000000000000000000000000001000 (clk, reset, enable, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  (* src = "output/sensorTop.v:10.8-10.11" *)
  input clk;
  (* src = "output/sensorTop.v:12.8-12.14" *)
  input enable;
  (* src = "output/sensorTop.v:14.26-14.29" *)
  output [7:0] out;
  (* src = "output/sensorTop.v:11.8-11.13" *)
  input reset;
  NOT _38_ (
    .A(enable),
    .Y(_08_)
  );
  NOT _39_ (
    .A(out[5]),
    .Y(_09_)
  );
  NOT _40_ (
    .A(out[4]),
    .Y(_10_)
  );
  NOT _41_ (
    .A(out[3]),
    .Y(_11_)
  );
  NOT _42_ (
    .A(out[2]),
    .Y(_12_)
  );
  NOT _43_ (
    .A(out[1]),
    .Y(_13_)
  );
  NOT _44_ (
    .A(out[0]),
    .Y(_14_)
  );
  NOR _45_ (
    .A(_08_),
    .B(_14_),
    .Y(_15_)
  );
  NAND _46_ (
    .A(enable),
    .B(out[0]),
    .Y(_16_)
  );
  NOR _47_ (
    .A(_13_),
    .B(_16_),
    .Y(_17_)
  );
  NOT _48_ (
    .A(_17_),
    .Y(_18_)
  );
  NOR _49_ (
    .A(_12_),
    .B(_18_),
    .Y(_19_)
  );
  NAND _50_ (
    .A(out[2]),
    .B(_17_),
    .Y(_20_)
  );
  NOR _51_ (
    .A(_11_),
    .B(_20_),
    .Y(_21_)
  );
  NOT _52_ (
    .A(_21_),
    .Y(_22_)
  );
  NOR _53_ (
    .A(_10_),
    .B(_22_),
    .Y(_23_)
  );
  NAND _54_ (
    .A(out[4]),
    .B(_21_),
    .Y(_24_)
  );
  NOR _55_ (
    .A(_09_),
    .B(_24_),
    .Y(_25_)
  );
  NAND _56_ (
    .A(out[6]),
    .B(_25_),
    .Y(_26_)
  );
  NOT _57_ (
    .A(_26_),
    .Y(_27_)
  );
  NOR _58_ (
    .A(out[6]),
    .B(_25_),
    .Y(_28_)
  );
  NOR _59_ (
    .A(_27_),
    .B(_28_),
    .Y(_06_)
  );
  NOR _60_ (
    .A(out[5]),
    .B(_23_),
    .Y(_29_)
  );
  NOR _61_ (
    .A(_25_),
    .B(_29_),
    .Y(_05_)
  );
  NOR _62_ (
    .A(out[4]),
    .B(_21_),
    .Y(_30_)
  );
  NOR _63_ (
    .A(_23_),
    .B(_30_),
    .Y(_04_)
  );
  NOR _64_ (
    .A(out[3]),
    .B(_19_),
    .Y(_31_)
  );
  NOR _65_ (
    .A(_21_),
    .B(_31_),
    .Y(_03_)
  );
  NOR _66_ (
    .A(out[2]),
    .B(_17_),
    .Y(_32_)
  );
  NOR _67_ (
    .A(_19_),
    .B(_32_),
    .Y(_02_)
  );
  NOR _68_ (
    .A(out[1]),
    .B(_15_),
    .Y(_33_)
  );
  NOR _69_ (
    .A(_17_),
    .B(_33_),
    .Y(_01_)
  );
  NOR _70_ (
    .A(enable),
    .B(out[0]),
    .Y(_34_)
  );
  NOR _71_ (
    .A(_15_),
    .B(_34_),
    .Y(_00_)
  );
  NAND _72_ (
    .A(out[7]),
    .B(_26_),
    .Y(_35_)
  );
  NOR _73_ (
    .A(out[7]),
    .B(_26_),
    .Y(_36_)
  );
  NOT _74_ (
    .A(_36_),
    .Y(_37_)
  );
  NAND _75_ (
    .A(_35_),
    .B(_37_),
    .Y(_07_)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _76_ (
    .C(clk),
    .D(_00_),
    .Q(out[0]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _77_ (
    .C(clk),
    .D(_01_),
    .Q(out[1]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _78_ (
    .C(clk),
    .D(_02_),
    .Q(out[2]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _79_ (
    .C(clk),
    .D(_03_),
    .Q(out[3]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _80_ (
    .C(clk),
    .D(_04_),
    .Q(out[4]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _81_ (
    .C(clk),
    .D(_05_),
    .Q(out[5]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _82_ (
    .C(clk),
    .D(_06_),
    .Q(out[6]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _83_ (
    .C(clk),
    .D(_07_),
    .Q(out[7]),
    .R(reset),
    .S(1'h0)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\Counter" *)
(* src = "output/sensorTop.v:4.1-20.10" *)
module \$paramod\Counter\bits=s32'00000000000000000000000000001010 (clk, reset, enable, out);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  (* src = "output/sensorTop.v:10.8-10.11" *)
  input clk;
  (* src = "output/sensorTop.v:12.8-12.14" *)
  input enable;
  (* src = "output/sensorTop.v:14.26-14.29" *)
  output [9:0] out;
  (* src = "output/sensorTop.v:11.8-11.13" *)
  input reset;
  NOT _048_ (
    .A(enable),
    .Y(_010_)
  );
  NOT _049_ (
    .A(out[7]),
    .Y(_011_)
  );
  NOT _050_ (
    .A(out[6]),
    .Y(_012_)
  );
  NOT _051_ (
    .A(out[5]),
    .Y(_013_)
  );
  NOT _052_ (
    .A(out[4]),
    .Y(_014_)
  );
  NOT _053_ (
    .A(out[3]),
    .Y(_015_)
  );
  NOT _054_ (
    .A(out[2]),
    .Y(_016_)
  );
  NOT _055_ (
    .A(out[1]),
    .Y(_017_)
  );
  NOT _056_ (
    .A(out[0]),
    .Y(_018_)
  );
  NOR _057_ (
    .A(_010_),
    .B(_018_),
    .Y(_019_)
  );
  NAND _058_ (
    .A(enable),
    .B(out[0]),
    .Y(_020_)
  );
  NOR _059_ (
    .A(_017_),
    .B(_020_),
    .Y(_021_)
  );
  NOT _060_ (
    .A(_021_),
    .Y(_022_)
  );
  NOR _061_ (
    .A(_016_),
    .B(_022_),
    .Y(_023_)
  );
  NAND _062_ (
    .A(out[2]),
    .B(_021_),
    .Y(_024_)
  );
  NOR _063_ (
    .A(_015_),
    .B(_024_),
    .Y(_025_)
  );
  NOT _064_ (
    .A(_025_),
    .Y(_026_)
  );
  NOR _065_ (
    .A(_014_),
    .B(_026_),
    .Y(_027_)
  );
  NAND _066_ (
    .A(out[4]),
    .B(_025_),
    .Y(_028_)
  );
  NOR _067_ (
    .A(_013_),
    .B(_028_),
    .Y(_029_)
  );
  NOT _068_ (
    .A(_029_),
    .Y(_030_)
  );
  NOR _069_ (
    .A(_012_),
    .B(_030_),
    .Y(_031_)
  );
  NAND _070_ (
    .A(out[6]),
    .B(_029_),
    .Y(_032_)
  );
  NOR _071_ (
    .A(_011_),
    .B(_032_),
    .Y(_033_)
  );
  NAND _072_ (
    .A(out[8]),
    .B(_033_),
    .Y(_034_)
  );
  NOT _073_ (
    .A(_034_),
    .Y(_035_)
  );
  NOR _074_ (
    .A(out[8]),
    .B(_033_),
    .Y(_036_)
  );
  NOR _075_ (
    .A(_035_),
    .B(_036_),
    .Y(_008_)
  );
  NOR _076_ (
    .A(out[7]),
    .B(_031_),
    .Y(_037_)
  );
  NOR _077_ (
    .A(_033_),
    .B(_037_),
    .Y(_007_)
  );
  NOR _078_ (
    .A(out[6]),
    .B(_029_),
    .Y(_038_)
  );
  NOR _079_ (
    .A(_031_),
    .B(_038_),
    .Y(_006_)
  );
  NOR _080_ (
    .A(out[5]),
    .B(_027_),
    .Y(_039_)
  );
  NOR _081_ (
    .A(_029_),
    .B(_039_),
    .Y(_005_)
  );
  NOR _082_ (
    .A(out[4]),
    .B(_025_),
    .Y(_040_)
  );
  NOR _083_ (
    .A(_027_),
    .B(_040_),
    .Y(_004_)
  );
  NOR _084_ (
    .A(out[3]),
    .B(_023_),
    .Y(_041_)
  );
  NOR _085_ (
    .A(_025_),
    .B(_041_),
    .Y(_003_)
  );
  NOR _086_ (
    .A(out[2]),
    .B(_021_),
    .Y(_042_)
  );
  NOR _087_ (
    .A(_023_),
    .B(_042_),
    .Y(_002_)
  );
  NOR _088_ (
    .A(out[1]),
    .B(_019_),
    .Y(_043_)
  );
  NOR _089_ (
    .A(_021_),
    .B(_043_),
    .Y(_001_)
  );
  NOR _090_ (
    .A(enable),
    .B(out[0]),
    .Y(_044_)
  );
  NOR _091_ (
    .A(_019_),
    .B(_044_),
    .Y(_000_)
  );
  NAND _092_ (
    .A(out[9]),
    .B(_034_),
    .Y(_045_)
  );
  NOR _093_ (
    .A(out[9]),
    .B(_034_),
    .Y(_046_)
  );
  NOT _094_ (
    .A(_046_),
    .Y(_047_)
  );
  NAND _095_ (
    .A(_045_),
    .B(_047_),
    .Y(_009_)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _096_ (
    .C(clk),
    .D(_000_),
    .Q(out[0]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _097_ (
    .C(clk),
    .D(_001_),
    .Q(out[1]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _098_ (
    .C(clk),
    .D(_002_),
    .Q(out[2]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _099_ (
    .C(clk),
    .D(_003_),
    .Q(out[3]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _100_ (
    .C(clk),
    .D(_004_),
    .Q(out[4]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _101_ (
    .C(clk),
    .D(_005_),
    .Q(out[5]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _102_ (
    .C(clk),
    .D(_006_),
    .Q(out[6]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _103_ (
    .C(clk),
    .D(_007_),
    .Q(out[7]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _104_ (
    .C(clk),
    .D(_008_),
    .Q(out[8]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:15.2-19.19" *)
  DFFSR _105_ (
    .C(clk),
    .D(_009_),
    .Q(out[9]),
    .R(reset),
    .S(1'h0)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:259.1-292.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000000 (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA_OUT);
  (* src = "output/sensorTop.v:271.14-271.21" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:274.46-274.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:268.8-268.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:269.8-269.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:267.8-267.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:270.8-270.12" *)
  input READ;
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$c1779105b47a492e95a170d797783cce44f65393\PIXEL_SENSOR  \genblk1[0].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[7:0]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$49f23997283855e956073715e9c790457ca237f0\PIXEL_SENSOR  \genblk1[10].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[87:80]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$e18f246c33ab633ffe13326277061c2a4bea4859\PIXEL_SENSOR  \genblk1[11].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[95:88]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$01d0898bce902f5836d8b4eda371e193f827c7d9\PIXEL_SENSOR  \genblk1[12].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[103:96]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$f170633d05c7d88d9b519702452ff0d8454806b1\PIXEL_SENSOR  \genblk1[13].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[111:104]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$8ab2e34da4daa495af7ab73f48dba38384b33e2d\PIXEL_SENSOR  \genblk1[14].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[119:112]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$473fd670d14df5d07d633f9b5f53b0bd93106422\PIXEL_SENSOR  \genblk1[15].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[127:120]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$cb3a276fc3aa7effcaf00414815bb8949ac6550c\PIXEL_SENSOR  \genblk1[16].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[135:128]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$14fc8c5d7f86599dd8e65a6e2335ba789acfba9b\PIXEL_SENSOR  \genblk1[17].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[143:136]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$e8c4b9ff39a8188230ad9442c8bfd8a7c3f17bfa\PIXEL_SENSOR  \genblk1[18].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[151:144]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$3e6dc0c2061895833d300200da0bb57d40ee581e\PIXEL_SENSOR  \genblk1[19].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[159:152]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$1850f0e476e36dbff939940fa2bdad9f281d7d2a\PIXEL_SENSOR  \genblk1[1].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[15:8]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$845266e2c6e6de5a1f0123eb44f450e8ff121ffa\PIXEL_SENSOR  \genblk1[20].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[167:160]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$afe591ff3282780b012fd10640d2f3a11b58060b\PIXEL_SENSOR  \genblk1[21].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[175:168]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$d26742b91880fed701d9a2b8f2dcbfef8b412a82\PIXEL_SENSOR  \genblk1[22].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[183:176]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$ad26d0315e9fed44e43ef69a73f54d05bfee96c4\PIXEL_SENSOR  \genblk1[23].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[191:184]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$6b654c3306cca70bce345b07a67a0bfc062f966d\PIXEL_SENSOR  \genblk1[2].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[23:16]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$d4124f325554042c7a7e07b30f48865fd3145f17\PIXEL_SENSOR  \genblk1[3].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[31:24]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$aade62649c3faaa245e79346ff137eaf656af767\PIXEL_SENSOR  \genblk1[4].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[39:32]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$2155719df4bc99dec4198a2aba048f673893fd39\PIXEL_SENSOR  \genblk1[5].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[47:40]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$98ca0ba6ab19da98097e8e415fb0621f5a269418\PIXEL_SENSOR  \genblk1[6].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[55:48]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$482b965326f1c4fd7f8a39c6ebc2b9bade0cadf8\PIXEL_SENSOR  \genblk1[7].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[63:56]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$5819e01802525a0550eeb114015576a387d42a09\PIXEL_SENSOR  \genblk1[8].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[71:64]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$ff389c6919825545611e15b61013b489fa53fd2b\PIXEL_SENSOR  \genblk1[9].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[79:72]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:259.1-292.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000001 (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA_OUT);
  (* src = "output/sensorTop.v:271.14-271.21" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:274.46-274.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:268.8-268.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:269.8-269.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:267.8-267.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:270.8-270.12" *)
  input READ;
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$203b7c4b259ee952572b87d3e94151b5b02bbd2b\PIXEL_SENSOR  \genblk1[0].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[7:0]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$60eea0ef90d508652e296c935d9328146bee24e0\PIXEL_SENSOR  \genblk1[10].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[87:80]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$73d7f99b4fa4122695845d230e6727a72ccea07f\PIXEL_SENSOR  \genblk1[11].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[95:88]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$94d1449a854e9855e9dea9372cbe13c1e3564ed0\PIXEL_SENSOR  \genblk1[12].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[103:96]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$d59d8d2b961beee020a41f294ec21b0c6b1b05cf\PIXEL_SENSOR  \genblk1[13].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[111:104]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$c434be61c26c6d2c841ab93a1e2aa68b2ee5f295\PIXEL_SENSOR  \genblk1[14].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[119:112]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$b615a4d0007e8336dd625193205ef7f6b979de41\PIXEL_SENSOR  \genblk1[15].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[127:120]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$82bdabc0d95990f27fe3b8f5375d935ccf8e7181\PIXEL_SENSOR  \genblk1[16].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[135:128]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$5f0394247c4e57ba9305aa88354c66fcb2ffe0b9\PIXEL_SENSOR  \genblk1[17].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[143:136]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$af55fbf5db5c51bf4af670d9e4f1ef2770443144\PIXEL_SENSOR  \genblk1[18].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[151:144]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$85a8516862fd031a90dc289bc53232d574114a74\PIXEL_SENSOR  \genblk1[19].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[159:152]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$004a2d6c4d72b173587acaf41269bb48988ab7d5\PIXEL_SENSOR  \genblk1[1].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[15:8]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$0b8efd2cb5f44937e4399f4125d07a6092c590e9\PIXEL_SENSOR  \genblk1[20].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[167:160]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$623268c450b40d3966680a3e657e391f2625ff40\PIXEL_SENSOR  \genblk1[21].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[175:168]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$2ada5844b3e99cd0d222e36357dae1d6b7f0c26a\PIXEL_SENSOR  \genblk1[22].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[183:176]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$dc339be7d61369b137b2db7e495c45d6c26b7027\PIXEL_SENSOR  \genblk1[23].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[191:184]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$08fbb61fbeee1479bbddb2440780cddb7817a39f\PIXEL_SENSOR  \genblk1[2].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[23:16]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$9d36b3247f0f30d337173068d81b64348d187534\PIXEL_SENSOR  \genblk1[3].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[31:24]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$1b8d27631d17fa0e52e8399f7f3948c6f18592d8\PIXEL_SENSOR  \genblk1[4].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[39:32]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$51b34220a329433b176be5a45f17bf52adb5b036\PIXEL_SENSOR  \genblk1[5].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[47:40]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$658863566b96af184339e835ac488dfe9bd95d9c\PIXEL_SENSOR  \genblk1[6].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[55:48]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$2e2515711462623047324ff48ab86c0f2ee91b84\PIXEL_SENSOR  \genblk1[7].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[63:56]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$d02cb906c86cd7507fd02562af19ceeec171f683\PIXEL_SENSOR  \genblk1[8].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[71:64]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$bb8adab44655490560c3d052a5f7e92b8f1ec706\PIXEL_SENSOR  \genblk1[9].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[79:72]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\PIXEL_ROW" *)
(* src = "output/sensorTop.v:259.1-292.10" *)
module \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000010 (RAMP, ERASE, EXPOSE, READ, COUNTER, DATA_OUT);
  (* src = "output/sensorTop.v:271.14-271.21" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:274.46-274.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:268.8-268.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:269.8-269.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:267.8-267.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:270.8-270.12" *)
  input READ;
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$3157723d492346a7befead03d9df7a61b9ef7ef2\PIXEL_SENSOR  \genblk1[0].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[7:0]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$d24dcb2f1565e44486e005f0baa5f59f1d09a502\PIXEL_SENSOR  \genblk1[10].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[87:80]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$a0a8c696b6c3a69a94219a3a619bb19c7d3da342\PIXEL_SENSOR  \genblk1[11].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[95:88]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$93a12072cfe69c0c40f9a6fdb95addcd3790875f\PIXEL_SENSOR  \genblk1[12].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[103:96]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$479bfff085236c83a41b8c4dad5a8c67592459af\PIXEL_SENSOR  \genblk1[13].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[111:104]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$183c928f06b71821b44ec346947200caceaee395\PIXEL_SENSOR  \genblk1[14].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[119:112]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$53475543ececb669a499a23168dc608f548b8ff2\PIXEL_SENSOR  \genblk1[15].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[127:120]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$43805d7668ed07d3dde47b736f95915996c6f6a5\PIXEL_SENSOR  \genblk1[16].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[135:128]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$ee96214573de2a43a910a136401fa5e4001a3d6e\PIXEL_SENSOR  \genblk1[17].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[143:136]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$4eca0d5ca04c17f5bb495d2c40ccd5b7ad624703\PIXEL_SENSOR  \genblk1[18].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[151:144]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$aa1b1259447d6e397fd5ec9d1756b5c45df93000\PIXEL_SENSOR  \genblk1[19].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[159:152]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$2d7398bc60324bc42c137744e6f1e701f82607bd\PIXEL_SENSOR  \genblk1[1].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[15:8]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$c797236d4e2a8b42a5249860d4f21943fcf16249\PIXEL_SENSOR  \genblk1[20].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[167:160]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$c6b7fb43685e4d5bfd835c2cd369519219e1c232\PIXEL_SENSOR  \genblk1[21].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[175:168]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$183358489ef7141153b8733ed376b64d93529b1c\PIXEL_SENSOR  \genblk1[22].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[183:176]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$15e28f39ea9c2b4c42d772ae34f7b601516774e5\PIXEL_SENSOR  \genblk1[23].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[191:184]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$806ef7cc717a19ecafc9b286c8440c49829369ff\PIXEL_SENSOR  \genblk1[2].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[23:16]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$a6afd538ed6497962188786d3b849ad16565ea7c\PIXEL_SENSOR  \genblk1[3].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[31:24]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$7702132de7367888bdeb7adfc44be6b74adda134\PIXEL_SENSOR  \genblk1[4].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[39:32]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$ff8289dd1cd4f5a78ae6868e0982807935c70e73\PIXEL_SENSOR  \genblk1[5].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[47:40]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$7a13046ec0dd89aca57dd004896f8f67fbc21056\PIXEL_SENSOR  \genblk1[6].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[55:48]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$9c5e874b0aeab1cb0ba520193ea2c7e1deb02a0c\PIXEL_SENSOR  \genblk1[7].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[63:56]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$d76421d0285cfe6be3bcfc2373e32e7979a47021\PIXEL_SENSOR  \genblk1[8].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[71:64]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
  (* src = "output/sensorTop.v:282.6-289.5" *)
  \$paramod$ab9d0659e9083d722d5aee56384e1d24454ae7b6\PIXEL_SENSOR  \genblk1[9].ps  (
    .COUNTER(COUNTER),
    .DATA(DATA_OUT[79:72]),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\Register" *)
(* src = "output/sensorTop.v:327.1-343.10" *)
module \$paramod\Register\bits=s32'00000000000000000000000001000000 (set, reset, data_in, data_out);
  (* src = "output/sensorTop.v:336.21-336.28" *)
  input [63:0] data_in;
  (* src = "output/sensorTop.v:337.26-337.34" *)
  output [63:0] data_out;
  (* src = "output/sensorTop.v:334.8-334.13" *)
  input reset;
  (* src = "output/sensorTop.v:333.8-333.11" *)
  input set;
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _00_ (
    .C(set),
    .D(data_in[0]),
    .Q(data_out[0]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _01_ (
    .C(set),
    .D(data_in[1]),
    .Q(data_out[1]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _02_ (
    .C(set),
    .D(data_in[2]),
    .Q(data_out[2]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _03_ (
    .C(set),
    .D(data_in[3]),
    .Q(data_out[3]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _04_ (
    .C(set),
    .D(data_in[4]),
    .Q(data_out[4]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _05_ (
    .C(set),
    .D(data_in[5]),
    .Q(data_out[5]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _06_ (
    .C(set),
    .D(data_in[6]),
    .Q(data_out[6]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _07_ (
    .C(set),
    .D(data_in[7]),
    .Q(data_out[7]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _08_ (
    .C(set),
    .D(data_in[8]),
    .Q(data_out[8]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _09_ (
    .C(set),
    .D(data_in[9]),
    .Q(data_out[9]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _10_ (
    .C(set),
    .D(data_in[10]),
    .Q(data_out[10]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _11_ (
    .C(set),
    .D(data_in[11]),
    .Q(data_out[11]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _12_ (
    .C(set),
    .D(data_in[12]),
    .Q(data_out[12]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _13_ (
    .C(set),
    .D(data_in[13]),
    .Q(data_out[13]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _14_ (
    .C(set),
    .D(data_in[14]),
    .Q(data_out[14]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _15_ (
    .C(set),
    .D(data_in[15]),
    .Q(data_out[15]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _16_ (
    .C(set),
    .D(data_in[16]),
    .Q(data_out[16]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _17_ (
    .C(set),
    .D(data_in[17]),
    .Q(data_out[17]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _18_ (
    .C(set),
    .D(data_in[18]),
    .Q(data_out[18]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _19_ (
    .C(set),
    .D(data_in[19]),
    .Q(data_out[19]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _20_ (
    .C(set),
    .D(data_in[20]),
    .Q(data_out[20]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _21_ (
    .C(set),
    .D(data_in[21]),
    .Q(data_out[21]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _22_ (
    .C(set),
    .D(data_in[22]),
    .Q(data_out[22]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _23_ (
    .C(set),
    .D(data_in[23]),
    .Q(data_out[23]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _24_ (
    .C(set),
    .D(data_in[24]),
    .Q(data_out[24]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _25_ (
    .C(set),
    .D(data_in[25]),
    .Q(data_out[25]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _26_ (
    .C(set),
    .D(data_in[26]),
    .Q(data_out[26]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _27_ (
    .C(set),
    .D(data_in[27]),
    .Q(data_out[27]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _28_ (
    .C(set),
    .D(data_in[28]),
    .Q(data_out[28]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _29_ (
    .C(set),
    .D(data_in[29]),
    .Q(data_out[29]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _30_ (
    .C(set),
    .D(data_in[30]),
    .Q(data_out[30]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _31_ (
    .C(set),
    .D(data_in[31]),
    .Q(data_out[31]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _32_ (
    .C(set),
    .D(data_in[32]),
    .Q(data_out[32]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _33_ (
    .C(set),
    .D(data_in[33]),
    .Q(data_out[33]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _34_ (
    .C(set),
    .D(data_in[34]),
    .Q(data_out[34]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _35_ (
    .C(set),
    .D(data_in[35]),
    .Q(data_out[35]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _36_ (
    .C(set),
    .D(data_in[36]),
    .Q(data_out[36]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _37_ (
    .C(set),
    .D(data_in[37]),
    .Q(data_out[37]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _38_ (
    .C(set),
    .D(data_in[38]),
    .Q(data_out[38]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _39_ (
    .C(set),
    .D(data_in[39]),
    .Q(data_out[39]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _40_ (
    .C(set),
    .D(data_in[40]),
    .Q(data_out[40]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _41_ (
    .C(set),
    .D(data_in[41]),
    .Q(data_out[41]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _42_ (
    .C(set),
    .D(data_in[42]),
    .Q(data_out[42]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _43_ (
    .C(set),
    .D(data_in[43]),
    .Q(data_out[43]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _44_ (
    .C(set),
    .D(data_in[44]),
    .Q(data_out[44]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _45_ (
    .C(set),
    .D(data_in[45]),
    .Q(data_out[45]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _46_ (
    .C(set),
    .D(data_in[46]),
    .Q(data_out[46]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _47_ (
    .C(set),
    .D(data_in[47]),
    .Q(data_out[47]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _48_ (
    .C(set),
    .D(data_in[48]),
    .Q(data_out[48]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _49_ (
    .C(set),
    .D(data_in[49]),
    .Q(data_out[49]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _50_ (
    .C(set),
    .D(data_in[50]),
    .Q(data_out[50]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _51_ (
    .C(set),
    .D(data_in[51]),
    .Q(data_out[51]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _52_ (
    .C(set),
    .D(data_in[52]),
    .Q(data_out[52]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _53_ (
    .C(set),
    .D(data_in[53]),
    .Q(data_out[53]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _54_ (
    .C(set),
    .D(data_in[54]),
    .Q(data_out[54]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _55_ (
    .C(set),
    .D(data_in[55]),
    .Q(data_out[55]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _56_ (
    .C(set),
    .D(data_in[56]),
    .Q(data_out[56]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _57_ (
    .C(set),
    .D(data_in[57]),
    .Q(data_out[57]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _58_ (
    .C(set),
    .D(data_in[58]),
    .Q(data_out[58]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _59_ (
    .C(set),
    .D(data_in[59]),
    .Q(data_out[59]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _60_ (
    .C(set),
    .D(data_in[60]),
    .Q(data_out[60]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _61_ (
    .C(set),
    .D(data_in[61]),
    .Q(data_out[61]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _62_ (
    .C(set),
    .D(data_in[62]),
    .Q(data_out[62]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:338.2-342.24" *)
  DFFSR _63_ (
    .C(set),
    .D(data_in[63]),
    .Q(data_out[63]),
    .R(reset),
    .S(1'h0)
  );
endmodule

(* dynports =  1  *)
(* hdlname = "\\Selector" *)
(* src = "output/sensorTop.v:22.1-42.10" *)
module \$paramod\Selector\length=s32'00000000000000000000000000000011 (clk, inputEnable, outputEnable, reset, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  (* src = "output/sensorTop.v:29.8-29.11" *)
  input clk;
  (* src = "output/sensorTop.v:30.8-30.19" *)
  input inputEnable;
  (* src = "output/sensorTop.v:35.21-35.30" *)
  wire [2:0] local_out;
  (* src = "output/sensorTop.v:34.29-34.32" *)
  output [2:0] out;
  (* src = "output/sensorTop.v:31.8-31.20" *)
  input outputEnable;
  (* src = "output/sensorTop.v:32.8-32.13" *)
  input reset;
  NOT _09_ (
    .A(local_out[0]),
    .Y(_07_)
  );
  NOT _10_ (
    .A(inputEnable),
    .Y(_08_)
  );
  NAND _11_ (
    .A(local_out[0]),
    .B(inputEnable),
    .Y(_03_)
  );
  NAND _12_ (
    .A(local_out[1]),
    .B(_08_),
    .Y(_04_)
  );
  NAND _13_ (
    .A(_03_),
    .B(_04_),
    .Y(_01_)
  );
  NOR _14_ (
    .A(_07_),
    .B(inputEnable),
    .Y(_00_)
  );
  NAND _15_ (
    .A(local_out[1]),
    .B(inputEnable),
    .Y(_05_)
  );
  NAND _16_ (
    .A(_08_),
    .B(local_out[2]),
    .Y(_06_)
  );
  NAND _17_ (
    .A(_05_),
    .B(_06_),
    .Y(_02_)
  );
  (* src = "output/sensorTop.v:37.2-41.32" *)
  DFFSR _18_ (
    .C(clk),
    .D(_00_),
    .Q(local_out[0]),
    .R(1'h0),
    .S(reset)
  );
  (* src = "output/sensorTop.v:37.2-41.32" *)
  DFFSR _19_ (
    .C(clk),
    .D(_01_),
    .Q(local_out[1]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:37.2-41.32" *)
  DFFSR _20_ (
    .C(clk),
    .D(_02_),
    .Q(local_out[2]),
    .R(reset),
    .S(1'h0)
  );
  assign out = local_out;
endmodule

(* dynports =  1  *)
(* hdlname = "\\Selector" *)
(* src = "output/sensorTop.v:22.1-42.10" *)
module \$paramod\Selector\length=s32'00000000000000000000000000000100 (clk, inputEnable, outputEnable, reset, out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  (* src = "output/sensorTop.v:29.8-29.11" *)
  input clk;
  (* src = "output/sensorTop.v:30.8-30.19" *)
  input inputEnable;
  (* src = "output/sensorTop.v:35.21-35.30" *)
  wire [3:0] local_out;
  (* src = "output/sensorTop.v:34.29-34.32" *)
  output [3:0] out;
  (* src = "output/sensorTop.v:31.8-31.20" *)
  input outputEnable;
  (* src = "output/sensorTop.v:32.8-32.13" *)
  input reset;
  NOT _12_ (
    .A(inputEnable),
    .Y(_04_)
  );
  NOT _13_ (
    .A(local_out[0]),
    .Y(_05_)
  );
  NAND _14_ (
    .A(local_out[1]),
    .B(inputEnable),
    .Y(_06_)
  );
  NAND _15_ (
    .A(local_out[2]),
    .B(_04_),
    .Y(_07_)
  );
  NAND _16_ (
    .A(_06_),
    .B(_07_),
    .Y(_02_)
  );
  NAND _17_ (
    .A(inputEnable),
    .B(local_out[0]),
    .Y(_08_)
  );
  NAND _18_ (
    .A(local_out[1]),
    .B(_04_),
    .Y(_09_)
  );
  NAND _19_ (
    .A(_08_),
    .B(_09_),
    .Y(_01_)
  );
  NOR _20_ (
    .A(inputEnable),
    .B(_05_),
    .Y(_00_)
  );
  NAND _21_ (
    .A(local_out[2]),
    .B(inputEnable),
    .Y(_10_)
  );
  NAND _22_ (
    .A(_04_),
    .B(local_out[3]),
    .Y(_11_)
  );
  NAND _23_ (
    .A(_10_),
    .B(_11_),
    .Y(_03_)
  );
  (* src = "output/sensorTop.v:37.2-41.32" *)
  DFFSR _24_ (
    .C(clk),
    .D(_00_),
    .Q(local_out[0]),
    .R(1'h0),
    .S(reset)
  );
  (* src = "output/sensorTop.v:37.2-41.32" *)
  DFFSR _25_ (
    .C(clk),
    .D(_01_),
    .Q(local_out[1]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:37.2-41.32" *)
  DFFSR _26_ (
    .C(clk),
    .D(_02_),
    .Q(local_out[2]),
    .R(reset),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:37.2-41.32" *)
  DFFSR _27_ (
    .C(clk),
    .D(_03_),
    .Q(local_out[3]),
    .R(reset),
    .S(1'h0)
  );
  assign out = local_out;
endmodule

(* dynports =  1  *)
(* src = "output/sensorTop.v:382.1-454.10" *)
module OUTPUT_BUFFER(SET_BUFFER, RESET, CLK, DATA_IN, OUTPUT_CLK, DATA_OUT);
  (* src = "output/sensorTop.v:429.2-447.6" *)
  wire _00_;
  (* src = "output/sensorTop.v:429.2-447.6" *)
  wire _01_;
  (* src = "output/sensorTop.v:420.10-420.28" *)
  wire _02_;
  (* src = "output/sensorTop.v:405.10-405.31" *)
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  (* src = "output/sensorTop.v:392.8-392.11" *)
  input CLK;
  (* src = "output/sensorTop.v:393.49-393.56" *)
  input [191:0] DATA_IN;
  (* src = "output/sensorTop.v:395.54-395.62" *)
  output [63:0] DATA_OUT;
  (* src = "output/sensorTop.v:394.14-394.24" *)
  output OUTPUT_CLK;
  (* src = "output/sensorTop.v:391.8-391.13" *)
  input RESET;
  (* src = "output/sensorTop.v:390.8-390.18" *)
  input SET_BUFFER;
  (* src = "output/sensorTop.v:402.28-402.39" *)
  wire [1:0] counter_out;
  (* src = "output/sensorTop.v:401.6-401.19" *)
  wire counter_reset;
  (* src = "output/sensorTop.v:411.14-411.28" *)
  wire [63:0] local_data_out;
  (* src = "output/sensorTop.v:412.6-412.15" *)
  wire new_input;
  (* src = "output/sensorTop.v:400.6-400.18" *)
  wire sending_data;
  (* src = "output/sensorTop.v:409.6-409.18" *)
  wire should_shift;
  NOT _13_ (
    .A(SET_BUFFER),
    .Y(_05_)
  );
  NOT _14_ (
    .A(sending_data),
    .Y(_06_)
  );
  NOT _15_ (
    .A(counter_out[0]),
    .Y(_07_)
  );
  NOR _16_ (
    .A(_05_),
    .B(sending_data),
    .Y(new_input)
  );
  NOR _17_ (
    .A(_06_),
    .B(CLK),
    .Y(OUTPUT_CLK)
  );
  NOR _18_ (
    .A(sending_data),
    .B(should_shift),
    .Y(_08_)
  );
  NAND _19_ (
    .A(_07_),
    .B(counter_out[1]),
    .Y(_09_)
  );
  NOR _20_ (
    .A(new_input),
    .B(_09_),
    .Y(_00_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_00_),
    .Y(_01_)
  );
  NOR _22_ (
    .A(RESET),
    .B(counter_reset),
    .Y(_10_)
  );
  NOT _23_ (
    .A(_10_),
    .Y(_03_)
  );
  NAND _24_ (
    .A(CLK),
    .B(should_shift),
    .Y(_11_)
  );
  NOT _25_ (
    .A(_11_),
    .Y(_02_)
  );
  NOR _26_ (
    .A(SET_BUFFER),
    .B(sending_data),
    .Y(_12_)
  );
  NOR _27_ (
    .A(_00_),
    .B(_12_),
    .Y(_04_)
  );
  (* src = "output/sensorTop.v:429.2-447.6" *)
  DFFSR _28_ (
    .C(CLK),
    .D(_00_),
    .Q(counter_reset),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:429.2-447.6" *)
  DFFSR _29_ (
    .C(CLK),
    .D(_01_),
    .Q(should_shift),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:429.2-447.6" *)
  DFFSR _30_ (
    .C(CLK),
    .D(_04_),
    .Q(sending_data),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:403.33-408.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000000010  Counter (
    .clk(CLK),
    .enable(sending_data),
    .out(counter_out),
    .reset(_03_)
  );
  (* src = "output/sensorTop.v:416.4-423.3" *)
  \$paramod$4e29df410bc8e16bc6e2605c65ed249684a89f75\RegisterShifter  DataBuffer (
    .clk(CLK),
    .data_in(DATA_IN),
    .data_out(local_data_out),
    .reset(RESET),
    .set(new_input),
    .shift(_02_)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[0]  (
    .A(local_data_out[0]),
    .EN(sending_data),
    .Y(DATA_OUT[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[10]  (
    .A(local_data_out[10]),
    .EN(sending_data),
    .Y(DATA_OUT[10])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[11]  (
    .A(local_data_out[11]),
    .EN(sending_data),
    .Y(DATA_OUT[11])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[12]  (
    .A(local_data_out[12]),
    .EN(sending_data),
    .Y(DATA_OUT[12])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[13]  (
    .A(local_data_out[13]),
    .EN(sending_data),
    .Y(DATA_OUT[13])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[14]  (
    .A(local_data_out[14]),
    .EN(sending_data),
    .Y(DATA_OUT[14])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[15]  (
    .A(local_data_out[15]),
    .EN(sending_data),
    .Y(DATA_OUT[15])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[16]  (
    .A(local_data_out[16]),
    .EN(sending_data),
    .Y(DATA_OUT[16])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[17]  (
    .A(local_data_out[17]),
    .EN(sending_data),
    .Y(DATA_OUT[17])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[18]  (
    .A(local_data_out[18]),
    .EN(sending_data),
    .Y(DATA_OUT[18])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[19]  (
    .A(local_data_out[19]),
    .EN(sending_data),
    .Y(DATA_OUT[19])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[1]  (
    .A(local_data_out[1]),
    .EN(sending_data),
    .Y(DATA_OUT[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[20]  (
    .A(local_data_out[20]),
    .EN(sending_data),
    .Y(DATA_OUT[20])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[21]  (
    .A(local_data_out[21]),
    .EN(sending_data),
    .Y(DATA_OUT[21])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[22]  (
    .A(local_data_out[22]),
    .EN(sending_data),
    .Y(DATA_OUT[22])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[23]  (
    .A(local_data_out[23]),
    .EN(sending_data),
    .Y(DATA_OUT[23])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[24]  (
    .A(local_data_out[24]),
    .EN(sending_data),
    .Y(DATA_OUT[24])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[25]  (
    .A(local_data_out[25]),
    .EN(sending_data),
    .Y(DATA_OUT[25])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[26]  (
    .A(local_data_out[26]),
    .EN(sending_data),
    .Y(DATA_OUT[26])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[27]  (
    .A(local_data_out[27]),
    .EN(sending_data),
    .Y(DATA_OUT[27])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[28]  (
    .A(local_data_out[28]),
    .EN(sending_data),
    .Y(DATA_OUT[28])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[29]  (
    .A(local_data_out[29]),
    .EN(sending_data),
    .Y(DATA_OUT[29])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[2]  (
    .A(local_data_out[2]),
    .EN(sending_data),
    .Y(DATA_OUT[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[30]  (
    .A(local_data_out[30]),
    .EN(sending_data),
    .Y(DATA_OUT[30])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[31]  (
    .A(local_data_out[31]),
    .EN(sending_data),
    .Y(DATA_OUT[31])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[32]  (
    .A(local_data_out[32]),
    .EN(sending_data),
    .Y(DATA_OUT[32])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[33]  (
    .A(local_data_out[33]),
    .EN(sending_data),
    .Y(DATA_OUT[33])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[34]  (
    .A(local_data_out[34]),
    .EN(sending_data),
    .Y(DATA_OUT[34])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[35]  (
    .A(local_data_out[35]),
    .EN(sending_data),
    .Y(DATA_OUT[35])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[36]  (
    .A(local_data_out[36]),
    .EN(sending_data),
    .Y(DATA_OUT[36])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[37]  (
    .A(local_data_out[37]),
    .EN(sending_data),
    .Y(DATA_OUT[37])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[38]  (
    .A(local_data_out[38]),
    .EN(sending_data),
    .Y(DATA_OUT[38])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[39]  (
    .A(local_data_out[39]),
    .EN(sending_data),
    .Y(DATA_OUT[39])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[3]  (
    .A(local_data_out[3]),
    .EN(sending_data),
    .Y(DATA_OUT[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[40]  (
    .A(local_data_out[40]),
    .EN(sending_data),
    .Y(DATA_OUT[40])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[41]  (
    .A(local_data_out[41]),
    .EN(sending_data),
    .Y(DATA_OUT[41])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[42]  (
    .A(local_data_out[42]),
    .EN(sending_data),
    .Y(DATA_OUT[42])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[43]  (
    .A(local_data_out[43]),
    .EN(sending_data),
    .Y(DATA_OUT[43])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[44]  (
    .A(local_data_out[44]),
    .EN(sending_data),
    .Y(DATA_OUT[44])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[45]  (
    .A(local_data_out[45]),
    .EN(sending_data),
    .Y(DATA_OUT[45])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[46]  (
    .A(local_data_out[46]),
    .EN(sending_data),
    .Y(DATA_OUT[46])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[47]  (
    .A(local_data_out[47]),
    .EN(sending_data),
    .Y(DATA_OUT[47])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[48]  (
    .A(local_data_out[48]),
    .EN(sending_data),
    .Y(DATA_OUT[48])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[49]  (
    .A(local_data_out[49]),
    .EN(sending_data),
    .Y(DATA_OUT[49])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[4]  (
    .A(local_data_out[4]),
    .EN(sending_data),
    .Y(DATA_OUT[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[50]  (
    .A(local_data_out[50]),
    .EN(sending_data),
    .Y(DATA_OUT[50])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[51]  (
    .A(local_data_out[51]),
    .EN(sending_data),
    .Y(DATA_OUT[51])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[52]  (
    .A(local_data_out[52]),
    .EN(sending_data),
    .Y(DATA_OUT[52])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[53]  (
    .A(local_data_out[53]),
    .EN(sending_data),
    .Y(DATA_OUT[53])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[54]  (
    .A(local_data_out[54]),
    .EN(sending_data),
    .Y(DATA_OUT[54])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[55]  (
    .A(local_data_out[55]),
    .EN(sending_data),
    .Y(DATA_OUT[55])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[56]  (
    .A(local_data_out[56]),
    .EN(sending_data),
    .Y(DATA_OUT[56])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[57]  (
    .A(local_data_out[57]),
    .EN(sending_data),
    .Y(DATA_OUT[57])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[58]  (
    .A(local_data_out[58]),
    .EN(sending_data),
    .Y(DATA_OUT[58])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[59]  (
    .A(local_data_out[59]),
    .EN(sending_data),
    .Y(DATA_OUT[59])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[5]  (
    .A(local_data_out[5]),
    .EN(sending_data),
    .Y(DATA_OUT[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[60]  (
    .A(local_data_out[60]),
    .EN(sending_data),
    .Y(DATA_OUT[60])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[61]  (
    .A(local_data_out[61]),
    .EN(sending_data),
    .Y(DATA_OUT[61])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[62]  (
    .A(local_data_out[62]),
    .EN(sending_data),
    .Y(DATA_OUT[62])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[63]  (
    .A(local_data_out[63]),
    .EN(sending_data),
    .Y(DATA_OUT[63])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[6]  (
    .A(local_data_out[6]),
    .EN(sending_data),
    .Y(DATA_OUT[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[7]  (
    .A(local_data_out[7]),
    .EN(sending_data),
    .Y(DATA_OUT[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[8]  (
    .A(local_data_out[8]),
    .EN(sending_data),
    .Y(DATA_OUT[8])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:449.11-453.3" *)
  Tristate \Tristate[9]  (
    .A(local_data_out[9]),
    .EN(sending_data),
    .Y(DATA_OUT[9])
  );
endmodule

(* dynports =  1  *)
(* src = "output/sensorTop.v:293.1-323.10" *)
module PIXEL_ARRAY(RAMP, ERASE, EXPOSE, READ, COUNTER, DATA_OUT);
  (* src = "output/sensorTop.v:306.14-306.21" *)
  input [7:0] COUNTER;
  (* src = "output/sensorTop.v:309.46-309.54" *)
  output [191:0] DATA_OUT;
  (* src = "output/sensorTop.v:302.8-302.13" *)
  input ERASE;
  (* src = "output/sensorTop.v:303.8-303.14" *)
  input EXPOSE;
  (* src = "output/sensorTop.v:301.8-301.12" *)
  input RAMP;
  (* src = "output/sensorTop.v:305.35-305.39" *)
  input [2:0] READ;
  (* src = "output/sensorTop.v:313.31-320.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000000  \genblk1[0].pr  (
    .COUNTER(COUNTER),
    .DATA_OUT(DATA_OUT),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ[0])
  );
  (* src = "output/sensorTop.v:313.31-320.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000001  \genblk1[1].pr  (
    .COUNTER(COUNTER),
    .DATA_OUT(DATA_OUT),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ[1])
  );
  (* src = "output/sensorTop.v:313.31-320.5" *)
  \$paramod\PIXEL_ROW\row_index=s32'00000000000000000000000000000010  \genblk1[2].pr  (
    .COUNTER(COUNTER),
    .DATA_OUT(DATA_OUT),
    .ERASE(ERASE),
    .EXPOSE(EXPOSE),
    .RAMP(RAMP),
    .READ(READ[2])
  );
endmodule

(* dynports =  1  *)
(* src = "output/sensorTop.v:68.1-191.10" *)
module SENSOR_STATE(CLK, RESET, PIXEL_ERASE, PIXEL_EXPOSE, SENSOR_ROW_SELECT, NEW_ROW, PIXEL_ANALOG_RAMP, PIXEL_CONVERT_COUNTER, FRAME_FINISHED);
  (* src = "output/sensorTop.v:135.10-135.49" *)
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  (* src = "output/sensorTop.v:79.8-79.11" *)
  input CLK;
  (* src = "output/sensorTop.v:89.14-89.28" *)
  output FRAME_FINISHED;
  (* src = "output/sensorTop.v:85.13-85.20" *)
  output NEW_ROW;
  (* src = "output/sensorTop.v:86.14-86.31" *)
  output PIXEL_ANALOG_RAMP;
  (* src = "output/sensorTop.v:88.20-88.41" *)
  output [7:0] PIXEL_CONVERT_COUNTER;
  (* src = "output/sensorTop.v:81.14-81.25" *)
  output PIXEL_ERASE;
  (* src = "output/sensorTop.v:82.14-82.26" *)
  output PIXEL_EXPOSE;
  (* src = "output/sensorTop.v:80.8-80.13" *)
  input RESET;
  (* src = "output/sensorTop.v:84.41-84.58" *)
  output [2:0] SENSOR_ROW_SELECT;
  (* src = "output/sensorTop.v:106.28-106.35" *)
  wire [9:0] counter;
  (* src = "output/sensorTop.v:107.6-107.19" *)
  wire counter_reset;
  (* src = "output/sensorTop.v:117.7-117.19" *)
  wire dRamp_enable;
  (* src = "output/sensorTop.v:140.7-140.11" *)
  wire idle;
  (* src = "output/sensorTop.v:102.6-102.20" *)
  wire internal_reset;
  (* src = "output/sensorTop.v:108.7-108.27" *)
  wire master_counter_reset;
  (* src = "output/sensorTop.v:104.7-104.19" *)
  wire master_reset;
  (* src = "output/sensorTop.v:142.7-142.29" *)
  wire master_rowSelect_reset;
  (* src = "output/sensorTop.v:128.13-128.28" *)
  wire [2:0] rowSelect_count;
  (* src = "output/sensorTop.v:127.7-127.31" *)
  wire rowSelect_counter_enable;
  (* src = "output/sensorTop.v:126.7-126.30" *)
  wire rowSelect_counter_reset;
  (* src = "output/sensorTop.v:139.7-139.23" *)
  wire rowSelect_enable;
  (* src = "output/sensorTop.v:130.6-130.19" *)
  wire rowSelect_inc;
  (* src = "output/sensorTop.v:118.22-118.27" *)
  wire [3:0] state;
  (* src = "output/sensorTop.v:131.6-131.25" *)
  wire stateSelector_shift;
  NOT _081_ (
    .A(counter_reset),
    .Y(_018_)
  );
  NOT _082_ (
    .A(state[1]),
    .Y(_019_)
  );
  NOT _083_ (
    .A(state[0]),
    .Y(_020_)
  );
  NOT _084_ (
    .A(state[3]),
    .Y(_021_)
  );
  NOT _085_ (
    .A(state[2]),
    .Y(_022_)
  );
  NOT _086_ (
    .A(counter[0]),
    .Y(_023_)
  );
  NOT _087_ (
    .A(counter[3]),
    .Y(_024_)
  );
  NOT _088_ (
    .A(counter[2]),
    .Y(_025_)
  );
  NOT _089_ (
    .A(rowSelect_count[2]),
    .Y(_026_)
  );
  NOT _090_ (
    .A(CLK),
    .Y(_027_)
  );
  NOR _091_ (
    .A(internal_reset),
    .B(RESET),
    .Y(_028_)
  );
  NOT _092_ (
    .A(_028_),
    .Y(master_reset)
  );
  NAND _093_ (
    .A(_018_),
    .B(_028_),
    .Y(idle)
  );
  NOT _094_ (
    .A(idle),
    .Y(_029_)
  );
  NOR _095_ (
    .A(counter[9]),
    .B(counter[8]),
    .Y(_030_)
  );
  NOT _096_ (
    .A(_030_),
    .Y(_031_)
  );
  NOR _097_ (
    .A(state[1]),
    .B(state[0]),
    .Y(_032_)
  );
  NOR _098_ (
    .A(state[3]),
    .B(_022_),
    .Y(_033_)
  );
  NAND _099_ (
    .A(state[2]),
    .B(_032_),
    .Y(_034_)
  );
  NOR _100_ (
    .A(state[3]),
    .B(_034_),
    .Y(_035_)
  );
  NAND _101_ (
    .A(_032_),
    .B(_033_),
    .Y(_036_)
  );
  NOR _102_ (
    .A(state[3]),
    .B(state[2]),
    .Y(_037_)
  );
  NOR _103_ (
    .A(_019_),
    .B(state[0]),
    .Y(_038_)
  );
  NAND _104_ (
    .A(state[1]),
    .B(_037_),
    .Y(_039_)
  );
  NOR _105_ (
    .A(state[0]),
    .B(_039_),
    .Y(_040_)
  );
  NAND _106_ (
    .A(_037_),
    .B(_038_),
    .Y(_041_)
  );
  NOR _107_ (
    .A(_035_),
    .B(_040_),
    .Y(_042_)
  );
  NAND _108_ (
    .A(_036_),
    .B(_041_),
    .Y(_043_)
  );
  NOR _109_ (
    .A(_023_),
    .B(_025_),
    .Y(_044_)
  );
  NAND _110_ (
    .A(counter[0]),
    .B(counter[2]),
    .Y(_045_)
  );
  NAND _111_ (
    .A(counter[1]),
    .B(counter[3]),
    .Y(_046_)
  );
  NOT _112_ (
    .A(_046_),
    .Y(_047_)
  );
  NAND _113_ (
    .A(counter[5]),
    .B(counter[4]),
    .Y(_048_)
  );
  NOR _114_ (
    .A(_046_),
    .B(_048_),
    .Y(_049_)
  );
  NAND _115_ (
    .A(_044_),
    .B(_049_),
    .Y(_050_)
  );
  NAND _116_ (
    .A(counter[7]),
    .B(counter[6]),
    .Y(_051_)
  );
  NOR _117_ (
    .A(_050_),
    .B(_051_),
    .Y(_052_)
  );
  NOT _118_ (
    .A(_052_),
    .Y(_053_)
  );
  NOR _119_ (
    .A(_042_),
    .B(_053_),
    .Y(_054_)
  );
  NAND _120_ (
    .A(_043_),
    .B(_052_),
    .Y(_055_)
  );
  NOR _121_ (
    .A(counter[5]),
    .B(counter[4]),
    .Y(_056_)
  );
  NOR _122_ (
    .A(counter[7]),
    .B(counter[6]),
    .Y(_057_)
  );
  NAND _123_ (
    .A(_056_),
    .B(_057_),
    .Y(_058_)
  );
  NOR _124_ (
    .A(state[1]),
    .B(counter[1]),
    .Y(_059_)
  );
  NOT _125_ (
    .A(_059_),
    .Y(_060_)
  );
  NOR _126_ (
    .A(counter[3]),
    .B(_060_),
    .Y(_061_)
  );
  NAND _127_ (
    .A(_024_),
    .B(_059_),
    .Y(_062_)
  );
  NAND _128_ (
    .A(state[0]),
    .B(_037_),
    .Y(_063_)
  );
  NOR _129_ (
    .A(_058_),
    .B(_063_),
    .Y(_064_)
  );
  NOT _130_ (
    .A(_064_),
    .Y(_065_)
  );
  NOR _131_ (
    .A(_045_),
    .B(_065_),
    .Y(_066_)
  );
  NAND _132_ (
    .A(_044_),
    .B(_064_),
    .Y(_067_)
  );
  NOR _133_ (
    .A(_062_),
    .B(_067_),
    .Y(_068_)
  );
  NAND _134_ (
    .A(_061_),
    .B(_066_),
    .Y(_069_)
  );
  NOR _135_ (
    .A(_054_),
    .B(_068_),
    .Y(_070_)
  );
  NAND _136_ (
    .A(_055_),
    .B(_069_),
    .Y(_071_)
  );
  NOR _137_ (
    .A(_031_),
    .B(_070_),
    .Y(_072_)
  );
  NAND _138_ (
    .A(_030_),
    .B(_071_),
    .Y(_073_)
  );
  NOR _139_ (
    .A(idle),
    .B(_072_),
    .Y(_074_)
  );
  NAND _140_ (
    .A(_029_),
    .B(_073_),
    .Y(_075_)
  );
  NOR _141_ (
    .A(counter[0]),
    .B(_025_),
    .Y(_076_)
  );
  NAND _142_ (
    .A(_047_),
    .B(_076_),
    .Y(_077_)
  );
  NOR _143_ (
    .A(_031_),
    .B(_077_),
    .Y(_078_)
  );
  NOR _144_ (
    .A(_021_),
    .B(state[2]),
    .Y(_079_)
  );
  NAND _145_ (
    .A(_032_),
    .B(_079_),
    .Y(_080_)
  );
  NOR _146_ (
    .A(_058_),
    .B(_080_),
    .Y(_004_)
  );
  NAND _147_ (
    .A(_078_),
    .B(_004_),
    .Y(_005_)
  );
  NOT _148_ (
    .A(_005_),
    .Y(_006_)
  );
  NOR _149_ (
    .A(_075_),
    .B(_006_),
    .Y(_007_)
  );
  NAND _150_ (
    .A(_074_),
    .B(_005_),
    .Y(_008_)
  );
  NOR _151_ (
    .A(idle),
    .B(_007_),
    .Y(_002_)
  );
  NOR _152_ (
    .A(_075_),
    .B(_005_),
    .Y(_001_)
  );
  NAND _153_ (
    .A(state[3]),
    .B(stateSelector_shift),
    .Y(_009_)
  );
  NOT _154_ (
    .A(_009_),
    .Y(_010_)
  );
  NOR _155_ (
    .A(rowSelect_inc),
    .B(_010_),
    .Y(_011_)
  );
  NOT _156_ (
    .A(_011_),
    .Y(rowSelect_counter_reset)
  );
  NAND _157_ (
    .A(_028_),
    .B(_011_),
    .Y(_000_)
  );
  NOR _158_ (
    .A(_021_),
    .B(idle),
    .Y(rowSelect_enable)
  );
  NOR _159_ (
    .A(_020_),
    .B(idle),
    .Y(PIXEL_ERASE)
  );
  NOR _160_ (
    .A(_019_),
    .B(idle),
    .Y(PIXEL_EXPOSE)
  );
  NOR _161_ (
    .A(_027_),
    .B(_036_),
    .Y(PIXEL_ANALOG_RAMP)
  );
  NAND _162_ (
    .A(rowSelect_count[1]),
    .B(rowSelect_count[0]),
    .Y(_012_)
  );
  NOT _163_ (
    .A(_012_),
    .Y(_013_)
  );
  NAND _164_ (
    .A(_026_),
    .B(_013_),
    .Y(_014_)
  );
  NOR _165_ (
    .A(_080_),
    .B(_014_),
    .Y(_015_)
  );
  NOR _166_ (
    .A(_008_),
    .B(_015_),
    .Y(_016_)
  );
  NOR _167_ (
    .A(rowSelect_inc),
    .B(_007_),
    .Y(_017_)
  );
  NOR _168_ (
    .A(_016_),
    .B(_017_),
    .Y(_003_)
  );
  (* src = "output/sensorTop.v:159.2-187.6" *)
  DFFSR _169_ (
    .C(CLK),
    .D(rowSelect_counter_reset),
    .Q(NEW_ROW),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:159.2-187.6" *)
  DFFSR _170_ (
    .C(CLK),
    .D(idle),
    .Q(stateSelector_shift),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:159.2-187.6" *)
  DFFSR _171_ (
    .C(CLK),
    .D(_001_),
    .Q(internal_reset),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:159.2-187.6" *)
  DFFSR _172_ (
    .C(CLK),
    .D(_002_),
    .Q(counter_reset),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:159.2-187.6" *)
  DFFSR _173_ (
    .C(CLK),
    .D(_003_),
    .Q(rowSelect_inc),
    .R(RESET),
    .S(1'h0)
  );
  (* src = "output/sensorTop.v:110.33-115.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001010  Counter (
    .clk(CLK),
    .enable(1'h1),
    .out(counter),
    .reset(idle)
  );
  (* src = "output/sensorTop.v:120.22-125.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000001000  DRamp (
    .clk(CLK),
    .enable(state[2]),
    .out(PIXEL_CONVERT_COUNTER),
    .reset(master_reset)
  );
  (* src = "output/sensorTop.v:144.42-150.3" *)
  \$paramod\Selector\length=s32'00000000000000000000000000000011  RowSelector (
    .clk(rowSelect_inc),
    .inputEnable(rowSelect_enable),
    .out(SENSOR_ROW_SELECT),
    .outputEnable(rowSelect_enable),
    .reset(master_reset)
  );
  (* src = "output/sensorTop.v:133.22-138.3" *)
  \$paramod\Counter\bits=s32'00000000000000000000000000000011  RowSelectorCounter (
    .clk(CLK),
    .enable(state[3]),
    .out(rowSelect_count),
    .reset(_000_)
  );
  (* src = "output/sensorTop.v:151.30-157.3" *)
  \$paramod\Selector\length=s32'00000000000000000000000000000100  StateSelector (
    .clk(stateSelector_shift),
    .inputEnable(1'h1),
    .out(state),
    .outputEnable(1'h1),
    .reset(master_reset)
  );
  assign FRAME_FINISHED = internal_reset;
  assign dRamp_enable = state[2];
  assign master_counter_reset = idle;
  assign master_rowSelect_reset = master_reset;
  assign rowSelect_counter_enable = state[3];
endmodule

(* dynports =  1  *)
(* top =  1  *)
(* src = "output/sensorTop.v:455.1-507.10" *)
module SENSOR_TOP(CLK, RESET, BUFFER_CLK, OUTPUT_CLK, DATA_OUT, FRAME_FINISHED);
  (* src = "output/sensorTop.v:465.8-465.18" *)
  input BUFFER_CLK;
  (* src = "output/sensorTop.v:463.8-463.11" *)
  input CLK;
  (* src = "output/sensorTop.v:469.21-469.29" *)
  output [63:0] DATA_OUT;
  (* src = "output/sensorTop.v:470.14-470.28" *)
  output FRAME_FINISHED;
  (* src = "output/sensorTop.v:466.14-466.24" *)
  output OUTPUT_CLK;
  (* src = "output/sensorTop.v:464.8-464.13" *)
  input RESET;
  (* src = "output/sensorTop.v:477.13-477.34" *)
  wire [7:0] pixel_convert_counter;
  (* src = "output/sensorTop.v:476.7-476.25" *)
  wire sensor_analog_ramp;
  (* src = "output/sensorTop.v:479.39-479.54" *)
  wire [191:0] sensor_data_out;
  (* src = "output/sensorTop.v:471.7-471.19" *)
  wire sensor_erase;
  (* src = "output/sensorTop.v:472.7-472.20" *)
  wire sensor_expose;
  (* src = "output/sensorTop.v:475.7-475.21" *)
  wire sensor_new_row;
  (* src = "output/sensorTop.v:474.34-474.51" *)
  wire [2:0] sensor_row_select;
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:499.16-506.3" *)
  OUTPUT_BUFFER OutputBuffer (
    .CLK(BUFFER_CLK),
    .DATA_IN(sensor_data_out),
    .DATA_OUT(DATA_OUT),
    .OUTPUT_CLK(OUTPUT_CLK),
    .RESET(RESET),
    .SET_BUFFER(sensor_new_row)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:480.14-487.3" *)
  PIXEL_ARRAY PixelArray (
    .COUNTER(pixel_convert_counter),
    .DATA_OUT(sensor_data_out),
    .ERASE(sensor_erase),
    .EXPOSE(sensor_expose),
    .RAMP(sensor_analog_ramp),
    .READ(sensor_row_select)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "output/sensorTop.v:488.15-498.3" *)
  SENSOR_STATE SensorState (
    .CLK(CLK),
    .FRAME_FINISHED(FRAME_FINISHED),
    .NEW_ROW(sensor_new_row),
    .PIXEL_ANALOG_RAMP(sensor_analog_ramp),
    .PIXEL_CONVERT_COUNTER(pixel_convert_counter),
    .PIXEL_ERASE(sensor_erase),
    .PIXEL_EXPOSE(sensor_expose),
    .RESET(RESET),
    .SENSOR_ROW_SELECT(sensor_row_select)
  );
endmodule

(* src = "output/sensorTop.v:43.1-52.10" *)
module Tristate(A, EN, Y);
  (* src = "output/sensorTop.v:48.8-48.9" *)
  input A;
  (* src = "output/sensorTop.v:49.8-49.10" *)
  input EN;
  (* src = "output/sensorTop.v:50.14-50.15" *)
  output Y;
  (* src = "output/sensorTop.v:51.14-51.27" *)
  \$_TBUF_  _0_ (
    .A(A),
    .E(EN),
    .Y(Y)
  );
endmodule
