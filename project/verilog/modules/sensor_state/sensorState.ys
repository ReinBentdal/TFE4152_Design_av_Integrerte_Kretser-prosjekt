# read design
read_verilog -sv sensorState.v

# convert high-level behavioral parts ("processes") to d-type flip-flops and muxes
proc; 
fsm;

# simple optimizations
opt; 

# convert high-level memory constructs to d-type flip-flops and multiplexers
memory; 

# simple optimizations
opt

# convert design to (logical) gate-level netlists
techmap; 

# simple optimizations
opt

# generic synthesis
synth -top SENSOR_STATE

# map internal register types to the ones from the cell library
dfflibmap -liberty ../../../lib/demo.lib

# use ABC to map remaining logic to cells from the cell library
abc -liberty ../../../lib/demo.lib

# simple optimizations
opt

# writes netlist version. -v makes the output more verbous
write_verilog -v sensorState_netlist.v

# json used to create svg of circuit
write_json sensorState.json